/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : CPP_grammar_.g
 *     -                            On : 2012-10-12 16:29:40
 *     -                 for the lexer : CPP_grammar_LexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
CPP_grammar_Lexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCPP_grammar_Lexer, which is returned from a call to CPP_grammar_LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pCPP_grammar_Lexer are  as follows:
 *
 *  - 
 void
      pCPP_grammar_Lexer->OPERATOR(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__87(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__88(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__89(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__90(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__91(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__92(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__93(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__94(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__95(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__96(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__97(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__98(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__99(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__100(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__101(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__102(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__103(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__104(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__105(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__106(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__107(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__108(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__109(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__110(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__111(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__112(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__113(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__114(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__115(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__116(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__117(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__118(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__119(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__120(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__121(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__122(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__123(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__124(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__125(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__126(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__127(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__128(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__129(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__130(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__131(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__132(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__133(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__134(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__135(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__136(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__137(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__138(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__139(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__140(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__141(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__142(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__143(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__144(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__145(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__146(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__147(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__148(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__149(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__150(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__151(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__152(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__153(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__154(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__155(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__156(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__157(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__158(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__159(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__160(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__161(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__162(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__163(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__164(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__165(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__166(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__167(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__168(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__169(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__170(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__171(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__172(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__173(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__174(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->T__175(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->ASSIGNEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->COLON(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->COMMA(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->QUESTIONMARK(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->SEMICOLON(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->POINTERTO(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->DOT(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->ELLIPSIS(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->LPAREN(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->RPAREN(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->LSQUARE(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->RSQUARE(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->LCURLY(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->RCURLY(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->EQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->NOTEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->LESSTHANOREQUALTO(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->LESSTHAN(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->GREATERTHANOREQUALTO(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->GREATERTHAN(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->DIVIDE(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->DIVIDEEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->PLUS(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->PLUSEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->PLUSPLUS(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->MINUS(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->MINUSEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->MINUSMINUS(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->STAR(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->TIMESEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->MOD(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->MODEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->SHIFTRIGHT(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->SHIFTRIGHTEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->SHIFTLEFT(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->SHIFTLEFTEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->AND(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->NOT(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->OR(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->AMPERSAND(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->BITWISEANDEQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->TILDE(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->BITWISEOR(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->BITWISEOREQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->BITWISEXOR(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->BITWISEXOREQUAL(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->POINTERTOMBR(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->DOTMBR(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->SCOPE(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Whitespace(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Comment(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->CPPComment(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->PREPROC_DIRECTIVE(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->LineDirective(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Space(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Pragma(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Error(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->PreProcDirective(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->CharLiteral(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->WCharLiteral(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->StringLiteral(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->WStringLiteral(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->EndOfContinuedLine(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->EndOfLine(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Escape(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Digit(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Decimal(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->LongSuffix(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->UnsignedSuffix(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->FloatSuffix(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Exponent(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->UniversalCharacterName(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->HexQuad(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->HexadecimalDigit(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Vocabulary(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Number(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->ID(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->OCTALINT(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->DECIMALINT(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->HEXADECIMALINT(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->FLOATONE(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->FLOATTWO(pCPP_grammar_Lexer)
 *  - 
 void
      pCPP_grammar_Lexer->Tokens(pCPP_grammar_Lexer)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CPP_grammar_Lexer_H
#define _CPP_grammar_Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CPP_grammar_Lexer_Ctx_struct CPP_grammar_Lexer, * pCPP_grammar_Lexer;



	extern "C++"
	{
	#include "header_file.h"
	}


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */


/** Context tracking structure for 
CPP_grammar_Lexer

 */
struct CPP_grammar_Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mOPERATOR)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__87)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__88)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__89)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__90)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__91)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__92)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__93)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__94)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__95)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__96)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__97)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__98)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__99)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__100)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__101)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__102)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__103)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__104)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__105)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__106)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__107)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__108)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__109)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__110)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__111)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__112)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__113)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__114)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__115)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__116)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__117)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__118)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__119)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__120)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__121)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__122)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__123)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__124)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__125)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__126)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__127)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__128)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__129)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__130)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__131)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__132)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__133)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__134)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__135)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__136)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__137)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__138)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__139)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__140)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__141)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__142)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__143)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__144)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__145)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__146)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__147)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__148)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__149)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__150)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__151)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__152)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__153)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__154)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__155)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__156)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__157)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__158)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__159)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__160)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__161)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__162)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__163)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__164)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__165)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__166)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__167)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__168)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__169)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__170)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__171)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__172)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__173)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__174)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mT__175)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mASSIGNEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mQUESTIONMARK)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mSEMICOLON)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mPOINTERTO)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mELLIPSIS)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mLSQUARE)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mRSQUARE)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mLCURLY)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mRCURLY)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mNOTEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mLESSTHANOREQUALTO)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mLESSTHAN)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mGREATERTHANOREQUALTO)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mGREATERTHAN)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mDIVIDE)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mDIVIDEEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mPLUSEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mPLUSPLUS)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mMINUSEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mMINUSMINUS)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mSTAR)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mTIMESEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mMODEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mSHIFTRIGHT)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mSHIFTRIGHTEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mSHIFTLEFT)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mSHIFTLEFTEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mNOT)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mAMPERSAND)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mBITWISEANDEQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mTILDE)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mBITWISEOR)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mBITWISEOREQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mBITWISEXOR)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mBITWISEXOREQUAL)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mPOINTERTOMBR)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mDOTMBR)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mSCOPE)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mWhitespace)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mComment)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mCPPComment)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mPREPROC_DIRECTIVE)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mLineDirective)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mSpace)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mPragma)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mError)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mPreProcDirective)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mCharLiteral)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mWCharLiteral)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mStringLiteral)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mWStringLiteral)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mEndOfContinuedLine)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mEndOfLine)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mEscape)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mDigit)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mDecimal)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mLongSuffix)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mUnsignedSuffix)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mFloatSuffix)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mExponent)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mUniversalCharacterName)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mHexQuad)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mHexadecimalDigit)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mVocabulary)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mNumber)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mID)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mOCTALINT)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mDECIMALINT)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mHEXADECIMALINT)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mFLOATONE)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mFLOATTWO)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct CPP_grammar_Lexer_Ctx_struct * ctx);


















    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CPP_grammar_Lexer_Ctx_struct * ctx);
    void	    (*free)   (struct CPP_grammar_Lexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCPP_grammar_Lexer CPP_grammar_LexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pCPP_grammar_Lexer CPP_grammar_LexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define AMPERSAND      4
#define AND      5
#define ASSIGNEQUAL      6
#define BITWISEANDEQUAL      7
#define BITWISEOR      8
#define BITWISEOREQUAL      9
#define BITWISEXOR      10
#define BITWISEXOREQUAL      11
#define COLON      12
#define COMMA      13
#define CPPComment      14
#define CharLiteral      15
#define Comment      16
#define DECIMALINT      17
#define DIVIDE      18
#define DIVIDEEQUAL      19
#define DOT      20
#define DOTMBR      21
#define Decimal      22
#define Digit      23
#define ELLIPSIS      24
#define EQUAL      25
#define EndOfContinuedLine      26
#define EndOfLine      27
#define Error      28
#define Escape      29
#define Exponent      30
#define FLOATONE      31
#define FLOATTWO      32
#define FloatSuffix      33
#define GREATERTHAN      34
#define GREATERTHANOREQUALTO      35
#define HEXADECIMALINT      36
#define HexQuad      37
#define HexadecimalDigit      38
#define ID      39
#define LCURLY      40
#define LESSTHAN      41
#define LESSTHANOREQUALTO      42
#define LPAREN      43
#define LSQUARE      44
#define LineDirective      45
#define LongSuffix      46
#define MINUS      47
#define MINUSEQUAL      48
#define MINUSMINUS      49
#define MOD      50
#define MODEQUAL      51
#define NOT      52
#define NOTEQUAL      53
#define Number      54
#define OCTALINT      55
#define OPERATOR      56
#define OR      57
#define PLUS      58
#define PLUSEQUAL      59
#define PLUSPLUS      60
#define POINTERTO      61
#define POINTERTOMBR      62
#define PREPROC_DIRECTIVE      63
#define Pragma      64
#define PreProcDirective      65
#define QUESTIONMARK      66
#define RCURLY      67
#define RPAREN      68
#define RSQUARE      69
#define SCOPE      70
#define SEMICOLON      71
#define SHIFTLEFT      72
#define SHIFTLEFTEQUAL      73
#define SHIFTRIGHT      74
#define SHIFTRIGHTEQUAL      75
#define STAR      76
#define Space      77
#define StringLiteral      78
#define TILDE      79
#define TIMESEQUAL      80
#define UniversalCharacterName      81
#define UnsignedSuffix      82
#define Vocabulary      83
#define WCharLiteral      84
#define WStringLiteral      85
#define Whitespace      86
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CPP_grammar_Lexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
