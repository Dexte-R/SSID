/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : CPP_grammar_.g
 *     -                            On : 2012-10-12 16:29:39
 *     -                for the parser : CPP_grammar_ParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

	extern "C++"
	{
	#include "header_file.h"
	}
	//typedef CPP_grammar_Parser_function_specifier_return FS_ret_t;
	//typedef CPP_grammar_Parser_type_specifier_return TS_ret_t;

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "CPP_grammar_Parser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pCPP_grammar_Parser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pCPP_grammar_Parser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pCPP_grammar_Parser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pCPP_grammar_Parser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a CPP_grammar_Parser_external_declaration scope set
 */
static pCPP_grammar_Parser_external_declaration_SCOPE   pCPP_grammar_Parser_external_declarationPush(pCPP_grammar_Parser ctx);
static void ANTLR3_CDECL external_declarationFree(pCPP_grammar_Parser_external_declaration_SCOPE scope);
/* ----------------------------------------------------------------------------- */


/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL external_declarationFree(pCPP_grammar_Parser_external_declaration_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a CPP_grammar_Parser external_declaration scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code:
 * \code
 *   ctx->pCPP_grammar_Parser_external_declarationTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as:
 * \code
 *   void ANTLR3_CDECL myfunc( pCPP_grammar_Parser_external_declaration_SCOPE ptr).
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 *
 */
static pCPP_grammar_Parser_external_declaration_SCOPE
pCPP_grammar_Parser_external_declarationPush(pCPP_grammar_Parser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pCPP_grammar_Parser_external_declaration_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pCPP_grammar_Parser_external_declarationStack->size(ctx->pCPP_grammar_Parser_external_declarationStack) > ctx->pCPP_grammar_Parser_external_declarationStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pCPP_grammar_Parser_external_declaration_SCOPE)ctx->pCPP_grammar_Parser_external_declarationStack->get(ctx->pCPP_grammar_Parser_external_declarationStack, ctx->pCPP_grammar_Parser_external_declarationStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pCPP_grammar_Parser_external_declaration_SCOPE) ANTLR3_MALLOC(sizeof(CPP_grammar_Parser_external_declaration_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pCPP_grammar_Parser_external_declarationStack->push(ctx->pCPP_grammar_Parser_external_declarationStack, newAttributes, (void (*)(void *))external_declarationFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pCPP_grammar_Parser_external_declarationStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a CPP_grammar_Parser_direct_declarator scope set
 */
static pCPP_grammar_Parser_direct_declarator_SCOPE   pCPP_grammar_Parser_direct_declaratorPush(pCPP_grammar_Parser ctx);
static void ANTLR3_CDECL direct_declaratorFree(pCPP_grammar_Parser_direct_declarator_SCOPE scope);
/* ----------------------------------------------------------------------------- */


/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL direct_declaratorFree(pCPP_grammar_Parser_direct_declarator_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a CPP_grammar_Parser direct_declarator scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code:
 * \code
 *   ctx->pCPP_grammar_Parser_direct_declaratorTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as:
 * \code
 *   void ANTLR3_CDECL myfunc( pCPP_grammar_Parser_direct_declarator_SCOPE ptr).
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 *
 */
static pCPP_grammar_Parser_direct_declarator_SCOPE
pCPP_grammar_Parser_direct_declaratorPush(pCPP_grammar_Parser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pCPP_grammar_Parser_direct_declarator_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pCPP_grammar_Parser_direct_declaratorStack->size(ctx->pCPP_grammar_Parser_direct_declaratorStack) > ctx->pCPP_grammar_Parser_direct_declaratorStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pCPP_grammar_Parser_direct_declarator_SCOPE)ctx->pCPP_grammar_Parser_direct_declaratorStack->get(ctx->pCPP_grammar_Parser_direct_declaratorStack, ctx->pCPP_grammar_Parser_direct_declaratorStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pCPP_grammar_Parser_direct_declarator_SCOPE) ANTLR3_MALLOC(sizeof(CPP_grammar_Parser_direct_declarator_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pCPP_grammar_Parser_direct_declaratorStack->push(ctx->pCPP_grammar_Parser_direct_declaratorStack, newAttributes, (void (*)(void *))direct_declaratorFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pCPP_grammar_Parser_direct_declaratorStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a CPP_grammar_Parser_statement scope set
 */
static pCPP_grammar_Parser_statement_SCOPE   pCPP_grammar_Parser_statementPush(pCPP_grammar_Parser ctx);
static void ANTLR3_CDECL statementFree(pCPP_grammar_Parser_statement_SCOPE scope);
/* ----------------------------------------------------------------------------- */


/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL statementFree(pCPP_grammar_Parser_statement_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a CPP_grammar_Parser statement scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code:
 * \code
 *   ctx->pCPP_grammar_Parser_statementTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as:
 * \code
 *   void ANTLR3_CDECL myfunc( pCPP_grammar_Parser_statement_SCOPE ptr).
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 *
 */
static pCPP_grammar_Parser_statement_SCOPE
pCPP_grammar_Parser_statementPush(pCPP_grammar_Parser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pCPP_grammar_Parser_statement_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pCPP_grammar_Parser_statementStack->size(ctx->pCPP_grammar_Parser_statementStack) > ctx->pCPP_grammar_Parser_statementStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pCPP_grammar_Parser_statement_SCOPE)ctx->pCPP_grammar_Parser_statementStack->get(ctx->pCPP_grammar_Parser_statementStack, ctx->pCPP_grammar_Parser_statementStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pCPP_grammar_Parser_statement_SCOPE) ANTLR3_MALLOC(sizeof(CPP_grammar_Parser_statement_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pCPP_grammar_Parser_statementStack->push(ctx->pCPP_grammar_Parser_statementStack, newAttributes, (void (*)(void *))statementFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pCPP_grammar_Parser_statementStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a CPP_grammar_Parser_ptr_operator scope set
 */
static pCPP_grammar_Parser_ptr_operator_SCOPE   pCPP_grammar_Parser_ptr_operatorPush(pCPP_grammar_Parser ctx);
static void ANTLR3_CDECL ptr_operatorFree(pCPP_grammar_Parser_ptr_operator_SCOPE scope);
/* ----------------------------------------------------------------------------- */


/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL ptr_operatorFree(pCPP_grammar_Parser_ptr_operator_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a CPP_grammar_Parser ptr_operator scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code:
 * \code
 *   ctx->pCPP_grammar_Parser_ptr_operatorTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as:
 * \code
 *   void ANTLR3_CDECL myfunc( pCPP_grammar_Parser_ptr_operator_SCOPE ptr).
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 *
 */
static pCPP_grammar_Parser_ptr_operator_SCOPE
pCPP_grammar_Parser_ptr_operatorPush(pCPP_grammar_Parser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pCPP_grammar_Parser_ptr_operator_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pCPP_grammar_Parser_ptr_operatorStack->size(ctx->pCPP_grammar_Parser_ptr_operatorStack) > ctx->pCPP_grammar_Parser_ptr_operatorStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pCPP_grammar_Parser_ptr_operator_SCOPE)ctx->pCPP_grammar_Parser_ptr_operatorStack->get(ctx->pCPP_grammar_Parser_ptr_operatorStack, ctx->pCPP_grammar_Parser_ptr_operatorStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pCPP_grammar_Parser_ptr_operator_SCOPE) ANTLR3_MALLOC(sizeof(CPP_grammar_Parser_ptr_operator_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pCPP_grammar_Parser_ptr_operatorStack->push(ctx->pCPP_grammar_Parser_ptr_operatorStack, newAttributes, (void (*)(void *))ptr_operatorFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pCPP_grammar_Parser_ptr_operatorStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}







/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   CPP_grammar_ParserTokenNames[172+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "AMPERSAND",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "ASSIGNEQUAL",
        (pANTLR3_UINT8) "BITWISEANDEQUAL",
        (pANTLR3_UINT8) "BITWISEOR",
        (pANTLR3_UINT8) "BITWISEOREQUAL",
        (pANTLR3_UINT8) "BITWISEXOR",
        (pANTLR3_UINT8) "BITWISEXOREQUAL",
        (pANTLR3_UINT8) "COLON",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "CPPComment",
        (pANTLR3_UINT8) "CharLiteral",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "DECIMALINT",
        (pANTLR3_UINT8) "DIVIDE",
        (pANTLR3_UINT8) "DIVIDEEQUAL",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "DOTMBR",
        (pANTLR3_UINT8) "Decimal",
        (pANTLR3_UINT8) "Digit",
        (pANTLR3_UINT8) "ELLIPSIS",
        (pANTLR3_UINT8) "EQUAL",
        (pANTLR3_UINT8) "EndOfContinuedLine",
        (pANTLR3_UINT8) "EndOfLine",
        (pANTLR3_UINT8) "Error",
        (pANTLR3_UINT8) "Escape",
        (pANTLR3_UINT8) "Exponent",
        (pANTLR3_UINT8) "FLOATONE",
        (pANTLR3_UINT8) "FLOATTWO",
        (pANTLR3_UINT8) "FloatSuffix",
        (pANTLR3_UINT8) "GREATERTHAN",
        (pANTLR3_UINT8) "GREATERTHANOREQUALTO",
        (pANTLR3_UINT8) "HEXADECIMALINT",
        (pANTLR3_UINT8) "HexQuad",
        (pANTLR3_UINT8) "HexadecimalDigit",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LCURLY",
        (pANTLR3_UINT8) "LESSTHAN",
        (pANTLR3_UINT8) "LESSTHANOREQUALTO",
        (pANTLR3_UINT8) "LPAREN",
        (pANTLR3_UINT8) "LSQUARE",
        (pANTLR3_UINT8) "LineDirective",
        (pANTLR3_UINT8) "LongSuffix",
        (pANTLR3_UINT8) "MINUS",
        (pANTLR3_UINT8) "MINUSEQUAL",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "MODEQUAL",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "NOTEQUAL",
        (pANTLR3_UINT8) "Number",
        (pANTLR3_UINT8) "OCTALINT",
        (pANTLR3_UINT8) "OPERATOR",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "PLUSEQUAL",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "POINTERTO",
        (pANTLR3_UINT8) "POINTERTOMBR",
        (pANTLR3_UINT8) "PREPROC_DIRECTIVE",
        (pANTLR3_UINT8) "Pragma",
        (pANTLR3_UINT8) "PreProcDirective",
        (pANTLR3_UINT8) "QUESTIONMARK",
        (pANTLR3_UINT8) "RCURLY",
        (pANTLR3_UINT8) "RPAREN",
        (pANTLR3_UINT8) "RSQUARE",
        (pANTLR3_UINT8) "SCOPE",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "SHIFTLEFT",
        (pANTLR3_UINT8) "SHIFTLEFTEQUAL",
        (pANTLR3_UINT8) "SHIFTRIGHT",
        (pANTLR3_UINT8) "SHIFTRIGHTEQUAL",
        (pANTLR3_UINT8) "STAR",
        (pANTLR3_UINT8) "Space",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "TILDE",
        (pANTLR3_UINT8) "TIMESEQUAL",
        (pANTLR3_UINT8) "UniversalCharacterName",
        (pANTLR3_UINT8) "UnsignedSuffix",
        (pANTLR3_UINT8) "Vocabulary",
        (pANTLR3_UINT8) "WCharLiteral",
        (pANTLR3_UINT8) "WStringLiteral",
        (pANTLR3_UINT8) "Whitespace",
        (pANTLR3_UINT8) "'__alignof__'",
        (pANTLR3_UINT8) "'__cdecl'",
        (pANTLR3_UINT8) "'__declspec'",
        (pANTLR3_UINT8) "'__far'",
        (pANTLR3_UINT8) "'__inline'",
        (pANTLR3_UINT8) "'__int16'",
        (pANTLR3_UINT8) "'__int32'",
        (pANTLR3_UINT8) "'__int64'",
        (pANTLR3_UINT8) "'__int8'",
        (pANTLR3_UINT8) "'__interrupt'",
        (pANTLR3_UINT8) "'__near'",
        (pANTLR3_UINT8) "'__pascal'",
        (pANTLR3_UINT8) "'__stdcall'",
        (pANTLR3_UINT8) "'__w64'",
        (pANTLR3_UINT8) "'_cdecl'",
        (pANTLR3_UINT8) "'_declspec'",
        (pANTLR3_UINT8) "'_far'",
        (pANTLR3_UINT8) "'_inline'",
        (pANTLR3_UINT8) "'_int16'",
        (pANTLR3_UINT8) "'_int32'",
        (pANTLR3_UINT8) "'_int64'",
        (pANTLR3_UINT8) "'_int8'",
        (pANTLR3_UINT8) "'_near'",
        (pANTLR3_UINT8) "'_pascal'",
        (pANTLR3_UINT8) "'_stdcall'",
        (pANTLR3_UINT8) "'_w64'",
        (pANTLR3_UINT8) "'antlrTrace_off'",
        (pANTLR3_UINT8) "'antlrTrace_on'",
        (pANTLR3_UINT8) "'auto'",
        (pANTLR3_UINT8) "'bool'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'char'",
        (pANTLR3_UINT8) "'class'",
        (pANTLR3_UINT8) "'const'",
        (pANTLR3_UINT8) "'const_cast'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'double'",
        (pANTLR3_UINT8) "'dynamic_cast'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'enum'",
        (pANTLR3_UINT8) "'explicit'",
        (pANTLR3_UINT8) "'extern'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'float'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'friend'",
        (pANTLR3_UINT8) "'goto'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'inline'",
        (pANTLR3_UINT8) "'int'",
        (pANTLR3_UINT8) "'long'",
        (pANTLR3_UINT8) "'mutable'",
        (pANTLR3_UINT8) "'namespace'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'pascal'",
        (pANTLR3_UINT8) "'private'",
        (pANTLR3_UINT8) "'protected'",
        (pANTLR3_UINT8) "'public'",
        (pANTLR3_UINT8) "'register'",
        (pANTLR3_UINT8) "'reinterpret_cast'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'short'",
        (pANTLR3_UINT8) "'signed'",
        (pANTLR3_UINT8) "'sizeof'",
        (pANTLR3_UINT8) "'static'",
        (pANTLR3_UINT8) "'static_cast'",
        (pANTLR3_UINT8) "'struct'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'template'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'typedef'",
        (pANTLR3_UINT8) "'typeid'",
        (pANTLR3_UINT8) "'typename'",
        (pANTLR3_UINT8) "'union'",
        (pANTLR3_UINT8) "'unsigned'",
        (pANTLR3_UINT8) "'using'",
        (pANTLR3_UINT8) "'virtual'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'volatile'",
        (pANTLR3_UINT8) "'wchar_t'",
        (pANTLR3_UINT8) "'while'"
       };


/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pCPP_grammar_Parser_external_declarationStack
 */
void
pCPP_grammar_Parser_external_declarationPop(pCPP_grammar_Parser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(external_declaration)->free != NULL)
	{
        SCOPE_TOP(external_declaration)->free(SCOPE_TOP(external_declaration));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pCPP_grammar_Parser_external_declarationStack_limit--;
    SCOPE_TOP(external_declaration) = (pCPP_grammar_Parser_external_declaration_SCOPE)(ctx->pCPP_grammar_Parser_external_declarationStack->get(ctx->pCPP_grammar_Parser_external_declarationStack, ctx->pCPP_grammar_Parser_external_declarationStack_limit - 1));
}


/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pCPP_grammar_Parser_direct_declaratorStack
 */
void
pCPP_grammar_Parser_direct_declaratorPop(pCPP_grammar_Parser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(direct_declarator)->free != NULL)
	{
        SCOPE_TOP(direct_declarator)->free(SCOPE_TOP(direct_declarator));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pCPP_grammar_Parser_direct_declaratorStack_limit--;
    SCOPE_TOP(direct_declarator) = (pCPP_grammar_Parser_direct_declarator_SCOPE)(ctx->pCPP_grammar_Parser_direct_declaratorStack->get(ctx->pCPP_grammar_Parser_direct_declaratorStack, ctx->pCPP_grammar_Parser_direct_declaratorStack_limit - 1));
}


/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pCPP_grammar_Parser_statementStack
 */
void
pCPP_grammar_Parser_statementPop(pCPP_grammar_Parser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(statement)->free != NULL)
	{
        SCOPE_TOP(statement)->free(SCOPE_TOP(statement));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pCPP_grammar_Parser_statementStack_limit--;
    SCOPE_TOP(statement) = (pCPP_grammar_Parser_statement_SCOPE)(ctx->pCPP_grammar_Parser_statementStack->get(ctx->pCPP_grammar_Parser_statementStack, ctx->pCPP_grammar_Parser_statementStack_limit - 1));
}


/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pCPP_grammar_Parser_ptr_operatorStack
 */
void
pCPP_grammar_Parser_ptr_operatorPop(pCPP_grammar_Parser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(ptr_operator)->free != NULL)
	{
        SCOPE_TOP(ptr_operator)->free(SCOPE_TOP(ptr_operator));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pCPP_grammar_Parser_ptr_operatorStack_limit--;
    SCOPE_TOP(ptr_operator) = (pCPP_grammar_Parser_ptr_operator_SCOPE)(ctx->pCPP_grammar_Parser_ptr_operatorStack->get(ctx->pCPP_grammar_Parser_ptr_operatorStack, ctx->pCPP_grammar_Parser_ptr_operatorStack_limit - 1));
}



// Forward declare the locally static matching functions we have generated.
//
static 
 void
	translation_unit    (pCPP_grammar_Parser ctx);
static 
 void
	external_declaration    (pCPP_grammar_Parser ctx);
static 
 void
	member_declaration    (pCPP_grammar_Parser ctx);
static 
 void
	namespace_definition    (pCPP_grammar_Parser ctx);
static 
 void
	namespace_alias_definition    (pCPP_grammar_Parser ctx);
static 
 void
	function_definition    (pCPP_grammar_Parser ctx);
static 
 void
	declaration    (pCPP_grammar_Parser ctx);
static 
 void
	linkage_specification    (pCPP_grammar_Parser ctx);
static 
 void
	class_head    (pCPP_grammar_Parser ctx);
static 
 void
	declaration_specifiers    (pCPP_grammar_Parser ctx);
static 
 StorageClass
	storage_class_specifier    (pCPP_grammar_Parser ctx);
static 
 FunctionSpecifier
	function_specifier    (pCPP_grammar_Parser ctx);
static 
 TypeSpecifier
	type_specifier    (pCPP_grammar_Parser ctx);
static 
 TypeSpecifier
	simple_type_specifier    (pCPP_grammar_Parser ctx);
static 
 char *
	qualified_type    (pCPP_grammar_Parser ctx, char *pQualifiedTypeBuf);
static 
 TypeSpecifier
	class_specifier    (pCPP_grammar_Parser ctx);
static 
 TypeQualifier
	type_qualifier    (pCPP_grammar_Parser ctx);
static 
 void
	class_decl_or_def    (pCPP_grammar_Parser ctx, char *pClassDeclOrDefBuf, FunctionSpecifier fs);
static 
 void
	base_clause    (pCPP_grammar_Parser ctx);
static 
 void
	base_specifier    (pCPP_grammar_Parser ctx);
static 
 void
	access_specifier    (pCPP_grammar_Parser ctx);
static 
 void
	enum_specifier    (pCPP_grammar_Parser ctx);
static 
 void
	enumerator_list    (pCPP_grammar_Parser ctx);
static 
 void
	enumerator    (pCPP_grammar_Parser ctx);
static 
 CPP_grammar_Parser_qualified_id_return
	qualified_id    (pCPP_grammar_Parser ctx, char *pScopeReturnBuf);
static 
 void
	typeID    (pCPP_grammar_Parser ctx);
static 
 void
	init_declarator_list    (pCPP_grammar_Parser ctx);
static 
 void
	member_declarator    (pCPP_grammar_Parser ctx);
static 
 void
	initializer    (pCPP_grammar_Parser ctx);
static 
 void
	declarator    (pCPP_grammar_Parser ctx);
static 
 void
	direct_declarator    (pCPP_grammar_Parser ctx);
static 
 void
	declarator_suffix    (pCPP_grammar_Parser ctx);
static 
 void
	conversion_function_decl_or_def    (pCPP_grammar_Parser ctx);
static 
 void
	function_declarator    (pCPP_grammar_Parser ctx, int definition);
static 
 void
	function_direct_declarator    (pCPP_grammar_Parser ctx, int definition);
static 
 void
	ctor_definition    (pCPP_grammar_Parser ctx);
static 
 void
	ctor_head    (pCPP_grammar_Parser ctx);
static 
 void
	ctor_decl_spec    (pCPP_grammar_Parser ctx);
static 
 void
	ctor_declarator    (pCPP_grammar_Parser ctx, int definition);
static 
 char *
	qualified_ctor_id    (pCPP_grammar_Parser ctx, char *pQualifiedCtorIdBuf);
static 
 void
	ctor_body    (pCPP_grammar_Parser ctx);
static 
 void
	ctor_initializer    (pCPP_grammar_Parser ctx);
static 
 void
	superclass_init    (pCPP_grammar_Parser ctx);
static 
 void
	dtor_head    (pCPP_grammar_Parser ctx, int definition);
static 
 void
	dtor_decl_spec    (pCPP_grammar_Parser ctx);
static 
 void
	dtor_declarator    (pCPP_grammar_Parser ctx, int definition);
static 
 void
	dtor_body    (pCPP_grammar_Parser ctx);
static 
 void
	parameter_list    (pCPP_grammar_Parser ctx);
static 
 void
	parameter_declaration_list    (pCPP_grammar_Parser ctx);
static 
 void
	parameter_declaration    (pCPP_grammar_Parser ctx);
static 
 void
	type_id    (pCPP_grammar_Parser ctx);
static 
 void
	abstract_declarator    (pCPP_grammar_Parser ctx);
static 
 void
	abstract_declarator_suffix    (pCPP_grammar_Parser ctx);
static 
 void
	exception_specification    (pCPP_grammar_Parser ctx);
static 
 void
	template_head    (pCPP_grammar_Parser ctx);
static 
 void
	template_parameter_list    (pCPP_grammar_Parser ctx);
static 
 void
	template_parameter    (pCPP_grammar_Parser ctx);
static 
 void
	type_parameter    (pCPP_grammar_Parser ctx);
static 
 void
	assigned_type_name    (pCPP_grammar_Parser ctx);
static 
 void
	template_parameter_declaration    (pCPP_grammar_Parser ctx);
static 
 void
	template_id    (pCPP_grammar_Parser ctx);
static 
 void
	template_argument_list    (pCPP_grammar_Parser ctx);
static 
 void
	template_argument    (pCPP_grammar_Parser ctx);
static 
 void
	statement_list    (pCPP_grammar_Parser ctx);
static 
 void
	statement    (pCPP_grammar_Parser ctx);
static 
 void
	block_declaration    (pCPP_grammar_Parser ctx);
static 
 void
	simple_declaration    (pCPP_grammar_Parser ctx);
static 
 void
	labeled_statement    (pCPP_grammar_Parser ctx);
static 
 void
	case_statement    (pCPP_grammar_Parser ctx);
static 
 void
	default_statement    (pCPP_grammar_Parser ctx);
static 
 void
	compound_statement    (pCPP_grammar_Parser ctx);
static 
 void
	selection_statement    (pCPP_grammar_Parser ctx);
static 
 void
	iteration_statement    (pCPP_grammar_Parser ctx);
static 
 void
	condition    (pCPP_grammar_Parser ctx);
static 
 void
	jump_statement    (pCPP_grammar_Parser ctx);
static 
 void
	try_block    (pCPP_grammar_Parser ctx);
static 
 void
	handler    (pCPP_grammar_Parser ctx);
static 
 void
	exception_declaration    (pCPP_grammar_Parser ctx);
static 
 void
	throw_statement    (pCPP_grammar_Parser ctx);
static 
 void
	using_statement    (pCPP_grammar_Parser ctx);
static 
 void
	expression    (pCPP_grammar_Parser ctx);
static 
 void
	assignment_expression    (pCPP_grammar_Parser ctx);
static 
 void
	remainder_expression    (pCPP_grammar_Parser ctx);
static 
 void
	conditional_expression    (pCPP_grammar_Parser ctx);
static 
 void
	constant_expression    (pCPP_grammar_Parser ctx);
static 
 void
	logical_or_expression    (pCPP_grammar_Parser ctx);
static 
 void
	logical_and_expression    (pCPP_grammar_Parser ctx);
static 
 void
	inclusive_or_expression    (pCPP_grammar_Parser ctx);
static 
 void
	exclusive_or_expression    (pCPP_grammar_Parser ctx);
static 
 void
	and_expression    (pCPP_grammar_Parser ctx);
static 
 void
	equality_expression    (pCPP_grammar_Parser ctx);
static 
 void
	relational_expression    (pCPP_grammar_Parser ctx);
static 
 void
	shift_expression    (pCPP_grammar_Parser ctx);
static 
 void
	additive_expression    (pCPP_grammar_Parser ctx);
static 
 void
	multiplicative_expression    (pCPP_grammar_Parser ctx);
static 
 void
	pm_expression    (pCPP_grammar_Parser ctx);
static 
 void
	cast_expression    (pCPP_grammar_Parser ctx);
static 
 void
	unary_expression    (pCPP_grammar_Parser ctx);
static 
 void
	postfix_expression    (pCPP_grammar_Parser ctx);
static 
 void
	primary_expression    (pCPP_grammar_Parser ctx);
static 
 void
	id_expression    (pCPP_grammar_Parser ctx);
static 
 void
	literal    (pCPP_grammar_Parser ctx);
static 
 void
	unary_operator    (pCPP_grammar_Parser ctx);
static 
 void
	new_expression    (pCPP_grammar_Parser ctx);
static 
 void
	new_initializer    (pCPP_grammar_Parser ctx);
static 
 void
	new_type_id    (pCPP_grammar_Parser ctx);
static 
 void
	new_declarator    (pCPP_grammar_Parser ctx);
static 
 void
	direct_new_declarator    (pCPP_grammar_Parser ctx);
static 
 void
	ptr_operator    (pCPP_grammar_Parser ctx);
static 
 void
	ptr_to_member    (pCPP_grammar_Parser ctx);
static 
 void
	cv_qualifier_seq    (pCPP_grammar_Parser ctx);
static 
 char *
	scope_override    (pCPP_grammar_Parser ctx, char *pBufScopeOverrideBuf);
static 
 void
	delete_expression    (pCPP_grammar_Parser ctx);
static 
 void
	expression_list    (pCPP_grammar_Parser ctx);
static 
 char*
	optor    (pCPP_grammar_Parser ctx, char *pScopeReturnBuf);
static 
 void
	optor_simple_tokclass    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred1_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred2_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred3_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred4_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred5_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred6_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred7_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred8_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred9_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred10_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred11_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred12_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred13_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred14_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred15_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred16_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred17_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred18_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred19_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred20_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred21_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred22_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred23_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred24_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred25_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred26_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred27_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred28_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred29_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred30_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred31_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred32_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred33_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred34_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred35_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred36_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred37_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred38_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred39_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred40_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred41_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred42_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred43_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred44_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred45_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred46_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred47_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred48_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred49_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred50_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred51_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred52_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred53_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred54_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred55_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred56_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred57_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred58_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred59_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred60_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred61_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred62_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred63_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred64_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred65_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred66_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred67_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred68_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred69_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred70_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred71_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred72_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred73_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred74_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred75_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred76_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred77_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred78_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred79_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred80_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred81_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred82_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred83_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred84_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred85_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred86_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred87_CPP_grammar_    (pCPP_grammar_Parser ctx);
static 
 ANTLR3_BOOLEAN
	synpred88_CPP_grammar_    (pCPP_grammar_Parser ctx);
static void	CPP_grammar_ParserFree(pCPP_grammar_Parser ctx);
static void     CPP_grammar_ParserReset (pCPP_grammar_Parser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "CPP_grammar_.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new CPP_grammar_Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pCPP_grammar_Parser
CPP_grammar_ParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return CPP_grammar_ParserNewSSD(instream, NULL);
}

/** \brief Create a new CPP_grammar_Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pCPP_grammar_Parser
CPP_grammar_ParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pCPP_grammar_Parser ctx;	    /* Context structure we will build and return   */

    ctx	= (pCPP_grammar_Parser) ANTLR3_CALLOC(1, sizeof(CPP_grammar_Parser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in CPP_grammar_Parser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our CPP_grammar_Parser interface
     */
    ctx->translation_unit	= translation_unit;
    ctx->external_declaration	= external_declaration;
    ctx->member_declaration	= member_declaration;
    ctx->namespace_definition	= namespace_definition;
    ctx->namespace_alias_definition	= namespace_alias_definition;
    ctx->function_definition	= function_definition;
    ctx->declaration	= declaration;
    ctx->linkage_specification	= linkage_specification;
    ctx->class_head	= class_head;
    ctx->declaration_specifiers	= declaration_specifiers;
    ctx->storage_class_specifier	= storage_class_specifier;
    ctx->function_specifier	= function_specifier;
    ctx->type_specifier	= type_specifier;
    ctx->simple_type_specifier	= simple_type_specifier;
    ctx->qualified_type	= qualified_type;
    ctx->class_specifier	= class_specifier;
    ctx->type_qualifier	= type_qualifier;
    ctx->class_decl_or_def	= class_decl_or_def;
    ctx->base_clause	= base_clause;
    ctx->base_specifier	= base_specifier;
    ctx->access_specifier	= access_specifier;
    ctx->enum_specifier	= enum_specifier;
    ctx->enumerator_list	= enumerator_list;
    ctx->enumerator	= enumerator;
    ctx->qualified_id	= qualified_id;
    ctx->typeID	= typeID;
    ctx->init_declarator_list	= init_declarator_list;
    ctx->member_declarator	= member_declarator;
    ctx->initializer	= initializer;
    ctx->declarator	= declarator;
    ctx->direct_declarator	= direct_declarator;
    ctx->declarator_suffix	= declarator_suffix;
    ctx->conversion_function_decl_or_def	= conversion_function_decl_or_def;
    ctx->function_declarator	= function_declarator;
    ctx->function_direct_declarator	= function_direct_declarator;
    ctx->ctor_definition	= ctor_definition;
    ctx->ctor_head	= ctor_head;
    ctx->ctor_decl_spec	= ctor_decl_spec;
    ctx->ctor_declarator	= ctor_declarator;
    ctx->qualified_ctor_id	= qualified_ctor_id;
    ctx->ctor_body	= ctor_body;
    ctx->ctor_initializer	= ctor_initializer;
    ctx->superclass_init	= superclass_init;
    ctx->dtor_head	= dtor_head;
    ctx->dtor_decl_spec	= dtor_decl_spec;
    ctx->dtor_declarator	= dtor_declarator;
    ctx->dtor_body	= dtor_body;
    ctx->parameter_list	= parameter_list;
    ctx->parameter_declaration_list	= parameter_declaration_list;
    ctx->parameter_declaration	= parameter_declaration;
    ctx->type_id	= type_id;
    ctx->abstract_declarator	= abstract_declarator;
    ctx->abstract_declarator_suffix	= abstract_declarator_suffix;
    ctx->exception_specification	= exception_specification;
    ctx->template_head	= template_head;
    ctx->template_parameter_list	= template_parameter_list;
    ctx->template_parameter	= template_parameter;
    ctx->type_parameter	= type_parameter;
    ctx->assigned_type_name	= assigned_type_name;
    ctx->template_parameter_declaration	= template_parameter_declaration;
    ctx->template_id	= template_id;
    ctx->template_argument_list	= template_argument_list;
    ctx->template_argument	= template_argument;
    ctx->statement_list	= statement_list;
    ctx->statement	= statement;
    ctx->block_declaration	= block_declaration;
    ctx->simple_declaration	= simple_declaration;
    ctx->labeled_statement	= labeled_statement;
    ctx->case_statement	= case_statement;
    ctx->default_statement	= default_statement;
    ctx->compound_statement	= compound_statement;
    ctx->selection_statement	= selection_statement;
    ctx->iteration_statement	= iteration_statement;
    ctx->condition	= condition;
    ctx->jump_statement	= jump_statement;
    ctx->try_block	= try_block;
    ctx->handler	= handler;
    ctx->exception_declaration	= exception_declaration;
    ctx->throw_statement	= throw_statement;
    ctx->using_statement	= using_statement;
    ctx->expression	= expression;
    ctx->assignment_expression	= assignment_expression;
    ctx->remainder_expression	= remainder_expression;
    ctx->conditional_expression	= conditional_expression;
    ctx->constant_expression	= constant_expression;
    ctx->logical_or_expression	= logical_or_expression;
    ctx->logical_and_expression	= logical_and_expression;
    ctx->inclusive_or_expression	= inclusive_or_expression;
    ctx->exclusive_or_expression	= exclusive_or_expression;
    ctx->and_expression	= and_expression;
    ctx->equality_expression	= equality_expression;
    ctx->relational_expression	= relational_expression;
    ctx->shift_expression	= shift_expression;
    ctx->additive_expression	= additive_expression;
    ctx->multiplicative_expression	= multiplicative_expression;
    ctx->pm_expression	= pm_expression;
    ctx->cast_expression	= cast_expression;
    ctx->unary_expression	= unary_expression;
    ctx->postfix_expression	= postfix_expression;
    ctx->primary_expression	= primary_expression;
    ctx->id_expression	= id_expression;
    ctx->literal	= literal;
    ctx->unary_operator	= unary_operator;
    ctx->new_expression	= new_expression;
    ctx->new_initializer	= new_initializer;
    ctx->new_type_id	= new_type_id;
    ctx->new_declarator	= new_declarator;
    ctx->direct_new_declarator	= direct_new_declarator;
    ctx->ptr_operator	= ptr_operator;
    ctx->ptr_to_member	= ptr_to_member;
    ctx->cv_qualifier_seq	= cv_qualifier_seq;
    ctx->scope_override	= scope_override;
    ctx->delete_expression	= delete_expression;
    ctx->expression_list	= expression_list;
    ctx->optor	= optor;
    ctx->optor_simple_tokclass	= optor_simple_tokclass;
    ctx->synpred1_CPP_grammar_	= synpred1_CPP_grammar_;
    ctx->synpred2_CPP_grammar_	= synpred2_CPP_grammar_;
    ctx->synpred3_CPP_grammar_	= synpred3_CPP_grammar_;
    ctx->synpred4_CPP_grammar_	= synpred4_CPP_grammar_;
    ctx->synpred5_CPP_grammar_	= synpred5_CPP_grammar_;
    ctx->synpred6_CPP_grammar_	= synpred6_CPP_grammar_;
    ctx->synpred7_CPP_grammar_	= synpred7_CPP_grammar_;
    ctx->synpred8_CPP_grammar_	= synpred8_CPP_grammar_;
    ctx->synpred9_CPP_grammar_	= synpred9_CPP_grammar_;
    ctx->synpred10_CPP_grammar_	= synpred10_CPP_grammar_;
    ctx->synpred11_CPP_grammar_	= synpred11_CPP_grammar_;
    ctx->synpred12_CPP_grammar_	= synpred12_CPP_grammar_;
    ctx->synpred13_CPP_grammar_	= synpred13_CPP_grammar_;
    ctx->synpred14_CPP_grammar_	= synpred14_CPP_grammar_;
    ctx->synpred15_CPP_grammar_	= synpred15_CPP_grammar_;
    ctx->synpred16_CPP_grammar_	= synpred16_CPP_grammar_;
    ctx->synpred17_CPP_grammar_	= synpred17_CPP_grammar_;
    ctx->synpred18_CPP_grammar_	= synpred18_CPP_grammar_;
    ctx->synpred19_CPP_grammar_	= synpred19_CPP_grammar_;
    ctx->synpred20_CPP_grammar_	= synpred20_CPP_grammar_;
    ctx->synpred21_CPP_grammar_	= synpred21_CPP_grammar_;
    ctx->synpred22_CPP_grammar_	= synpred22_CPP_grammar_;
    ctx->synpred23_CPP_grammar_	= synpred23_CPP_grammar_;
    ctx->synpred24_CPP_grammar_	= synpred24_CPP_grammar_;
    ctx->synpred25_CPP_grammar_	= synpred25_CPP_grammar_;
    ctx->synpred26_CPP_grammar_	= synpred26_CPP_grammar_;
    ctx->synpred27_CPP_grammar_	= synpred27_CPP_grammar_;
    ctx->synpred28_CPP_grammar_	= synpred28_CPP_grammar_;
    ctx->synpred29_CPP_grammar_	= synpred29_CPP_grammar_;
    ctx->synpred30_CPP_grammar_	= synpred30_CPP_grammar_;
    ctx->synpred31_CPP_grammar_	= synpred31_CPP_grammar_;
    ctx->synpred32_CPP_grammar_	= synpred32_CPP_grammar_;
    ctx->synpred33_CPP_grammar_	= synpred33_CPP_grammar_;
    ctx->synpred34_CPP_grammar_	= synpred34_CPP_grammar_;
    ctx->synpred35_CPP_grammar_	= synpred35_CPP_grammar_;
    ctx->synpred36_CPP_grammar_	= synpred36_CPP_grammar_;
    ctx->synpred37_CPP_grammar_	= synpred37_CPP_grammar_;
    ctx->synpred38_CPP_grammar_	= synpred38_CPP_grammar_;
    ctx->synpred39_CPP_grammar_	= synpred39_CPP_grammar_;
    ctx->synpred40_CPP_grammar_	= synpred40_CPP_grammar_;
    ctx->synpred41_CPP_grammar_	= synpred41_CPP_grammar_;
    ctx->synpred42_CPP_grammar_	= synpred42_CPP_grammar_;
    ctx->synpred43_CPP_grammar_	= synpred43_CPP_grammar_;
    ctx->synpred44_CPP_grammar_	= synpred44_CPP_grammar_;
    ctx->synpred45_CPP_grammar_	= synpred45_CPP_grammar_;
    ctx->synpred46_CPP_grammar_	= synpred46_CPP_grammar_;
    ctx->synpred47_CPP_grammar_	= synpred47_CPP_grammar_;
    ctx->synpred48_CPP_grammar_	= synpred48_CPP_grammar_;
    ctx->synpred49_CPP_grammar_	= synpred49_CPP_grammar_;
    ctx->synpred50_CPP_grammar_	= synpred50_CPP_grammar_;
    ctx->synpred51_CPP_grammar_	= synpred51_CPP_grammar_;
    ctx->synpred52_CPP_grammar_	= synpred52_CPP_grammar_;
    ctx->synpred53_CPP_grammar_	= synpred53_CPP_grammar_;
    ctx->synpred54_CPP_grammar_	= synpred54_CPP_grammar_;
    ctx->synpred55_CPP_grammar_	= synpred55_CPP_grammar_;
    ctx->synpred56_CPP_grammar_	= synpred56_CPP_grammar_;
    ctx->synpred57_CPP_grammar_	= synpred57_CPP_grammar_;
    ctx->synpred58_CPP_grammar_	= synpred58_CPP_grammar_;
    ctx->synpred59_CPP_grammar_	= synpred59_CPP_grammar_;
    ctx->synpred60_CPP_grammar_	= synpred60_CPP_grammar_;
    ctx->synpred61_CPP_grammar_	= synpred61_CPP_grammar_;
    ctx->synpred62_CPP_grammar_	= synpred62_CPP_grammar_;
    ctx->synpred63_CPP_grammar_	= synpred63_CPP_grammar_;
    ctx->synpred64_CPP_grammar_	= synpred64_CPP_grammar_;
    ctx->synpred65_CPP_grammar_	= synpred65_CPP_grammar_;
    ctx->synpred66_CPP_grammar_	= synpred66_CPP_grammar_;
    ctx->synpred67_CPP_grammar_	= synpred67_CPP_grammar_;
    ctx->synpred68_CPP_grammar_	= synpred68_CPP_grammar_;
    ctx->synpred69_CPP_grammar_	= synpred69_CPP_grammar_;
    ctx->synpred70_CPP_grammar_	= synpred70_CPP_grammar_;
    ctx->synpred71_CPP_grammar_	= synpred71_CPP_grammar_;
    ctx->synpred72_CPP_grammar_	= synpred72_CPP_grammar_;
    ctx->synpred73_CPP_grammar_	= synpred73_CPP_grammar_;
    ctx->synpred74_CPP_grammar_	= synpred74_CPP_grammar_;
    ctx->synpred75_CPP_grammar_	= synpred75_CPP_grammar_;
    ctx->synpred76_CPP_grammar_	= synpred76_CPP_grammar_;
    ctx->synpred77_CPP_grammar_	= synpred77_CPP_grammar_;
    ctx->synpred78_CPP_grammar_	= synpred78_CPP_grammar_;
    ctx->synpred79_CPP_grammar_	= synpred79_CPP_grammar_;
    ctx->synpred80_CPP_grammar_	= synpred80_CPP_grammar_;
    ctx->synpred81_CPP_grammar_	= synpred81_CPP_grammar_;
    ctx->synpred82_CPP_grammar_	= synpred82_CPP_grammar_;
    ctx->synpred83_CPP_grammar_	= synpred83_CPP_grammar_;
    ctx->synpred84_CPP_grammar_	= synpred84_CPP_grammar_;
    ctx->synpred85_CPP_grammar_	= synpred85_CPP_grammar_;
    ctx->synpred86_CPP_grammar_	= synpred86_CPP_grammar_;
    ctx->synpred87_CPP_grammar_	= synpred87_CPP_grammar_;
    ctx->synpred88_CPP_grammar_	= synpred88_CPP_grammar_;
    ctx->free			= CPP_grammar_ParserFree;
    ctx->reset			= CPP_grammar_ParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pCPP_grammar_Parser_external_declarationPush     = pCPP_grammar_Parser_external_declarationPush;
    ctx->pCPP_grammar_Parser_external_declarationStack    = antlr3StackNew(0);
    ctx->pCPP_grammar_Parser_external_declarationStack_limit    = 0;
    ctx->pCPP_grammar_Parser_external_declarationTop      = NULL;


    /* ruleAttributeScope(scope)
     */
    ctx->pCPP_grammar_Parser_direct_declaratorPush     = pCPP_grammar_Parser_direct_declaratorPush;
    ctx->pCPP_grammar_Parser_direct_declaratorStack    = antlr3StackNew(0);
    ctx->pCPP_grammar_Parser_direct_declaratorStack_limit    = 0;
    ctx->pCPP_grammar_Parser_direct_declaratorTop      = NULL;


    /* ruleAttributeScope(scope)
     */
    ctx->pCPP_grammar_Parser_statementPush     = pCPP_grammar_Parser_statementPush;
    ctx->pCPP_grammar_Parser_statementStack    = antlr3StackNew(0);
    ctx->pCPP_grammar_Parser_statementStack_limit    = 0;
    ctx->pCPP_grammar_Parser_statementTop      = NULL;


    /* ruleAttributeScope(scope)
     */
    ctx->pCPP_grammar_Parser_ptr_operatorPush     = pCPP_grammar_Parser_ptr_operatorPush;
    ctx->pCPP_grammar_Parser_ptr_operatorStack    = antlr3StackNew(0);
    ctx->pCPP_grammar_Parser_ptr_operatorStack_limit    = 0;
    ctx->pCPP_grammar_Parser_ptr_operatorTop      = NULL;




    /* Install the token table
     */
    PSRSTATE->tokenNames   = CPP_grammar_ParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
CPP_grammar_ParserReset (pCPP_grammar_Parser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 CPP_grammar_ParserFree(pCPP_grammar_Parser ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pCPP_grammar_Parser_external_declarationStack->free(ctx->pCPP_grammar_Parser_external_declarationStack);


    /* ruleAttributeScope(scope)
     */
    ctx->pCPP_grammar_Parser_direct_declaratorStack->free(ctx->pCPP_grammar_Parser_direct_declaratorStack);


    /* ruleAttributeScope(scope)
     */
    ctx->pCPP_grammar_Parser_statementStack->free(ctx->pCPP_grammar_Parser_statementStack);


    /* ruleAttributeScope(scope)
     */
    ctx->pCPP_grammar_Parser_ptr_operatorStack->free(ctx->pCPP_grammar_Parser_ptr_operatorStack);



	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return CPP_grammar_ParserTokenNames;
}


    	extern "C++"
    	{
    	#include "members_file.h"
    	}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_external_declaration_in_translation_unit107  */
static	ANTLR3_BITWORD FOLLOW_external_declaration_in_translation_unit107_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C0), ANTLR3_UINT64_LIT(0x00007FA15645F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_external_declaration_in_translation_unit107	= { FOLLOW_external_declaration_in_translation_unit107_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_translation_unit112  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_translation_unit112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_translation_unit112	= { FOLLOW_EOF_in_translation_unit112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_external_declaration169  */
static	ANTLR3_BITWORD FOLLOW_160_in_external_declaration169_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_external_declaration169	= { FOLLOW_160_in_external_declaration169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_external_declaration171  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_external_declaration171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_external_declaration171	= { FOLLOW_LESSTHAN_in_external_declaration171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_external_declaration173  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_external_declaration173_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C0), ANTLR3_UINT64_LIT(0x00007FA15645F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_external_declaration173	= { FOLLOW_GREATERTHAN_in_external_declaration173_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_external_declaration_in_external_declaration175  */
static	ANTLR3_BITWORD FOLLOW_external_declaration_in_external_declaration175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_external_declaration_in_external_declaration175	= { FOLLOW_external_declaration_in_external_declaration175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_external_declaration213  */
static	ANTLR3_BITWORD FOLLOW_165_in_external_declaration213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_external_declaration213	= { FOLLOW_165_in_external_declaration213_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enum_specifier_in_external_declaration215  */
static	ANTLR3_BITWORD FOLLOW_enum_specifier_in_external_declaration215_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_enum_specifier_in_external_declaration215	= { FOLLOW_enum_specifier_in_external_declaration215_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_external_declaration220  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_external_declaration220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_external_declaration220	= { FOLLOW_init_declarator_list_in_external_declaration220_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_external_declaration224  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_external_declaration224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_external_declaration224	= { FOLLOW_SEMICOLON_in_external_declaration224_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_external_declaration254  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_external_declaration254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_external_declaration254	= { FOLLOW_declaration_in_external_declaration254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_external_declaration283  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_external_declaration283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_external_declaration283	= { FOLLOW_declaration_in_external_declaration283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_external_declaration307  */
static	ANTLR3_BITWORD FOLLOW_165_in_external_declaration307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x0000010040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_external_declaration307	= { FOLLOW_165_in_external_declaration307_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_decl_or_def_in_external_declaration309  */
static	ANTLR3_BITWORD FOLLOW_class_decl_or_def_in_external_declaration309_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_class_decl_or_def_in_external_declaration309	= { FOLLOW_class_decl_or_def_in_external_declaration309_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_external_declaration315  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_external_declaration315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_external_declaration315	= { FOLLOW_init_declarator_list_in_external_declaration315_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_external_declaration319  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_external_declaration319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_external_declaration319	= { FOLLOW_SEMICOLON_in_external_declaration319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_head_in_external_declaration361  */
static	ANTLR3_BITWORD FOLLOW_template_head_in_external_declaration361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_template_head_in_external_declaration361	= { FOLLOW_template_head_in_external_declaration361_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_external_declaration368  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_external_declaration368_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_external_declaration368	= { FOLLOW_function_specifier_in_external_declaration368_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_decl_or_def_in_external_declaration372  */
static	ANTLR3_BITWORD FOLLOW_class_decl_or_def_in_external_declaration372_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_class_decl_or_def_in_external_declaration372	= { FOLLOW_class_decl_or_def_in_external_declaration372_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_external_declaration376  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_external_declaration376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_external_declaration376	= { FOLLOW_init_declarator_list_in_external_declaration376_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_external_declaration380  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_external_declaration380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_external_declaration380	= { FOLLOW_SEMICOLON_in_external_declaration380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_head_in_external_declaration397  */
static	ANTLR3_BITWORD FOLLOW_template_head_in_external_declaration397_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009040), ANTLR3_UINT64_LIT(0x00007FA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_template_head_in_external_declaration397	= { FOLLOW_template_head_in_external_declaration397_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_external_declaration434  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_external_declaration434_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_external_declaration434	= { FOLLOW_declaration_specifiers_in_external_declaration434_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_external_declaration437  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_external_declaration437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_external_declaration437	= { FOLLOW_init_declarator_list_in_external_declaration437_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_external_declaration441  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_external_declaration441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_external_declaration441	= { FOLLOW_SEMICOLON_in_external_declaration441_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_external_declaration477  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_external_declaration477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_external_declaration477	= { FOLLOW_declaration_in_external_declaration477_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_definition_in_external_declaration511  */
static	ANTLR3_BITWORD FOLLOW_function_definition_in_external_declaration511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_definition_in_external_declaration511	= { FOLLOW_function_definition_in_external_declaration511_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_definition_in_external_declaration579  */
static	ANTLR3_BITWORD FOLLOW_ctor_definition_in_external_declaration579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_definition_in_external_declaration579	= { FOLLOW_ctor_definition_in_external_declaration579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enum_specifier_in_external_declaration617  */
static	ANTLR3_BITWORD FOLLOW_enum_specifier_in_external_declaration617_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_enum_specifier_in_external_declaration617	= { FOLLOW_enum_specifier_in_external_declaration617_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_external_declaration620  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_external_declaration620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_external_declaration620	= { FOLLOW_init_declarator_list_in_external_declaration620_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_external_declaration624  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_external_declaration624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_external_declaration624	= { FOLLOW_SEMICOLON_in_external_declaration624_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_head_in_external_declaration656  */
static	ANTLR3_BITWORD FOLLOW_template_head_in_external_declaration656_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000010008008040), ANTLR3_UINT64_LIT(0x0000080000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_head_in_external_declaration656	= { FOLLOW_template_head_in_external_declaration656_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_head_in_external_declaration660  */
static	ANTLR3_BITWORD FOLLOW_dtor_head_in_external_declaration660_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_head_in_external_declaration660	= { FOLLOW_dtor_head_in_external_declaration660_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_body_in_external_declaration663  */
static	ANTLR3_BITWORD FOLLOW_dtor_body_in_external_declaration663_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_body_in_external_declaration663	= { FOLLOW_dtor_body_in_external_declaration663_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_definition_in_external_declaration712  */
static	ANTLR3_BITWORD FOLLOW_ctor_definition_in_external_declaration712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_definition_in_external_declaration712	= { FOLLOW_ctor_definition_in_external_declaration712_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_external_declaration745  */
static	ANTLR3_BITWORD FOLLOW_140_in_external_declaration745_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_external_declaration745	= { FOLLOW_140_in_external_declaration745_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_external_declaration753  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_external_declaration753_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_external_declaration753	= { FOLLOW_scope_override_in_external_declaration753_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conversion_function_decl_or_def_in_external_declaration756  */
static	ANTLR3_BITWORD FOLLOW_conversion_function_decl_or_def_in_external_declaration756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conversion_function_decl_or_def_in_external_declaration756	= { FOLLOW_conversion_function_decl_or_def_in_external_declaration756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_external_declaration787  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_external_declaration787_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_external_declaration787	= { FOLLOW_declaration_specifiers_in_external_declaration787_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_external_declaration789  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_external_declaration789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_external_declaration789	= { FOLLOW_function_declarator_in_external_declaration789_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_external_declaration792  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_external_declaration792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_external_declaration792	= { FOLLOW_SEMICOLON_in_external_declaration792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_definition_in_external_declaration821  */
static	ANTLR3_BITWORD FOLLOW_function_definition_in_external_declaration821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_definition_in_external_declaration821	= { FOLLOW_function_definition_in_external_declaration821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_definition_in_external_declaration846  */
static	ANTLR3_BITWORD FOLLOW_function_definition_in_external_declaration846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_definition_in_external_declaration846	= { FOLLOW_function_definition_in_external_declaration846_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_definition_in_external_declaration872  */
static	ANTLR3_BITWORD FOLLOW_function_definition_in_external_declaration872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_definition_in_external_declaration872	= { FOLLOW_function_definition_in_external_declaration872_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_definition_in_external_declaration896  */
static	ANTLR3_BITWORD FOLLOW_function_definition_in_external_declaration896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_definition_in_external_declaration896	= { FOLLOW_function_definition_in_external_declaration896_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_external_declaration932  */
static	ANTLR3_BITWORD FOLLOW_133_in_external_declaration932_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_external_declaration932	= { FOLLOW_133_in_external_declaration932_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_external_declaration941  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_external_declaration941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_external_declaration941	= { FOLLOW_function_specifier_in_external_declaration941_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_decl_or_def_in_external_declaration945  */
static	ANTLR3_BITWORD FOLLOW_class_decl_or_def_in_external_declaration945_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_class_decl_or_def_in_external_declaration945	= { FOLLOW_class_decl_or_def_in_external_declaration945_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_external_declaration949  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_external_declaration949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_external_declaration949	= { FOLLOW_init_declarator_list_in_external_declaration949_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_external_declaration953  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_external_declaration953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_external_declaration953	= { FOLLOW_SEMICOLON_in_external_declaration953_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_external_declaration1032  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_external_declaration1032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_external_declaration1032	= { FOLLOW_declaration_in_external_declaration1032_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_external_declaration1049  */
static	ANTLR3_BITWORD FOLLOW_144_in_external_declaration1049_bits[]	= { ANTLR3_UINT64_LIT(0x0000018000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_external_declaration1049	= { FOLLOW_144_in_external_declaration1049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_namespace_definition_in_external_declaration1051  */
static	ANTLR3_BITWORD FOLLOW_namespace_definition_in_external_declaration1051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_namespace_definition_in_external_declaration1051	= { FOLLOW_namespace_definition_in_external_declaration1051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_external_declaration1066  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_external_declaration1066_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_external_declaration1066	= { FOLLOW_SEMICOLON_in_external_declaration1066_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_external_declaration1083  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_external_declaration1083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_external_declaration1083	= { FOLLOW_declaration_in_external_declaration1083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_114_in_external_declaration1098  */
static	ANTLR3_BITWORD FOLLOW_114_in_external_declaration1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_114_in_external_declaration1098	= { FOLLOW_114_in_external_declaration1098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_113_in_external_declaration1110  */
static	ANTLR3_BITWORD FOLLOW_113_in_external_declaration1110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_113_in_external_declaration1110	= { FOLLOW_113_in_external_declaration1110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_member_declaration1165  */
static	ANTLR3_BITWORD FOLLOW_160_in_member_declaration1165_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_member_declaration1165	= { FOLLOW_160_in_member_declaration1165_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_member_declaration1167  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_member_declaration1167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_member_declaration1167	= { FOLLOW_LESSTHAN_in_member_declaration1167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_member_declaration1169  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_member_declaration1169_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C0), ANTLR3_UINT64_LIT(0x00007FA1567CF2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_member_declaration1169	= { FOLLOW_GREATERTHAN_in_member_declaration1169_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_declaration_in_member_declaration1171  */
static	ANTLR3_BITWORD FOLLOW_member_declaration_in_member_declaration1171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_member_declaration_in_member_declaration1171	= { FOLLOW_member_declaration_in_member_declaration1171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_member_declaration1215  */
static	ANTLR3_BITWORD FOLLOW_165_in_member_declaration1215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_member_declaration1215	= { FOLLOW_165_in_member_declaration1215_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enum_specifier_in_member_declaration1217  */
static	ANTLR3_BITWORD FOLLOW_enum_specifier_in_member_declaration1217_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_enum_specifier_in_member_declaration1217	= { FOLLOW_enum_specifier_in_member_declaration1217_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_member_declaration1222  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_member_declaration1222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_member_declaration1222	= { FOLLOW_init_declarator_list_in_member_declaration1222_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1226  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1226	= { FOLLOW_SEMICOLON_in_member_declaration1226_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_member_declaration1256  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_member_declaration1256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_member_declaration1256	= { FOLLOW_declaration_in_member_declaration1256_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_member_declaration1289  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_member_declaration1289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_member_declaration1289	= { FOLLOW_declaration_in_member_declaration1289_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_member_declaration1317  */
static	ANTLR3_BITWORD FOLLOW_165_in_member_declaration1317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x0000010040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_member_declaration1317	= { FOLLOW_165_in_member_declaration1317_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_decl_or_def_in_member_declaration1319  */
static	ANTLR3_BITWORD FOLLOW_class_decl_or_def_in_member_declaration1319_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_class_decl_or_def_in_member_declaration1319	= { FOLLOW_class_decl_or_def_in_member_declaration1319_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_member_declaration1325  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_member_declaration1325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_member_declaration1325	= { FOLLOW_init_declarator_list_in_member_declaration1325_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1329  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1329	= { FOLLOW_SEMICOLON_in_member_declaration1329_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_head_in_member_declaration1374  */
static	ANTLR3_BITWORD FOLLOW_template_head_in_member_declaration1374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_template_head_in_member_declaration1374	= { FOLLOW_template_head_in_member_declaration1374_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_member_declaration1381  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_member_declaration1381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_member_declaration1381	= { FOLLOW_function_specifier_in_member_declaration1381_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_decl_or_def_in_member_declaration1385  */
static	ANTLR3_BITWORD FOLLOW_class_decl_or_def_in_member_declaration1385_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_class_decl_or_def_in_member_declaration1385	= { FOLLOW_class_decl_or_def_in_member_declaration1385_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_member_declaration1389  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_member_declaration1389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_member_declaration1389	= { FOLLOW_init_declarator_list_in_member_declaration1389_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1393  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1393	= { FOLLOW_SEMICOLON_in_member_declaration1393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_head_in_member_declaration1412  */
static	ANTLR3_BITWORD FOLLOW_template_head_in_member_declaration1412_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009040), ANTLR3_UINT64_LIT(0x00007FA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_template_head_in_member_declaration1412	= { FOLLOW_template_head_in_member_declaration1412_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_member_declaration1447  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_member_declaration1447_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_member_declaration1447	= { FOLLOW_declaration_specifiers_in_member_declaration1447_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_member_declaration1450  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_member_declaration1450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_member_declaration1450	= { FOLLOW_init_declarator_list_in_member_declaration1450_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1454  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1454	= { FOLLOW_SEMICOLON_in_member_declaration1454_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_member_declaration1487  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_member_declaration1487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_member_declaration1487	= { FOLLOW_declaration_in_member_declaration1487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_definition_in_member_declaration1521  */
static	ANTLR3_BITWORD FOLLOW_function_definition_in_member_declaration1521_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_definition_in_member_declaration1521	= { FOLLOW_function_definition_in_member_declaration1521_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_decl_spec_in_member_declaration1568  */
static	ANTLR3_BITWORD FOLLOW_ctor_decl_spec_in_member_declaration1568_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_decl_spec_in_member_declaration1568	= { FOLLOW_ctor_decl_spec_in_member_declaration1568_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_declarator_in_member_declaration1570  */
static	ANTLR3_BITWORD FOLLOW_ctor_declarator_in_member_declaration1570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_declarator_in_member_declaration1570	= { FOLLOW_ctor_declarator_in_member_declaration1570_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1573  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1573	= { FOLLOW_SEMICOLON_in_member_declaration1573_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_definition_in_member_declaration1616  */
static	ANTLR3_BITWORD FOLLOW_ctor_definition_in_member_declaration1616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_definition_in_member_declaration1616	= { FOLLOW_ctor_definition_in_member_declaration1616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conversion_function_decl_or_def_in_member_declaration1634  */
static	ANTLR3_BITWORD FOLLOW_conversion_function_decl_or_def_in_member_declaration1634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conversion_function_decl_or_def_in_member_declaration1634	= { FOLLOW_conversion_function_decl_or_def_in_member_declaration1634_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_head_in_member_declaration1652  */
static	ANTLR3_BITWORD FOLLOW_class_head_in_member_declaration1652_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_class_head_in_member_declaration1652	= { FOLLOW_class_head_in_member_declaration1652_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_member_declaration1654  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_member_declaration1654_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_member_declaration1654	= { FOLLOW_declaration_specifiers_in_member_declaration1654_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_member_declaration1657  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_member_declaration1657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_member_declaration1657	= { FOLLOW_init_declarator_list_in_member_declaration1657_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1661  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1661_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1661	= { FOLLOW_SEMICOLON_in_member_declaration1661_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enum_specifier_in_member_declaration1699  */
static	ANTLR3_BITWORD FOLLOW_enum_specifier_in_member_declaration1699_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_enum_specifier_in_member_declaration1699	= { FOLLOW_enum_specifier_in_member_declaration1699_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_member_declaration1702  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_member_declaration1702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_member_declaration1702	= { FOLLOW_init_declarator_list_in_member_declaration1702_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1706  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1706	= { FOLLOW_SEMICOLON_in_member_declaration1706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_decl_spec_in_member_declaration1747  */
static	ANTLR3_BITWORD FOLLOW_ctor_decl_spec_in_member_declaration1747_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_decl_spec_in_member_declaration1747	= { FOLLOW_ctor_decl_spec_in_member_declaration1747_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_declarator_in_member_declaration1749  */
static	ANTLR3_BITWORD FOLLOW_ctor_declarator_in_member_declaration1749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_declarator_in_member_declaration1749	= { FOLLOW_ctor_declarator_in_member_declaration1749_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1752  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1752	= { FOLLOW_SEMICOLON_in_member_declaration1752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_definition_in_member_declaration1836  */
static	ANTLR3_BITWORD FOLLOW_ctor_definition_in_member_declaration1836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_definition_in_member_declaration1836	= { FOLLOW_ctor_definition_in_member_declaration1836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_head_in_member_declaration1869  */
static	ANTLR3_BITWORD FOLLOW_dtor_head_in_member_declaration1869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_head_in_member_declaration1869	= { FOLLOW_dtor_head_in_member_declaration1869_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1872  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1872	= { FOLLOW_SEMICOLON_in_member_declaration1872_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_head_in_member_declaration1904  */
static	ANTLR3_BITWORD FOLLOW_dtor_head_in_member_declaration1904_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_head_in_member_declaration1904	= { FOLLOW_dtor_head_in_member_declaration1904_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_body_in_member_declaration1907  */
static	ANTLR3_BITWORD FOLLOW_dtor_body_in_member_declaration1907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_body_in_member_declaration1907	= { FOLLOW_dtor_body_in_member_declaration1907_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_member_declaration1934  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_member_declaration1934_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_member_declaration1934	= { FOLLOW_declaration_specifiers_in_member_declaration1934_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_member_declaration1936  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_member_declaration1936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_member_declaration1936	= { FOLLOW_function_declarator_in_member_declaration1936_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration1939  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration1939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration1939	= { FOLLOW_SEMICOLON_in_member_declaration1939_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_definition_in_member_declaration1971  */
static	ANTLR3_BITWORD FOLLOW_function_definition_in_member_declaration1971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_definition_in_member_declaration1971	= { FOLLOW_function_definition_in_member_declaration1971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_member_declaration2009  */
static	ANTLR3_BITWORD FOLLOW_137_in_member_declaration2009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_member_declaration2009	= { FOLLOW_137_in_member_declaration2009_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_member_declaration2018  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_member_declaration2018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_member_declaration2018	= { FOLLOW_function_specifier_in_member_declaration2018_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_decl_or_def_in_member_declaration2022  */
static	ANTLR3_BITWORD FOLLOW_class_decl_or_def_in_member_declaration2022_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_class_decl_or_def_in_member_declaration2022	= { FOLLOW_class_decl_or_def_in_member_declaration2022_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_member_declaration2026  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_member_declaration2026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_member_declaration2026	= { FOLLOW_init_declarator_list_in_member_declaration2026_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration2030  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration2030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration2030	= { FOLLOW_SEMICOLON_in_member_declaration2030_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_member_declaration2058  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_member_declaration2058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_member_declaration2058	= { FOLLOW_declaration_in_member_declaration2058_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_member_declaration2097  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_member_declaration2097_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E1AF0D009040), ANTLR3_UINT64_LIT(0x0000080000041010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_member_declaration2097	= { FOLLOW_function_specifier_in_member_declaration2097_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_member_declaration2101  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_member_declaration2101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_member_declaration2101	= { FOLLOW_function_declarator_in_member_declaration2101_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration2104  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration2104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration2104	= { FOLLOW_SEMICOLON_in_member_declaration2104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_member_declaration2144  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_member_declaration2144_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E1AF0D009040), ANTLR3_UINT64_LIT(0x0000080000041010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_member_declaration2144	= { FOLLOW_function_specifier_in_member_declaration2144_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_member_declaration2148  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_member_declaration2148_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_member_declaration2148	= { FOLLOW_function_declarator_in_member_declaration2148_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_statement_in_member_declaration2151  */
static	ANTLR3_BITWORD FOLLOW_compound_statement_in_member_declaration2151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_statement_in_member_declaration2151	= { FOLLOW_compound_statement_in_member_declaration2151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_member_declaration2180  */
static	ANTLR3_BITWORD FOLLOW_140_in_member_declaration2180_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_member_declaration2180	= { FOLLOW_140_in_member_declaration2180_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conversion_function_decl_or_def_in_member_declaration2184  */
static	ANTLR3_BITWORD FOLLOW_conversion_function_decl_or_def_in_member_declaration2184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conversion_function_decl_or_def_in_member_declaration2184	= { FOLLOW_conversion_function_decl_or_def_in_member_declaration2184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_member_declaration2220  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_member_declaration2220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_member_declaration2220	= { FOLLOW_qualified_id_in_member_declaration2220_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration2223  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration2223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration2223	= { FOLLOW_SEMICOLON_in_member_declaration2223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_access_specifier_in_member_declaration2241  */
static	ANTLR3_BITWORD FOLLOW_access_specifier_in_member_declaration2241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_access_specifier_in_member_declaration2241	= { FOLLOW_access_specifier_in_member_declaration2241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_member_declaration2243  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_member_declaration2243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_member_declaration2243	= { FOLLOW_COLON_in_member_declaration2243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_member_declaration2257  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_member_declaration2257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_member_declaration2257	= { FOLLOW_SEMICOLON_in_member_declaration2257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_114_in_member_declaration2273  */
static	ANTLR3_BITWORD FOLLOW_114_in_member_declaration2273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_114_in_member_declaration2273	= { FOLLOW_114_in_member_declaration2273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_113_in_member_declaration2285  */
static	ANTLR3_BITWORD FOLLOW_113_in_member_declaration2285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_113_in_member_declaration2285	= { FOLLOW_113_in_member_declaration2285_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_namespace_definition2311  */
static	ANTLR3_BITWORD FOLLOW_ID_in_namespace_definition2311_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_namespace_definition2311	= { FOLLOW_ID_in_namespace_definition2311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_namespace_definition2318  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_namespace_definition2318_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C8), ANTLR3_UINT64_LIT(0x00007FA15645F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_namespace_definition2318	= { FOLLOW_LCURLY_in_namespace_definition2318_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_external_declaration_in_namespace_definition2328  */
static	ANTLR3_BITWORD FOLLOW_external_declaration_in_namespace_definition2328_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C8), ANTLR3_UINT64_LIT(0x00007FA15645F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_external_declaration_in_namespace_definition2328	= { FOLLOW_external_declaration_in_namespace_definition2328_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RCURLY_in_namespace_definition2338  */
static	ANTLR3_BITWORD FOLLOW_RCURLY_in_namespace_definition2338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RCURLY_in_namespace_definition2338	= { FOLLOW_RCURLY_in_namespace_definition2338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_namespace_alias_definition2358  */
static	ANTLR3_BITWORD FOLLOW_144_in_namespace_alias_definition2358_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_namespace_alias_definition2358	= { FOLLOW_144_in_namespace_alias_definition2358_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_namespace_alias_definition2364  */
static	ANTLR3_BITWORD FOLLOW_ID_in_namespace_alias_definition2364_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_namespace_alias_definition2364	= { FOLLOW_ID_in_namespace_alias_definition2364_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_namespace_alias_definition2370  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_namespace_alias_definition2370_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_namespace_alias_definition2370	= { FOLLOW_ASSIGNEQUAL_in_namespace_alias_definition2370_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_namespace_alias_definition2376  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_namespace_alias_definition2376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_namespace_alias_definition2376	= { FOLLOW_qualified_id_in_namespace_alias_definition2376_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_namespace_alias_definition2379  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_namespace_alias_definition2379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_namespace_alias_definition2379	= { FOLLOW_SEMICOLON_in_namespace_alias_definition2379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_function_definition2414  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_function_definition2414_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_function_definition2414	= { FOLLOW_declaration_specifiers_in_function_definition2414_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_function_definition2416  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_function_definition2416_bits[]	= { ANTLR3_UINT64_LIT(0x0000018000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007FA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_function_definition2416	= { FOLLOW_function_declarator_in_function_definition2416_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_function_definition2439  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_function_definition2439_bits[]	= { ANTLR3_UINT64_LIT(0x0000018000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007FA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_function_definition2439	= { FOLLOW_declaration_in_function_definition2439_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_statement_in_function_definition2456  */
static	ANTLR3_BITWORD FOLLOW_compound_statement_in_function_definition2456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_statement_in_function_definition2456	= { FOLLOW_compound_statement_in_function_definition2456_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_function_definition2464  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_function_definition2464_bits[]	= { ANTLR3_UINT64_LIT(0x0000018000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007FA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_function_definition2464	= { FOLLOW_function_declarator_in_function_definition2464_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_function_definition2486  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_function_definition2486_bits[]	= { ANTLR3_UINT64_LIT(0x0000018000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007FA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_function_definition2486	= { FOLLOW_declaration_in_function_definition2486_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_statement_in_function_definition2503  */
static	ANTLR3_BITWORD FOLLOW_compound_statement_in_function_definition2503_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_statement_in_function_definition2503	= { FOLLOW_compound_statement_in_function_definition2503_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_linkage_specification_in_declaration2533  */
static	ANTLR3_BITWORD FOLLOW_linkage_specification_in_declaration2533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_linkage_specification_in_declaration2533	= { FOLLOW_linkage_specification_in_declaration2533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simple_declaration_in_declaration2541  */
static	ANTLR3_BITWORD FOLLOW_simple_declaration_in_declaration2541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_simple_declaration_in_declaration2541	= { FOLLOW_simple_declaration_in_declaration2541_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_using_statement_in_declaration2549  */
static	ANTLR3_BITWORD FOLLOW_using_statement_in_declaration2549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_using_statement_in_declaration2549	= { FOLLOW_using_statement_in_declaration2549_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_linkage_specification2565  */
static	ANTLR3_BITWORD FOLLOW_133_in_linkage_specification2565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_linkage_specification2565	= { FOLLOW_133_in_linkage_specification2565_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_linkage_specification2569  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_linkage_specification2569_bits[]	= { ANTLR3_UINT64_LIT(0x0000018000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007FA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_linkage_specification2569	= { FOLLOW_StringLiteral_in_linkage_specification2569_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_linkage_specification2574  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_linkage_specification2574_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C8), ANTLR3_UINT64_LIT(0x00007FA15645F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_linkage_specification2574	= { FOLLOW_LCURLY_in_linkage_specification2574_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_external_declaration_in_linkage_specification2577  */
static	ANTLR3_BITWORD FOLLOW_external_declaration_in_linkage_specification2577_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C8), ANTLR3_UINT64_LIT(0x00007FA15645F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_external_declaration_in_linkage_specification2577	= { FOLLOW_external_declaration_in_linkage_specification2577_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RCURLY_in_linkage_specification2581  */
static	ANTLR3_BITWORD FOLLOW_RCURLY_in_linkage_specification2581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RCURLY_in_linkage_specification2581	= { FOLLOW_RCURLY_in_linkage_specification2581_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_linkage_specification2586  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_linkage_specification2586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_linkage_specification2586	= { FOLLOW_declaration_in_linkage_specification2586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_class_head2605  */
static	ANTLR3_BITWORD FOLLOW_set_in_class_head2605_bits[]	= { ANTLR3_UINT64_LIT(0x0000018000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_class_head2605	= { FOLLOW_set_in_class_head2605_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_class_head2627  */
static	ANTLR3_BITWORD FOLLOW_ID_in_class_head2627_bits[]	= { ANTLR3_UINT64_LIT(0x0000030000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_class_head2627	= { FOLLOW_ID_in_class_head2627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_class_head2634  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_class_head2634_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_class_head2634	= { FOLLOW_LESSTHAN_in_class_head2634_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_argument_list_in_class_head2636  */
static	ANTLR3_BITWORD FOLLOW_template_argument_list_in_class_head2636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_argument_list_in_class_head2636	= { FOLLOW_template_argument_list_in_class_head2636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_class_head2638  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_class_head2638_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_class_head2638	= { FOLLOW_GREATERTHAN_in_class_head2638_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_base_clause_in_class_head2646  */
static	ANTLR3_BITWORD FOLLOW_base_clause_in_class_head2646_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_base_clause_in_class_head2646	= { FOLLOW_base_clause_in_class_head2646_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_class_head2659  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_class_head2659_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_class_head2659	= { FOLLOW_LCURLY_in_class_head2659_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_declaration_specifiers2697  */
static	ANTLR3_BITWORD FOLLOW_165_in_declaration_specifiers2697_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_declaration_specifiers2697	= { FOLLOW_165_in_declaration_specifiers2697_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_declaration_specifiers2708  */
static	ANTLR3_BITWORD FOLLOW_137_in_declaration_specifiers2708_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_declaration_specifiers2708	= { FOLLOW_137_in_declaration_specifiers2708_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_storage_class_specifier_in_declaration_specifiers2720  */
static	ANTLR3_BITWORD FOLLOW_storage_class_specifier_in_declaration_specifiers2720_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_storage_class_specifier_in_declaration_specifiers2720	= { FOLLOW_storage_class_specifier_in_declaration_specifiers2720_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_qualifier_in_declaration_specifiers2733  */
static	ANTLR3_BITWORD FOLLOW_type_qualifier_in_declaration_specifiers2733_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_type_qualifier_in_declaration_specifiers2733	= { FOLLOW_type_qualifier_in_declaration_specifiers2733_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_declaration_specifiers2755  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_declaration_specifiers2755_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_declaration_specifiers2755	= { FOLLOW_function_specifier_in_declaration_specifiers2755_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_declaration_specifiers2769  */
static	ANTLR3_BITWORD FOLLOW_set_in_declaration_specifiers2769_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_declaration_specifiers2769	= { FOLLOW_set_in_declaration_specifiers2769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_declaration_specifiers2775  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_declaration_specifiers2775_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_declaration_specifiers2775	= { FOLLOW_LPAREN_in_declaration_specifiers2775_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_declaration_specifiers2777  */
static	ANTLR3_BITWORD FOLLOW_ID_in_declaration_specifiers2777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_declaration_specifiers2777	= { FOLLOW_ID_in_declaration_specifiers2777_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_declaration_specifiers2779  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_declaration_specifiers2779_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_declaration_specifiers2779	= { FOLLOW_RPAREN_in_declaration_specifiers2779_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_specifier_in_declaration_specifiers2794  */
static	ANTLR3_BITWORD FOLLOW_type_specifier_in_declaration_specifiers2794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_specifier_in_declaration_specifiers2794	= { FOLLOW_type_specifier_in_declaration_specifiers2794_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_qualifier_in_declaration_specifiers2808  */
static	ANTLR3_BITWORD FOLLOW_type_qualifier_in_declaration_specifiers2808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_qualifier_in_declaration_specifiers2808	= { FOLLOW_type_qualifier_in_declaration_specifiers2808_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_115_in_storage_class_specifier2845  */
static	ANTLR3_BITWORD FOLLOW_115_in_storage_class_specifier2845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_115_in_storage_class_specifier2845	= { FOLLOW_115_in_storage_class_specifier2845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_storage_class_specifier2853  */
static	ANTLR3_BITWORD FOLLOW_150_in_storage_class_specifier2853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_storage_class_specifier2853	= { FOLLOW_150_in_storage_class_specifier2853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_storage_class_specifier2860  */
static	ANTLR3_BITWORD FOLLOW_156_in_storage_class_specifier2860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_storage_class_specifier2860	= { FOLLOW_156_in_storage_class_specifier2860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_storage_class_specifier2867  */
static	ANTLR3_BITWORD FOLLOW_133_in_storage_class_specifier2867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_storage_class_specifier2867	= { FOLLOW_133_in_storage_class_specifier2867_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_storage_class_specifier2874  */
static	ANTLR3_BITWORD FOLLOW_143_in_storage_class_specifier2874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_storage_class_specifier2874	= { FOLLOW_143_in_storage_class_specifier2874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_function_specifier2899  */
static	ANTLR3_BITWORD FOLLOW_set_in_function_specifier2899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_function_specifier2899	= { FOLLOW_set_in_function_specifier2899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_function_specifier2912  */
static	ANTLR3_BITWORD FOLLOW_171_in_function_specifier2912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_function_specifier2912	= { FOLLOW_171_in_function_specifier2912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_function_specifier2924  */
static	ANTLR3_BITWORD FOLLOW_132_in_function_specifier2924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_function_specifier2924	= { FOLLOW_132_in_function_specifier2924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simple_type_specifier_in_type_specifier2960  */
static	ANTLR3_BITWORD FOLLOW_simple_type_specifier_in_type_specifier2960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_simple_type_specifier_in_type_specifier2960	= { FOLLOW_simple_type_specifier_in_type_specifier2960_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_type_in_simple_type_specifier3017  */
static	ANTLR3_BITWORD FOLLOW_qualified_type_in_simple_type_specifier3017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_type_in_simple_type_specifier3017	= { FOLLOW_qualified_type_in_simple_type_specifier3017_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_simple_type_specifier3031  */
static	ANTLR3_BITWORD FOLLOW_167_in_simple_type_specifier3031_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_simple_type_specifier3031	= { FOLLOW_167_in_simple_type_specifier3031_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_simple_type_specifier3033  */
static	ANTLR3_BITWORD FOLLOW_131_in_simple_type_specifier3033_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_simple_type_specifier3033	= { FOLLOW_131_in_simple_type_specifier3033_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_specifier_in_simple_type_specifier3040  */
static	ANTLR3_BITWORD FOLLOW_class_specifier_in_simple_type_specifier3040_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_class_specifier_in_simple_type_specifier3040	= { FOLLOW_class_specifier_in_simple_type_specifier3040_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_type_in_simple_type_specifier3054  */
static	ANTLR3_BITWORD FOLLOW_qualified_type_in_simple_type_specifier3054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_type_in_simple_type_specifier3054	= { FOLLOW_qualified_type_in_simple_type_specifier3054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_120_in_simple_type_specifier3073  */
static	ANTLR3_BITWORD FOLLOW_120_in_simple_type_specifier3073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_120_in_simple_type_specifier3073	= { FOLLOW_120_in_simple_type_specifier3073_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_simple_type_specifier3083  */
static	ANTLR3_BITWORD FOLLOW_174_in_simple_type_specifier3083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_simple_type_specifier3083	= { FOLLOW_174_in_simple_type_specifier3083_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_116_in_simple_type_specifier3092  */
static	ANTLR3_BITWORD FOLLOW_116_in_simple_type_specifier3092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_116_in_simple_type_specifier3092	= { FOLLOW_116_in_simple_type_specifier3092_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_simple_type_specifier3102  */
static	ANTLR3_BITWORD FOLLOW_153_in_simple_type_specifier3102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_simple_type_specifier3102	= { FOLLOW_153_in_simple_type_specifier3102_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_simple_type_specifier3112  */
static	ANTLR3_BITWORD FOLLOW_141_in_simple_type_specifier3112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_simple_type_specifier3112	= { FOLLOW_141_in_simple_type_specifier3112_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_simple_type_specifier3122  */
static	ANTLR3_BITWORD FOLLOW_set_in_simple_type_specifier3122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_simple_type_specifier3122	= { FOLLOW_set_in_simple_type_specifier3122_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_simple_type_specifier3136  */
static	ANTLR3_BITWORD FOLLOW_set_in_simple_type_specifier3136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_simple_type_specifier3136	= { FOLLOW_set_in_simple_type_specifier3136_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_simple_type_specifier3149  */
static	ANTLR3_BITWORD FOLLOW_set_in_simple_type_specifier3149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_simple_type_specifier3149	= { FOLLOW_set_in_simple_type_specifier3149_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_simple_type_specifier3162  */
static	ANTLR3_BITWORD FOLLOW_set_in_simple_type_specifier3162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_simple_type_specifier3162	= { FOLLOW_set_in_simple_type_specifier3162_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_simple_type_specifier3175  */
static	ANTLR3_BITWORD FOLLOW_set_in_simple_type_specifier3175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_simple_type_specifier3175	= { FOLLOW_set_in_simple_type_specifier3175_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_simple_type_specifier3189  */
static	ANTLR3_BITWORD FOLLOW_142_in_simple_type_specifier3189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_simple_type_specifier3189	= { FOLLOW_142_in_simple_type_specifier3189_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_simple_type_specifier3199  */
static	ANTLR3_BITWORD FOLLOW_154_in_simple_type_specifier3199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_simple_type_specifier3199	= { FOLLOW_154_in_simple_type_specifier3199_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_simple_type_specifier3208  */
static	ANTLR3_BITWORD FOLLOW_169_in_simple_type_specifier3208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_simple_type_specifier3208	= { FOLLOW_169_in_simple_type_specifier3208_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_simple_type_specifier3217  */
static	ANTLR3_BITWORD FOLLOW_135_in_simple_type_specifier3217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_simple_type_specifier3217	= { FOLLOW_135_in_simple_type_specifier3217_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_simple_type_specifier3227  */
static	ANTLR3_BITWORD FOLLOW_128_in_simple_type_specifier3227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_simple_type_specifier3227	= { FOLLOW_128_in_simple_type_specifier3227_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_simple_type_specifier3236  */
static	ANTLR3_BITWORD FOLLOW_172_in_simple_type_specifier3236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x01111E10F0000000), ANTLR3_UINT64_LIT(0x0000520006006081) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_simple_type_specifier3236	= { FOLLOW_172_in_simple_type_specifier3236_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_qualified_type3305  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_qualified_type3305_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_qualified_type3305	= { FOLLOW_scope_override_in_qualified_type3305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_qualified_type3318  */
static	ANTLR3_BITWORD FOLLOW_ID_in_qualified_type3318_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_qualified_type3318	= { FOLLOW_ID_in_qualified_type3318_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_qualified_type3336  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_qualified_type3336_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_qualified_type3336	= { FOLLOW_LESSTHAN_in_qualified_type3336_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_argument_list_in_qualified_type3338  */
static	ANTLR3_BITWORD FOLLOW_template_argument_list_in_qualified_type3338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_argument_list_in_qualified_type3338	= { FOLLOW_template_argument_list_in_qualified_type3338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_qualified_type3340  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_qualified_type3340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_qualified_type3340	= { FOLLOW_GREATERTHAN_in_qualified_type3340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_121_in_class_specifier3371  */
static	ANTLR3_BITWORD FOLLOW_121_in_class_specifier3371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_121_in_class_specifier3371	= { FOLLOW_121_in_class_specifier3371_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_class_specifier3379  */
static	ANTLR3_BITWORD FOLLOW_158_in_class_specifier3379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_class_specifier3379	= { FOLLOW_158_in_class_specifier3379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_class_specifier3386  */
static	ANTLR3_BITWORD FOLLOW_168_in_class_specifier3386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_class_specifier3386	= { FOLLOW_168_in_class_specifier3386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_type_qualifier3420  */
static	ANTLR3_BITWORD FOLLOW_122_in_type_qualifier3420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_type_qualifier3420	= { FOLLOW_122_in_type_qualifier3420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_type_qualifier3428  */
static	ANTLR3_BITWORD FOLLOW_173_in_type_qualifier3428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_type_qualifier3428	= { FOLLOW_173_in_type_qualifier3428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_121_in_class_decl_or_def3466  */
static	ANTLR3_BITWORD FOLLOW_121_in_class_decl_or_def3466_bits[]	= { ANTLR3_UINT64_LIT(0x0100018000000000), ANTLR3_UINT64_LIT(0x0000004002008040) };
static  ANTLR3_BITSET_LIST FOLLOW_121_in_class_decl_or_def3466	= { FOLLOW_121_in_class_decl_or_def3466_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_class_decl_or_def3474  */
static	ANTLR3_BITWORD FOLLOW_158_in_class_decl_or_def3474_bits[]	= { ANTLR3_UINT64_LIT(0x0100018000000000), ANTLR3_UINT64_LIT(0x0000004002008040) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_class_decl_or_def3474	= { FOLLOW_158_in_class_decl_or_def3474_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_class_decl_or_def3481  */
static	ANTLR3_BITWORD FOLLOW_168_in_class_decl_or_def3481_bits[]	= { ANTLR3_UINT64_LIT(0x0100018000000000), ANTLR3_UINT64_LIT(0x0000004002008040) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_class_decl_or_def3481	= { FOLLOW_168_in_class_decl_or_def3481_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_class_decl_or_def3492  */
static	ANTLR3_BITWORD FOLLOW_set_in_class_decl_or_def3492_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_class_decl_or_def3492	= { FOLLOW_set_in_class_decl_or_def3492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_class_decl_or_def3498  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_class_decl_or_def3498_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_class_decl_or_def3498	= { FOLLOW_LPAREN_in_class_decl_or_def3498_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_class_decl_or_def3500  */
static	ANTLR3_BITWORD FOLLOW_expression_in_class_decl_or_def3500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_class_decl_or_def3500	= { FOLLOW_expression_in_class_decl_or_def3500_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_class_decl_or_def3502  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_class_decl_or_def3502_bits[]	= { ANTLR3_UINT64_LIT(0x0100018000000000), ANTLR3_UINT64_LIT(0x0000004002008040) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_class_decl_or_def3502	= { FOLLOW_RPAREN_in_class_decl_or_def3502_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_class_decl_or_def3515  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_class_decl_or_def3515_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_class_decl_or_def3515	= { FOLLOW_qualified_id_in_class_decl_or_def3515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_base_clause_in_class_decl_or_def3561  */
static	ANTLR3_BITWORD FOLLOW_base_clause_in_class_decl_or_def3561_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_base_clause_in_class_decl_or_def3561	= { FOLLOW_base_clause_in_class_decl_or_def3561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_class_decl_or_def3569  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_class_decl_or_def3569_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C8), ANTLR3_UINT64_LIT(0x00007FA1567CF2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_class_decl_or_def3569	= { FOLLOW_LCURLY_in_class_decl_or_def3569_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_declaration_in_class_decl_or_def3583  */
static	ANTLR3_BITWORD FOLLOW_member_declaration_in_class_decl_or_def3583_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C8), ANTLR3_UINT64_LIT(0x00007FA1567CF2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_member_declaration_in_class_decl_or_def3583	= { FOLLOW_member_declaration_in_class_decl_or_def3583_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RCURLY_in_class_decl_or_def3597  */
static	ANTLR3_BITWORD FOLLOW_RCURLY_in_class_decl_or_def3597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RCURLY_in_class_decl_or_def3597	= { FOLLOW_RCURLY_in_class_decl_or_def3597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_class_decl_or_def3617  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_class_decl_or_def3617_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C8), ANTLR3_UINT64_LIT(0x00007FA1567CF2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_class_decl_or_def3617	= { FOLLOW_LCURLY_in_class_decl_or_def3617_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_declaration_in_class_decl_or_def3629  */
static	ANTLR3_BITWORD FOLLOW_member_declaration_in_class_decl_or_def3629_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x071FFFFFFF0090C8), ANTLR3_UINT64_LIT(0x00007FA1567CF2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_member_declaration_in_class_decl_or_def3629	= { FOLLOW_member_declaration_in_class_decl_or_def3629_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RCURLY_in_class_decl_or_def3641  */
static	ANTLR3_BITWORD FOLLOW_RCURLY_in_class_decl_or_def3641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RCURLY_in_class_decl_or_def3641	= { FOLLOW_RCURLY_in_class_decl_or_def3641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_base_clause3665  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_base_clause3665_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040), ANTLR3_UINT64_LIT(0x0000080000380000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_base_clause3665	= { FOLLOW_COLON_in_base_clause3665_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_base_specifier_in_base_clause3667  */
static	ANTLR3_BITWORD FOLLOW_base_specifier_in_base_clause3667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_base_specifier_in_base_clause3667	= { FOLLOW_base_specifier_in_base_clause3667_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_base_clause3670  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_base_clause3670_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040), ANTLR3_UINT64_LIT(0x0000080000380000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_base_clause3670	= { FOLLOW_COMMA_in_base_clause3670_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_base_specifier_in_base_clause3672  */
static	ANTLR3_BITWORD FOLLOW_base_specifier_in_base_clause3672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_base_specifier_in_base_clause3672	= { FOLLOW_base_specifier_in_base_clause3672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_base_specifier3697  */
static	ANTLR3_BITWORD FOLLOW_171_in_base_specifier3697_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040), ANTLR3_UINT64_LIT(0x0000000000380000) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_base_specifier3697	= { FOLLOW_171_in_base_specifier3697_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_access_specifier_in_base_specifier3700  */
static	ANTLR3_BITWORD FOLLOW_access_specifier_in_base_specifier3700_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_access_specifier_in_base_specifier3700	= { FOLLOW_access_specifier_in_base_specifier3700_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_type_in_base_specifier3708  */
static	ANTLR3_BITWORD FOLLOW_qualified_type_in_base_specifier3708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_type_in_base_specifier3708	= { FOLLOW_qualified_type_in_base_specifier3708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_access_specifier_in_base_specifier3717  */
static	ANTLR3_BITWORD FOLLOW_access_specifier_in_base_specifier3717_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_access_specifier_in_base_specifier3717	= { FOLLOW_access_specifier_in_base_specifier3717_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_base_specifier3720  */
static	ANTLR3_BITWORD FOLLOW_171_in_base_specifier3720_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_base_specifier3720	= { FOLLOW_171_in_base_specifier3720_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_type_in_base_specifier3728  */
static	ANTLR3_BITWORD FOLLOW_qualified_type_in_base_specifier3728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_type_in_base_specifier3728	= { FOLLOW_qualified_type_in_base_specifier3728_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_type_in_base_specifier3741  */
static	ANTLR3_BITWORD FOLLOW_qualified_type_in_base_specifier3741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_type_in_base_specifier3741	= { FOLLOW_qualified_type_in_base_specifier3741_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_enum_specifier3803  */
static	ANTLR3_BITWORD FOLLOW_131_in_enum_specifier3803_bits[]	= { ANTLR3_UINT64_LIT(0x0100018000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_enum_specifier3803	= { FOLLOW_131_in_enum_specifier3803_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_enum_specifier3813  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_enum_specifier3813_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_enum_specifier3813	= { FOLLOW_LCURLY_in_enum_specifier3813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumerator_list_in_enum_specifier3815  */
static	ANTLR3_BITWORD FOLLOW_enumerator_list_in_enum_specifier3815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_enumerator_list_in_enum_specifier3815	= { FOLLOW_enumerator_list_in_enum_specifier3815_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RCURLY_in_enum_specifier3817  */
static	ANTLR3_BITWORD FOLLOW_RCURLY_in_enum_specifier3817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RCURLY_in_enum_specifier3817	= { FOLLOW_RCURLY_in_enum_specifier3817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_enum_specifier3831  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_enum_specifier3831_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_enum_specifier3831	= { FOLLOW_qualified_id_in_enum_specifier3831_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_enum_specifier3844  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_enum_specifier3844_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_enum_specifier3844	= { FOLLOW_LCURLY_in_enum_specifier3844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumerator_list_in_enum_specifier3846  */
static	ANTLR3_BITWORD FOLLOW_enumerator_list_in_enum_specifier3846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_enumerator_list_in_enum_specifier3846	= { FOLLOW_enumerator_list_in_enum_specifier3846_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RCURLY_in_enum_specifier3848  */
static	ANTLR3_BITWORD FOLLOW_RCURLY_in_enum_specifier3848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RCURLY_in_enum_specifier3848	= { FOLLOW_RCURLY_in_enum_specifier3848_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumerator_in_enumerator_list3874  */
static	ANTLR3_BITWORD FOLLOW_enumerator_in_enumerator_list3874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumerator_in_enumerator_list3874	= { FOLLOW_enumerator_in_enumerator_list3874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_enumerator_list3877  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_enumerator_list3877_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_enumerator_list3877	= { FOLLOW_COMMA_in_enumerator_list3877_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumerator_in_enumerator_list3880  */
static	ANTLR3_BITWORD FOLLOW_enumerator_in_enumerator_list3880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumerator_in_enumerator_list3880	= { FOLLOW_enumerator_in_enumerator_list3880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_enumerator3903  */
static	ANTLR3_BITWORD FOLLOW_ID_in_enumerator3903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_enumerator3903	= { FOLLOW_ID_in_enumerator3903_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_enumerator3906  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_enumerator3906_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_enumerator3906	= { FOLLOW_ASSIGNEQUAL_in_enumerator3906_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expression_in_enumerator3908  */
static	ANTLR3_BITWORD FOLLOW_constant_expression_in_enumerator3908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expression_in_enumerator3908	= { FOLLOW_constant_expression_in_enumerator3908_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_qualified_id3968  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_qualified_id3968_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_qualified_id3968	= { FOLLOW_scope_override_in_qualified_id3968_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_qualified_id3982  */
static	ANTLR3_BITWORD FOLLOW_ID_in_qualified_id3982_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_qualified_id3982	= { FOLLOW_ID_in_qualified_id3982_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_qualified_id4004  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_qualified_id4004_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_qualified_id4004	= { FOLLOW_LESSTHAN_in_qualified_id4004_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_argument_list_in_qualified_id4006  */
static	ANTLR3_BITWORD FOLLOW_template_argument_list_in_qualified_id4006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_argument_list_in_qualified_id4006	= { FOLLOW_template_argument_list_in_qualified_id4006_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_qualified_id4008  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_qualified_id4008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_qualified_id4008	= { FOLLOW_GREATERTHAN_in_qualified_id4008_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPERATOR_in_qualified_id4022  */
static	ANTLR3_BITWORD FOLLOW_OPERATOR_in_qualified_id4022_bits[]	= { ANTLR3_UINT64_LIT(0x7E3F9E8C020C2FF0), ANTLR3_UINT64_LIT(0x43111E10F0019F40), ANTLR3_UINT64_LIT(0x0000538046026089) };
static  ANTLR3_BITSET_LIST FOLLOW_OPERATOR_in_qualified_id4022	= { FOLLOW_OPERATOR_in_qualified_id4022_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_optor_in_qualified_id4026  */
static	ANTLR3_BITWORD FOLLOW_optor_in_qualified_id4026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_optor_in_qualified_id4026	= { FOLLOW_optor_in_qualified_id4026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TILDE_in_qualified_id4041  */
static	ANTLR3_BITWORD FOLLOW_TILDE_in_qualified_id4041_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_TILDE_in_qualified_id4041	= { FOLLOW_TILDE_in_qualified_id4041_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_id_expression_in_qualified_id4043  */
static	ANTLR3_BITWORD FOLLOW_id_expression_in_qualified_id4043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_id_expression_in_qualified_id4043	= { FOLLOW_id_expression_in_qualified_id4043_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_typeID4077  */
static	ANTLR3_BITWORD FOLLOW_ID_in_typeID4077_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_typeID4077	= { FOLLOW_ID_in_typeID4077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_declarator_in_init_declarator_list4092  */
static	ANTLR3_BITWORD FOLLOW_member_declarator_in_init_declarator_list4092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_member_declarator_in_init_declarator_list4092	= { FOLLOW_member_declarator_in_init_declarator_list4092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_init_declarator_list4095  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_init_declarator_list4095_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_init_declarator_list4095	= { FOLLOW_COMMA_in_init_declarator_list4095_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_declarator_in_init_declarator_list4097  */
static	ANTLR3_BITWORD FOLLOW_member_declarator_in_init_declarator_list4097_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_member_declarator_in_init_declarator_list4097	= { FOLLOW_member_declarator_in_init_declarator_list4097_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_member_declarator4126  */
static	ANTLR3_BITWORD FOLLOW_ID_in_member_declarator4126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_member_declarator4126	= { FOLLOW_ID_in_member_declarator4126_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_member_declarator4130  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_member_declarator4130_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_member_declarator4130	= { FOLLOW_COLON_in_member_declarator4130_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expression_in_member_declarator4132  */
static	ANTLR3_BITWORD FOLLOW_constant_expression_in_member_declarator4132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expression_in_member_declarator4132	= { FOLLOW_constant_expression_in_member_declarator4132_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_member_declarator4141  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_member_declarator4141_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_member_declarator4141	= { FOLLOW_declarator_in_member_declarator4141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_member_declarator4159  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_member_declarator4159_bits[]	= { ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_member_declarator4159	= { FOLLOW_ASSIGNEQUAL_in_member_declarator4159_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OCTALINT_in_member_declarator4161  */
static	ANTLR3_BITWORD FOLLOW_OCTALINT_in_member_declarator4161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OCTALINT_in_member_declarator4161	= { FOLLOW_OCTALINT_in_member_declarator4161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_member_declarator4172  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_member_declarator4172_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_member_declarator4172	= { FOLLOW_ASSIGNEQUAL_in_member_declarator4172_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initializer_in_member_declarator4178  */
static	ANTLR3_BITWORD FOLLOW_initializer_in_member_declarator4178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initializer_in_member_declarator4178	= { FOLLOW_initializer_in_member_declarator4178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_member_declarator4188  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_member_declarator4188_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_member_declarator4188	= { FOLLOW_LPAREN_in_member_declarator4188_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_member_declarator4190  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_member_declarator4190_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_member_declarator4190	= { FOLLOW_expression_list_in_member_declarator4190_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_member_declarator4192  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_member_declarator4192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_member_declarator4192	= { FOLLOW_RPAREN_in_member_declarator4192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_remainder_expression_in_initializer4213  */
static	ANTLR3_BITWORD FOLLOW_remainder_expression_in_initializer4213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_remainder_expression_in_initializer4213	= { FOLLOW_remainder_expression_in_initializer4213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_initializer4222  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_initializer4222_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_initializer4222	= { FOLLOW_LCURLY_in_initializer4222_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initializer_in_initializer4224  */
static	ANTLR3_BITWORD FOLLOW_initializer_in_initializer4224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initializer_in_initializer4224	= { FOLLOW_initializer_in_initializer4224_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_initializer4227  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_initializer4227_bits[]	= { ANTLR3_UINT64_LIT(0x159289918002A010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D048), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_initializer4227	= { FOLLOW_COMMA_in_initializer4227_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initializer_in_initializer4230  */
static	ANTLR3_BITWORD FOLLOW_initializer_in_initializer4230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_initializer_in_initializer4230	= { FOLLOW_initializer_in_initializer4230_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RCURLY_in_initializer4237  */
static	ANTLR3_BITWORD FOLLOW_RCURLY_in_initializer4237_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RCURLY_in_initializer4237	= { FOLLOW_RCURLY_in_initializer4237_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ptr_operator_in_declarator4257  */
static	ANTLR3_BITWORD FOLLOW_ptr_operator_in_declarator4257_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ptr_operator_in_declarator4257	= { FOLLOW_ptr_operator_in_declarator4257_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_declarator4262  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_declarator4262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_declarator4262	= { FOLLOW_declarator_in_declarator4262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_direct_declarator_in_declarator4270  */
static	ANTLR3_BITWORD FOLLOW_direct_declarator_in_declarator4270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_direct_declarator_in_declarator4270	= { FOLLOW_direct_declarator_in_declarator4270_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_direct_declarator4324  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_direct_declarator4324_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_direct_declarator4324	= { FOLLOW_qualified_id_in_direct_declarator4324_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_direct_declarator4333  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_direct_declarator4333_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009050), ANTLR3_UINT64_LIT(0x00007BA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_direct_declarator4333	= { FOLLOW_LPAREN_in_direct_declarator4333_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_list_in_direct_declarator4340  */
static	ANTLR3_BITWORD FOLLOW_parameter_list_in_direct_declarator4340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_list_in_direct_declarator4340	= { FOLLOW_parameter_list_in_direct_declarator4340_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_direct_declarator4346  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_direct_declarator4346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_direct_declarator4346	= { FOLLOW_RPAREN_in_direct_declarator4346_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_qualifier_in_direct_declarator4357  */
static	ANTLR3_BITWORD FOLLOW_type_qualifier_in_direct_declarator4357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_qualifier_in_direct_declarator4357	= { FOLLOW_type_qualifier_in_direct_declarator4357_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exception_specification_in_direct_declarator4364  */
static	ANTLR3_BITWORD FOLLOW_exception_specification_in_direct_declarator4364_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exception_specification_in_direct_declarator4364	= { FOLLOW_exception_specification_in_direct_declarator4364_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_direct_declarator4392  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_direct_declarator4392_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_direct_declarator4392	= { FOLLOW_qualified_id_in_direct_declarator4392_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_direct_declarator4401  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_direct_declarator4401_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_direct_declarator4401	= { FOLLOW_LPAREN_in_direct_declarator4401_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_direct_declarator4405  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_direct_declarator4405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_direct_declarator4405	= { FOLLOW_expression_list_in_direct_declarator4405_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_direct_declarator4409  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_direct_declarator4409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_direct_declarator4409	= { FOLLOW_RPAREN_in_direct_declarator4409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_direct_declarator4431  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_direct_declarator4431_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_direct_declarator4431	= { FOLLOW_qualified_id_in_direct_declarator4431_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_direct_declarator4445  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_direct_declarator4445_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D060), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_direct_declarator4445	= { FOLLOW_LSQUARE_in_direct_declarator4445_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expression_in_direct_declarator4448  */
static	ANTLR3_BITWORD FOLLOW_constant_expression_in_direct_declarator4448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expression_in_direct_declarator4448	= { FOLLOW_constant_expression_in_direct_declarator4448_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQUARE_in_direct_declarator4452  */
static	ANTLR3_BITWORD FOLLOW_RSQUARE_in_direct_declarator4452_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQUARE_in_direct_declarator4452	= { FOLLOW_RSQUARE_in_direct_declarator4452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_direct_declarator4482  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_direct_declarator4482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_direct_declarator4482	= { FOLLOW_qualified_id_in_direct_declarator4482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_direct_declarator4498  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_direct_declarator4498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_direct_declarator4498	= { FOLLOW_qualified_id_in_direct_declarator4498_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_direct_declarator4511  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_direct_declarator4511_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_direct_declarator4511	= { FOLLOW_LPAREN_in_direct_declarator4511_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_direct_declarator4513  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_direct_declarator4513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_direct_declarator4513	= { FOLLOW_declarator_in_direct_declarator4513_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_direct_declarator4515  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_direct_declarator4515_bits[]	= { ANTLR3_UINT64_LIT(0x0000180000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_direct_declarator4515	= { FOLLOW_RPAREN_in_direct_declarator4515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_suffix_in_direct_declarator4525  */
static	ANTLR3_BITWORD FOLLOW_declarator_suffix_in_direct_declarator4525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_suffix_in_direct_declarator4525	= { FOLLOW_declarator_suffix_in_direct_declarator4525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_declarator_suffix4559  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_declarator_suffix4559_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D060), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_declarator_suffix4559	= { FOLLOW_LSQUARE_in_declarator_suffix4559_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expression_in_declarator_suffix4562  */
static	ANTLR3_BITWORD FOLLOW_constant_expression_in_declarator_suffix4562_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expression_in_declarator_suffix4562	= { FOLLOW_constant_expression_in_declarator_suffix4562_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQUARE_in_declarator_suffix4566  */
static	ANTLR3_BITWORD FOLLOW_RSQUARE_in_declarator_suffix4566_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQUARE_in_declarator_suffix4566	= { FOLLOW_RSQUARE_in_declarator_suffix4566_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_declarator_suffix4584  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_declarator_suffix4584_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009050), ANTLR3_UINT64_LIT(0x00007BA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_declarator_suffix4584	= { FOLLOW_LPAREN_in_declarator_suffix4584_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_list_in_declarator_suffix4591  */
static	ANTLR3_BITWORD FOLLOW_parameter_list_in_declarator_suffix4591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_list_in_declarator_suffix4591	= { FOLLOW_parameter_list_in_declarator_suffix4591_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_declarator_suffix4599  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_declarator_suffix4599_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_declarator_suffix4599	= { FOLLOW_RPAREN_in_declarator_suffix4599_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_qualifier_in_declarator_suffix4610  */
static	ANTLR3_BITWORD FOLLOW_type_qualifier_in_declarator_suffix4610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_qualifier_in_declarator_suffix4610	= { FOLLOW_type_qualifier_in_declarator_suffix4610_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exception_specification_in_declarator_suffix4617  */
static	ANTLR3_BITWORD FOLLOW_exception_specification_in_declarator_suffix4617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exception_specification_in_declarator_suffix4617	= { FOLLOW_exception_specification_in_declarator_suffix4617_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPERATOR_in_conversion_function_decl_or_def4638  */
static	ANTLR3_BITWORD FOLLOW_OPERATOR_in_conversion_function_decl_or_def4638_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_OPERATOR_in_conversion_function_decl_or_def4638	= { FOLLOW_OPERATOR_in_conversion_function_decl_or_def4638_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_conversion_function_decl_or_def4640  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_conversion_function_decl_or_def4640_bits[]	= { ANTLR3_UINT64_LIT(0x00000A0000000010), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_conversion_function_decl_or_def4640	= { FOLLOW_declaration_specifiers_in_conversion_function_decl_or_def4640_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_conversion_function_decl_or_def4656  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_conversion_function_decl_or_def4656_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009040), ANTLR3_UINT64_LIT(0x00007BA15644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_conversion_function_decl_or_def4656	= { FOLLOW_LESSTHAN_in_conversion_function_decl_or_def4656_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_parameter_list_in_conversion_function_decl_or_def4658  */
static	ANTLR3_BITWORD FOLLOW_template_parameter_list_in_conversion_function_decl_or_def4658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_parameter_list_in_conversion_function_decl_or_def4658	= { FOLLOW_template_parameter_list_in_conversion_function_decl_or_def4658_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_conversion_function_decl_or_def4660  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_conversion_function_decl_or_def4660_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_conversion_function_decl_or_def4660	= { FOLLOW_GREATERTHAN_in_conversion_function_decl_or_def4660_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_conversion_function_decl_or_def4669  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_conversion_function_decl_or_def4669_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009050), ANTLR3_UINT64_LIT(0x00007BA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_conversion_function_decl_or_def4669	= { FOLLOW_LPAREN_in_conversion_function_decl_or_def4669_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_list_in_conversion_function_decl_or_def4672  */
static	ANTLR3_BITWORD FOLLOW_parameter_list_in_conversion_function_decl_or_def4672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_list_in_conversion_function_decl_or_def4672	= { FOLLOW_parameter_list_in_conversion_function_decl_or_def4672_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_conversion_function_decl_or_def4676  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_conversion_function_decl_or_def4676_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000), ANTLR3_UINT64_LIT(0x0400000000000080), ANTLR3_UINT64_LIT(0x0000200400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_conversion_function_decl_or_def4676	= { FOLLOW_RPAREN_in_conversion_function_decl_or_def4676_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_qualifier_in_conversion_function_decl_or_def4685  */
static	ANTLR3_BITWORD FOLLOW_type_qualifier_in_conversion_function_decl_or_def4685_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000), ANTLR3_UINT64_LIT(0x0400000000000080), ANTLR3_UINT64_LIT(0x0000200400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_qualifier_in_conversion_function_decl_or_def4685	= { FOLLOW_type_qualifier_in_conversion_function_decl_or_def4685_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exception_specification_in_conversion_function_decl_or_def4693  */
static	ANTLR3_BITWORD FOLLOW_exception_specification_in_conversion_function_decl_or_def4693_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_exception_specification_in_conversion_function_decl_or_def4693	= { FOLLOW_exception_specification_in_conversion_function_decl_or_def4693_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_statement_in_conversion_function_decl_or_def4701  */
static	ANTLR3_BITWORD FOLLOW_compound_statement_in_conversion_function_decl_or_def4701_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_statement_in_conversion_function_decl_or_def4701	= { FOLLOW_compound_statement_in_conversion_function_decl_or_def4701_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_conversion_function_decl_or_def4707  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_conversion_function_decl_or_def4707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_conversion_function_decl_or_def4707	= { FOLLOW_SEMICOLON_in_conversion_function_decl_or_def4707_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ptr_operator_in_function_declarator4736  */
static	ANTLR3_BITWORD FOLLOW_ptr_operator_in_function_declarator4736_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ptr_operator_in_function_declarator4736	= { FOLLOW_ptr_operator_in_function_declarator4736_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_function_declarator4738  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_function_declarator4738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_function_declarator4738	= { FOLLOW_function_declarator_in_function_declarator4738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_direct_declarator_in_function_declarator4747  */
static	ANTLR3_BITWORD FOLLOW_function_direct_declarator_in_function_declarator4747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_direct_declarator_in_function_declarator4747	= { FOLLOW_function_direct_declarator_in_function_declarator4747_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_function_direct_declarator4777  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_function_direct_declarator4777_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_function_direct_declarator4777	= { FOLLOW_LPAREN_in_function_direct_declarator4777_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_function_direct_declarator4783  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_function_direct_declarator4783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_function_direct_declarator4783	= { FOLLOW_declarator_in_function_direct_declarator4783_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_function_direct_declarator4788  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_function_direct_declarator4788_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_function_direct_declarator4788	= { FOLLOW_RPAREN_in_function_direct_declarator4788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_function_direct_declarator4801  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_function_direct_declarator4801_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_function_direct_declarator4801	= { FOLLOW_qualified_id_in_function_direct_declarator4801_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_function_direct_declarator4821  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_function_direct_declarator4821_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009050), ANTLR3_UINT64_LIT(0x00007BA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_function_direct_declarator4821	= { FOLLOW_LPAREN_in_function_direct_declarator4821_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_list_in_function_direct_declarator4831  */
static	ANTLR3_BITWORD FOLLOW_parameter_list_in_function_direct_declarator4831_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_list_in_function_direct_declarator4831	= { FOLLOW_parameter_list_in_function_direct_declarator4831_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_function_direct_declarator4842  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_function_direct_declarator4842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_function_direct_declarator4842	= { FOLLOW_RPAREN_in_function_direct_declarator4842_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_qualifier_in_function_direct_declarator4855  */
static	ANTLR3_BITWORD FOLLOW_type_qualifier_in_function_direct_declarator4855_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_qualifier_in_function_direct_declarator4855	= { FOLLOW_type_qualifier_in_function_direct_declarator4855_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_function_direct_declarator4862  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_function_direct_declarator4862_bits[]	= { ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_function_direct_declarator4862	= { FOLLOW_ASSIGNEQUAL_in_function_direct_declarator4862_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OCTALINT_in_function_direct_declarator4864  */
static	ANTLR3_BITWORD FOLLOW_OCTALINT_in_function_direct_declarator4864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_OCTALINT_in_function_direct_declarator4864	= { FOLLOW_OCTALINT_in_function_direct_declarator4864_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exception_specification_in_function_direct_declarator4876  */
static	ANTLR3_BITWORD FOLLOW_exception_specification_in_function_direct_declarator4876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exception_specification_in_function_direct_declarator4876	= { FOLLOW_exception_specification_in_function_direct_declarator4876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_head_in_ctor_definition4902  */
static	ANTLR3_BITWORD FOLLOW_ctor_head_in_ctor_definition4902_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_head_in_ctor_definition4902	= { FOLLOW_ctor_head_in_ctor_definition4902_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_body_in_ctor_definition4906  */
static	ANTLR3_BITWORD FOLLOW_ctor_body_in_ctor_definition4906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_body_in_ctor_definition4906	= { FOLLOW_ctor_body_in_ctor_definition4906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_decl_spec_in_ctor_head4925  */
static	ANTLR3_BITWORD FOLLOW_ctor_decl_spec_in_ctor_head4925_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_decl_spec_in_ctor_head4925	= { FOLLOW_ctor_decl_spec_in_ctor_head4925_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_declarator_in_ctor_head4929  */
static	ANTLR3_BITWORD FOLLOW_ctor_declarator_in_ctor_head4929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_declarator_in_ctor_head4929	= { FOLLOW_ctor_declarator_in_ctor_head4929_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_ctor_id_in_ctor_declarator4981  */
static	ANTLR3_BITWORD FOLLOW_qualified_ctor_id_in_ctor_declarator4981_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_ctor_id_in_ctor_declarator4981	= { FOLLOW_qualified_ctor_id_in_ctor_declarator4981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_ctor_declarator4990  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_ctor_declarator4990_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009050), ANTLR3_UINT64_LIT(0x00007BA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_ctor_declarator4990	= { FOLLOW_LPAREN_in_ctor_declarator4990_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_list_in_ctor_declarator4993  */
static	ANTLR3_BITWORD FOLLOW_parameter_list_in_ctor_declarator4993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_list_in_ctor_declarator4993	= { FOLLOW_parameter_list_in_ctor_declarator4993_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_ctor_declarator4997  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_ctor_declarator4997_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_ctor_declarator4997	= { FOLLOW_RPAREN_in_ctor_declarator4997_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exception_specification_in_ctor_declarator5006  */
static	ANTLR3_BITWORD FOLLOW_exception_specification_in_ctor_declarator5006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exception_specification_in_ctor_declarator5006	= { FOLLOW_exception_specification_in_ctor_declarator5006_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_qualified_ctor_id5047  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_qualified_ctor_id5047_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_qualified_ctor_id5047	= { FOLLOW_scope_override_in_qualified_ctor_id5047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_qualified_ctor_id5058  */
static	ANTLR3_BITWORD FOLLOW_ID_in_qualified_ctor_id5058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_qualified_ctor_id5058	= { FOLLOW_ID_in_qualified_ctor_id5058_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_initializer_in_ctor_body5079  */
static	ANTLR3_BITWORD FOLLOW_ctor_initializer_in_ctor_body5079_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_initializer_in_ctor_body5079	= { FOLLOW_ctor_initializer_in_ctor_body5079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_statement_in_ctor_body5085  */
static	ANTLR3_BITWORD FOLLOW_compound_statement_in_ctor_body5085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_statement_in_ctor_body5085	= { FOLLOW_compound_statement_in_ctor_body5085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_ctor_initializer5099  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_ctor_initializer5099_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_ctor_initializer5099	= { FOLLOW_COLON_in_ctor_initializer5099_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_superclass_init_in_ctor_initializer5101  */
static	ANTLR3_BITWORD FOLLOW_superclass_init_in_ctor_initializer5101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_superclass_init_in_ctor_initializer5101	= { FOLLOW_superclass_init_in_ctor_initializer5101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_ctor_initializer5104  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_ctor_initializer5104_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_ctor_initializer5104	= { FOLLOW_COMMA_in_ctor_initializer5104_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_superclass_init_in_ctor_initializer5106  */
static	ANTLR3_BITWORD FOLLOW_superclass_init_in_ctor_initializer5106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_superclass_init_in_ctor_initializer5106	= { FOLLOW_superclass_init_in_ctor_initializer5106_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_superclass_init5134  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_superclass_init5134_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_superclass_init5134	= { FOLLOW_qualified_id_in_superclass_init5134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_superclass_init5137  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_superclass_init5137_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D050), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_superclass_init5137	= { FOLLOW_LPAREN_in_superclass_init5137_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_superclass_init5140  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_superclass_init5140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_superclass_init5140	= { FOLLOW_expression_list_in_superclass_init5140_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_superclass_init5144  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_superclass_init5144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_superclass_init5144	= { FOLLOW_RPAREN_in_superclass_init5144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_decl_spec_in_dtor_head5159  */
static	ANTLR3_BITWORD FOLLOW_dtor_decl_spec_in_dtor_head5159_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_decl_spec_in_dtor_head5159	= { FOLLOW_dtor_decl_spec_in_dtor_head5159_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_declarator_in_dtor_head5163  */
static	ANTLR3_BITWORD FOLLOW_dtor_declarator_in_dtor_head5163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_declarator_in_dtor_head5163	= { FOLLOW_dtor_declarator_in_dtor_head5163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_dtor_declarator5216  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_dtor_declarator5216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_dtor_declarator5216	= { FOLLOW_scope_override_in_dtor_declarator5216_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TILDE_in_dtor_declarator5221  */
static	ANTLR3_BITWORD FOLLOW_TILDE_in_dtor_declarator5221_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_TILDE_in_dtor_declarator5221	= { FOLLOW_TILDE_in_dtor_declarator5221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_dtor_declarator5223  */
static	ANTLR3_BITWORD FOLLOW_ID_in_dtor_declarator5223_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_dtor_declarator5223	= { FOLLOW_ID_in_dtor_declarator5223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_dtor_declarator5231  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_dtor_declarator5231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_dtor_declarator5231	= { FOLLOW_LPAREN_in_dtor_declarator5231_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_dtor_declarator5234  */
static	ANTLR3_BITWORD FOLLOW_172_in_dtor_declarator5234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_dtor_declarator5234	= { FOLLOW_172_in_dtor_declarator5234_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_dtor_declarator5238  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_dtor_declarator5238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_dtor_declarator5238	= { FOLLOW_RPAREN_in_dtor_declarator5238_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exception_specification_in_dtor_declarator5247  */
static	ANTLR3_BITWORD FOLLOW_exception_specification_in_dtor_declarator5247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exception_specification_in_dtor_declarator5247	= { FOLLOW_exception_specification_in_dtor_declarator5247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_statement_in_dtor_body5263  */
static	ANTLR3_BITWORD FOLLOW_compound_statement_in_dtor_body5263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_statement_in_dtor_body5263	= { FOLLOW_compound_statement_in_dtor_body5263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_declaration_list_in_parameter_list5282  */
static	ANTLR3_BITWORD FOLLOW_parameter_declaration_list_in_parameter_list5282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000002) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_declaration_list_in_parameter_list5282	= { FOLLOW_parameter_declaration_list_in_parameter_list5282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ELLIPSIS_in_parameter_list5285  */
static	ANTLR3_BITWORD FOLLOW_ELLIPSIS_in_parameter_list5285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ELLIPSIS_in_parameter_list5285	= { FOLLOW_ELLIPSIS_in_parameter_list5285_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_declaration_in_parameter_declaration_list5303  */
static	ANTLR3_BITWORD FOLLOW_parameter_declaration_in_parameter_declaration_list5303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_declaration_in_parameter_declaration_list5303	= { FOLLOW_parameter_declaration_in_parameter_declaration_list5303_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_parameter_declaration_list5306  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_parameter_declaration_list5306_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009040), ANTLR3_UINT64_LIT(0x00007BA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_parameter_declaration_list5306	= { FOLLOW_COMMA_in_parameter_declaration_list5306_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_declaration_in_parameter_declaration_list5308  */
static	ANTLR3_BITWORD FOLLOW_parameter_declaration_in_parameter_declaration_list5308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_declaration_in_parameter_declaration_list5308	= { FOLLOW_parameter_declaration_in_parameter_declaration_list5308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_parameter_declaration5345  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_parameter_declaration5345_bits[]	= { ANTLR3_UINT64_LIT(0x0100188000000050), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_parameter_declaration5345	= { FOLLOW_declaration_specifiers_in_parameter_declaration5345_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_parameter_declaration5364  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_parameter_declaration5364_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_parameter_declaration5364	= { FOLLOW_declarator_in_parameter_declaration5364_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_in_parameter_declaration5384  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_in_parameter_declaration5384_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_in_parameter_declaration5384	= { FOLLOW_abstract_declarator_in_parameter_declaration5384_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_parameter_declaration5410  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_parameter_declaration5410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_parameter_declaration5410	= { FOLLOW_declarator_in_parameter_declaration5410_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ELLIPSIS_in_parameter_declaration5422  */
static	ANTLR3_BITWORD FOLLOW_ELLIPSIS_in_parameter_declaration5422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_ELLIPSIS_in_parameter_declaration5422	= { FOLLOW_ELLIPSIS_in_parameter_declaration5422_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_parameter_declaration5431  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_parameter_declaration5431_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_parameter_declaration5431	= { FOLLOW_ASSIGNEQUAL_in_parameter_declaration5431_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_remainder_expression_in_parameter_declaration5437  */
static	ANTLR3_BITWORD FOLLOW_remainder_expression_in_parameter_declaration5437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_remainder_expression_in_parameter_declaration5437	= { FOLLOW_remainder_expression_in_parameter_declaration5437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_type_id5457  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_type_id5457_bits[]	= { ANTLR3_UINT64_LIT(0x0000188000000010), ANTLR3_UINT64_LIT(0x0000E0AF05001040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_type_id5457	= { FOLLOW_declaration_specifiers_in_type_id5457_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_in_type_id5459  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_in_type_id5459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_in_type_id5459	= { FOLLOW_abstract_declarator_in_type_id5459_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ptr_operator_in_abstract_declarator5484  */
static	ANTLR3_BITWORD FOLLOW_ptr_operator_in_abstract_declarator5484_bits[]	= { ANTLR3_UINT64_LIT(0x0000188000000010), ANTLR3_UINT64_LIT(0x0000E0AF05001040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ptr_operator_in_abstract_declarator5484	= { FOLLOW_ptr_operator_in_abstract_declarator5484_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_in_abstract_declarator5486  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_in_abstract_declarator5486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_in_abstract_declarator5486	= { FOLLOW_abstract_declarator_in_abstract_declarator5486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_abstract_declarator5511  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_abstract_declarator5511_bits[]	= { ANTLR3_UINT64_LIT(0x0000188000000010), ANTLR3_UINT64_LIT(0x0000E0AF05001050), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_abstract_declarator5511	= { FOLLOW_LPAREN_in_abstract_declarator5511_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_in_abstract_declarator5513  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_in_abstract_declarator5513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_in_abstract_declarator5513	= { FOLLOW_abstract_declarator_in_abstract_declarator5513_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_abstract_declarator5515  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_abstract_declarator5515_bits[]	= { ANTLR3_UINT64_LIT(0x0000180000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_abstract_declarator5515	= { FOLLOW_RPAREN_in_abstract_declarator5515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_suffix_in_abstract_declarator5523  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_suffix_in_abstract_declarator5523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_suffix_in_abstract_declarator5523	= { FOLLOW_abstract_declarator_suffix_in_abstract_declarator5523_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_suffix_in_abstract_declarator5536  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_suffix_in_abstract_declarator5536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_suffix_in_abstract_declarator5536	= { FOLLOW_abstract_declarator_suffix_in_abstract_declarator5536_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_abstract_declarator_suffix5554  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_abstract_declarator_suffix5554_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D060), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_abstract_declarator_suffix5554	= { FOLLOW_LSQUARE_in_abstract_declarator_suffix5554_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expression_in_abstract_declarator_suffix5557  */
static	ANTLR3_BITWORD FOLLOW_constant_expression_in_abstract_declarator_suffix5557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expression_in_abstract_declarator_suffix5557	= { FOLLOW_constant_expression_in_abstract_declarator_suffix5557_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQUARE_in_abstract_declarator_suffix5561  */
static	ANTLR3_BITWORD FOLLOW_RSQUARE_in_abstract_declarator_suffix5561_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQUARE_in_abstract_declarator_suffix5561	= { FOLLOW_RSQUARE_in_abstract_declarator_suffix5561_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_abstract_declarator_suffix5574  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_abstract_declarator_suffix5574_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009050), ANTLR3_UINT64_LIT(0x00007BA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_abstract_declarator_suffix5574	= { FOLLOW_LPAREN_in_abstract_declarator_suffix5574_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_list_in_abstract_declarator_suffix5583  */
static	ANTLR3_BITWORD FOLLOW_parameter_list_in_abstract_declarator_suffix5583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_list_in_abstract_declarator_suffix5583	= { FOLLOW_parameter_list_in_abstract_declarator_suffix5583_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_abstract_declarator_suffix5589  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_abstract_declarator_suffix5589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_abstract_declarator_suffix5589	= { FOLLOW_RPAREN_in_abstract_declarator_suffix5589_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cv_qualifier_seq_in_abstract_declarator_suffix5597  */
static	ANTLR3_BITWORD FOLLOW_cv_qualifier_seq_in_abstract_declarator_suffix5597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_cv_qualifier_seq_in_abstract_declarator_suffix5597	= { FOLLOW_cv_qualifier_seq_in_abstract_declarator_suffix5597_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exception_specification_in_abstract_declarator_suffix5602  */
static	ANTLR3_BITWORD FOLLOW_exception_specification_in_abstract_declarator_suffix5602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exception_specification_in_abstract_declarator_suffix5602	= { FOLLOW_exception_specification_in_abstract_declarator_suffix5602_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_exception_specification5625  */
static	ANTLR3_BITWORD FOLLOW_162_in_exception_specification5625_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_exception_specification5625	= { FOLLOW_162_in_exception_specification5625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_exception_specification5629  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_exception_specification5629_bits[]	= { ANTLR3_UINT64_LIT(0x0000008001000000), ANTLR3_UINT64_LIT(0x0000000000000050) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_exception_specification5629	= { FOLLOW_LPAREN_in_exception_specification5629_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_exception_specification5641  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_exception_specification5641_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_exception_specification5641	= { FOLLOW_scope_override_in_exception_specification5641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_exception_specification5644  */
static	ANTLR3_BITWORD FOLLOW_ID_in_exception_specification5644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_exception_specification5644	= { FOLLOW_ID_in_exception_specification5644_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_exception_specification5647  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_exception_specification5647_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_exception_specification5647	= { FOLLOW_COMMA_in_exception_specification5647_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_exception_specification5653  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_exception_specification5653_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_exception_specification5653	= { FOLLOW_scope_override_in_exception_specification5653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_exception_specification5656  */
static	ANTLR3_BITWORD FOLLOW_ID_in_exception_specification5656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_exception_specification5656	= { FOLLOW_ID_in_exception_specification5656_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ELLIPSIS_in_exception_specification5668  */
static	ANTLR3_BITWORD FOLLOW_ELLIPSIS_in_exception_specification5668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ELLIPSIS_in_exception_specification5668	= { FOLLOW_ELLIPSIS_in_exception_specification5668_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_exception_specification5676  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_exception_specification5676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_exception_specification5676	= { FOLLOW_RPAREN_in_exception_specification5676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_template_head5691  */
static	ANTLR3_BITWORD FOLLOW_160_in_template_head5691_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_template_head5691	= { FOLLOW_160_in_template_head5691_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_template_head5695  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_template_head5695_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009040), ANTLR3_UINT64_LIT(0x00007BA15644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_template_head5695	= { FOLLOW_LESSTHAN_in_template_head5695_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_parameter_list_in_template_head5697  */
static	ANTLR3_BITWORD FOLLOW_template_parameter_list_in_template_head5697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_parameter_list_in_template_head5697	= { FOLLOW_template_parameter_list_in_template_head5697_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_template_head5699  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_template_head5699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_template_head5699	= { FOLLOW_GREATERTHAN_in_template_head5699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_parameter_in_template_parameter_list5718  */
static	ANTLR3_BITWORD FOLLOW_template_parameter_in_template_parameter_list5718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_template_parameter_in_template_parameter_list5718	= { FOLLOW_template_parameter_in_template_parameter_list5718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_template_parameter_list5721  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_template_parameter_list5721_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009040), ANTLR3_UINT64_LIT(0x00007BA15644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_template_parameter_list5721	= { FOLLOW_COMMA_in_template_parameter_list5721_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_parameter_in_template_parameter_list5723  */
static	ANTLR3_BITWORD FOLLOW_template_parameter_in_template_parameter_list5723_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_template_parameter_in_template_parameter_list5723	= { FOLLOW_template_parameter_in_template_parameter_list5723_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_parameter_in_template_parameter5758  */
static	ANTLR3_BITWORD FOLLOW_type_parameter_in_template_parameter5758_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_parameter_in_template_parameter5758	= { FOLLOW_type_parameter_in_template_parameter5758_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_declaration_in_template_parameter5776  */
static	ANTLR3_BITWORD FOLLOW_parameter_declaration_in_template_parameter5776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_declaration_in_template_parameter5776	= { FOLLOW_parameter_declaration_in_template_parameter5776_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_parameter_declaration_in_template_parameter5785  */
static	ANTLR3_BITWORD FOLLOW_template_parameter_declaration_in_template_parameter5785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_template_parameter_declaration_in_template_parameter5785	= { FOLLOW_template_parameter_declaration_in_template_parameter5785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type_parameter5809  */
static	ANTLR3_BITWORD FOLLOW_set_in_type_parameter5809_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type_parameter5809	= { FOLLOW_set_in_type_parameter5809_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_type_parameter5822  */
static	ANTLR3_BITWORD FOLLOW_ID_in_type_parameter5822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_type_parameter5822	= { FOLLOW_ID_in_type_parameter5822_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_type_parameter5835  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_type_parameter5835_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x03111E10F0000040), ANTLR3_UINT64_LIT(0x0000538046006089) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_type_parameter5835	= { FOLLOW_ASSIGNEQUAL_in_type_parameter5835_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assigned_type_name_in_type_parameter5837  */
static	ANTLR3_BITWORD FOLLOW_assigned_type_name_in_type_parameter5837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assigned_type_name_in_type_parameter5837	= { FOLLOW_assigned_type_name_in_type_parameter5837_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_head_in_type_parameter5854  */
static	ANTLR3_BITWORD FOLLOW_template_head_in_type_parameter5854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_head_in_type_parameter5854	= { FOLLOW_template_head_in_type_parameter5854_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_121_in_type_parameter5856  */
static	ANTLR3_BITWORD FOLLOW_121_in_type_parameter5856_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_121_in_type_parameter5856	= { FOLLOW_121_in_type_parameter5856_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_type_parameter5865  */
static	ANTLR3_BITWORD FOLLOW_ID_in_type_parameter5865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_type_parameter5865	= { FOLLOW_ID_in_type_parameter5865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_type_parameter5878  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_type_parameter5878_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x03111E10F0000040), ANTLR3_UINT64_LIT(0x0000538046006089) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_type_parameter5878	= { FOLLOW_ASSIGNEQUAL_in_type_parameter5878_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assigned_type_name_in_type_parameter5880  */
static	ANTLR3_BITWORD FOLLOW_assigned_type_name_in_type_parameter5880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assigned_type_name_in_type_parameter5880	= { FOLLOW_assigned_type_name_in_type_parameter5880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_type_in_assigned_type_name5926  */
static	ANTLR3_BITWORD FOLLOW_qualified_type_in_assigned_type_name5926_bits[]	= { ANTLR3_UINT64_LIT(0x0000188000000010), ANTLR3_UINT64_LIT(0x0000E0AF05001040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_type_in_assigned_type_name5926	= { FOLLOW_qualified_type_in_assigned_type_name5926_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_in_assigned_type_name5929  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_in_assigned_type_name5929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_in_assigned_type_name5929	= { FOLLOW_abstract_declarator_in_assigned_type_name5929_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simple_type_specifier_in_assigned_type_name5945  */
static	ANTLR3_BITWORD FOLLOW_simple_type_specifier_in_assigned_type_name5945_bits[]	= { ANTLR3_UINT64_LIT(0x0000188000000010), ANTLR3_UINT64_LIT(0x0000E0AF05001040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_simple_type_specifier_in_assigned_type_name5945	= { FOLLOW_simple_type_specifier_in_assigned_type_name5945_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_in_assigned_type_name5947  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_in_assigned_type_name5947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_in_assigned_type_name5947	= { FOLLOW_abstract_declarator_in_assigned_type_name5947_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_template_parameter_declaration5987  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_template_parameter_declaration5987_bits[]	= { ANTLR3_UINT64_LIT(0x0100188000000050), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_template_parameter_declaration5987	= { FOLLOW_declaration_specifiers_in_template_parameter_declaration5987_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_template_parameter_declaration6006  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_template_parameter_declaration6006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_template_parameter_declaration6006	= { FOLLOW_declarator_in_template_parameter_declaration6006_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_in_template_parameter_declaration6026  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_in_template_parameter_declaration6026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_in_template_parameter_declaration6026	= { FOLLOW_abstract_declarator_in_template_parameter_declaration6026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_template_parameter_declaration6050  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_template_parameter_declaration6050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_template_parameter_declaration6050	= { FOLLOW_declarator_in_template_parameter_declaration6050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ELLIPSIS_in_template_parameter_declaration6062  */
static	ANTLR3_BITWORD FOLLOW_ELLIPSIS_in_template_parameter_declaration6062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_ELLIPSIS_in_template_parameter_declaration6062	= { FOLLOW_ELLIPSIS_in_template_parameter_declaration6062_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_template_parameter_declaration6071  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_template_parameter_declaration6071_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_template_parameter_declaration6071	= { FOLLOW_ASSIGNEQUAL_in_template_parameter_declaration6071_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additive_expression_in_template_parameter_declaration6076  */
static	ANTLR3_BITWORD FOLLOW_additive_expression_in_template_parameter_declaration6076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additive_expression_in_template_parameter_declaration6076	= { FOLLOW_additive_expression_in_template_parameter_declaration6076_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_template_id6099  */
static	ANTLR3_BITWORD FOLLOW_ID_in_template_id6099_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_template_id6099	= { FOLLOW_ID_in_template_id6099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_template_id6101  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_template_id6101_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_template_id6101	= { FOLLOW_LESSTHAN_in_template_id6101_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_argument_list_in_template_id6103  */
static	ANTLR3_BITWORD FOLLOW_template_argument_list_in_template_id6103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_argument_list_in_template_id6103	= { FOLLOW_template_argument_list_in_template_id6103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_template_id6105  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_template_id6105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_template_id6105	= { FOLLOW_GREATERTHAN_in_template_id6105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_argument_in_template_argument_list6120  */
static	ANTLR3_BITWORD FOLLOW_template_argument_in_template_argument_list6120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_template_argument_in_template_argument_list6120	= { FOLLOW_template_argument_in_template_argument_list6120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_template_argument_list6123  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_template_argument_list6123_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_template_argument_list6123	= { FOLLOW_COMMA_in_template_argument_list6123_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_argument_in_template_argument_list6125  */
static	ANTLR3_BITWORD FOLLOW_template_argument_in_template_argument_list6125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_template_argument_in_template_argument_list6125	= { FOLLOW_template_argument_in_template_argument_list6125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_template_argument6154  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_template_argument6154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_template_argument6154	= { FOLLOW_type_id_in_template_argument6154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shift_expression_in_template_argument6162  */
static	ANTLR3_BITWORD FOLLOW_shift_expression_in_template_argument6162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shift_expression_in_template_argument6162	= { FOLLOW_shift_expression_in_template_argument6162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statement_list6187  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statement_list6187_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028012), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statement_list6187	= { FOLLOW_statement_in_statement_list6187_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_declaration_in_statement6234  */
static	ANTLR3_BITWORD FOLLOW_block_declaration_in_statement6234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_block_declaration_in_statement6234	= { FOLLOW_block_declaration_in_statement6234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_declaration_in_statement6262  */
static	ANTLR3_BITWORD FOLLOW_member_declaration_in_statement6262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_member_declaration_in_statement6262	= { FOLLOW_member_declaration_in_statement6262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_declaration_in_statement6289  */
static	ANTLR3_BITWORD FOLLOW_member_declaration_in_statement6289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_member_declaration_in_statement6289	= { FOLLOW_member_declaration_in_statement6289_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labeled_statement_in_statement6306  */
static	ANTLR3_BITWORD FOLLOW_labeled_statement_in_statement6306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labeled_statement_in_statement6306	= { FOLLOW_labeled_statement_in_statement6306_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_case_statement_in_statement6313  */
static	ANTLR3_BITWORD FOLLOW_case_statement_in_statement6313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_case_statement_in_statement6313	= { FOLLOW_case_statement_in_statement6313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_default_statement_in_statement6320  */
static	ANTLR3_BITWORD FOLLOW_default_statement_in_statement6320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_default_statement_in_statement6320	= { FOLLOW_default_statement_in_statement6320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_statement6327  */
static	ANTLR3_BITWORD FOLLOW_expression_in_statement6327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_statement6327	= { FOLLOW_expression_in_statement6327_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement6329  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement6329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement6329	= { FOLLOW_SEMICOLON_in_statement6329_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_statement_in_statement6338  */
static	ANTLR3_BITWORD FOLLOW_compound_statement_in_statement6338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_statement_in_statement6338	= { FOLLOW_compound_statement_in_statement6338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selection_statement_in_statement6345  */
static	ANTLR3_BITWORD FOLLOW_selection_statement_in_statement6345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_selection_statement_in_statement6345	= { FOLLOW_selection_statement_in_statement6345_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iteration_statement_in_statement6352  */
static	ANTLR3_BITWORD FOLLOW_iteration_statement_in_statement6352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iteration_statement_in_statement6352	= { FOLLOW_iteration_statement_in_statement6352_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_jump_statement_in_statement6359  */
static	ANTLR3_BITWORD FOLLOW_jump_statement_in_statement6359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_jump_statement_in_statement6359	= { FOLLOW_jump_statement_in_statement6359_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement6366  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement6366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement6366	= { FOLLOW_SEMICOLON_in_statement6366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_try_block_in_statement6375  */
static	ANTLR3_BITWORD FOLLOW_try_block_in_statement6375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_try_block_in_statement6375	= { FOLLOW_try_block_in_statement6375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throw_statement_in_statement6382  */
static	ANTLR3_BITWORD FOLLOW_throw_statement_in_statement6382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throw_statement_in_statement6382	= { FOLLOW_throw_statement_in_statement6382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_114_in_statement6396  */
static	ANTLR3_BITWORD FOLLOW_114_in_statement6396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_114_in_statement6396	= { FOLLOW_114_in_statement6396_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_113_in_statement6408  */
static	ANTLR3_BITWORD FOLLOW_113_in_statement6408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_113_in_statement6408	= { FOLLOW_113_in_statement6408_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simple_declaration_in_block_declaration6428  */
static	ANTLR3_BITWORD FOLLOW_simple_declaration_in_block_declaration6428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_simple_declaration_in_block_declaration6428	= { FOLLOW_simple_declaration_in_block_declaration6428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_namespace_alias_definition_in_block_declaration6433  */
static	ANTLR3_BITWORD FOLLOW_namespace_alias_definition_in_block_declaration6433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_namespace_alias_definition_in_block_declaration6433	= { FOLLOW_namespace_alias_definition_in_block_declaration6433_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_using_statement_in_block_declaration6438  */
static	ANTLR3_BITWORD FOLLOW_using_statement_in_block_declaration6438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_using_statement_in_block_declaration6438	= { FOLLOW_using_statement_in_block_declaration6438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_simple_declaration6452  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_simple_declaration6452_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_simple_declaration6452	= { FOLLOW_declaration_specifiers_in_simple_declaration6452_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_simple_declaration6455  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_simple_declaration6455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_simple_declaration6455	= { FOLLOW_init_declarator_list_in_simple_declaration6455_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_simple_declaration6459  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_simple_declaration6459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_simple_declaration6459	= { FOLLOW_SEMICOLON_in_simple_declaration6459_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_labeled_statement6476  */
static	ANTLR3_BITWORD FOLLOW_ID_in_labeled_statement6476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_labeled_statement6476	= { FOLLOW_ID_in_labeled_statement6476_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_labeled_statement6478  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_labeled_statement6478_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_labeled_statement6478	= { FOLLOW_COLON_in_labeled_statement6478_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labeled_statement6480  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labeled_statement6480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labeled_statement6480	= { FOLLOW_statement_in_labeled_statement6480_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_118_in_case_statement6492  */
static	ANTLR3_BITWORD FOLLOW_118_in_case_statement6492_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_118_in_case_statement6492	= { FOLLOW_118_in_case_statement6492_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expression_in_case_statement6496  */
static	ANTLR3_BITWORD FOLLOW_constant_expression_in_case_statement6496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expression_in_case_statement6496	= { FOLLOW_constant_expression_in_case_statement6496_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_case_statement6498  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_case_statement6498_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_case_statement6498	= { FOLLOW_COLON_in_case_statement6498_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_case_statement6500  */
static	ANTLR3_BITWORD FOLLOW_statement_in_case_statement6500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_case_statement6500	= { FOLLOW_statement_in_case_statement6500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_default_statement6515  */
static	ANTLR3_BITWORD FOLLOW_125_in_default_statement6515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_default_statement6515	= { FOLLOW_125_in_default_statement6515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_default_statement6517  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_default_statement6517_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_default_statement6517	= { FOLLOW_COLON_in_default_statement6517_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_default_statement6519  */
static	ANTLR3_BITWORD FOLLOW_statement_in_default_statement6519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_default_statement6519	= { FOLLOW_statement_in_default_statement6519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_compound_statement6534  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_compound_statement6534_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C8), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_compound_statement6534	= { FOLLOW_LCURLY_in_compound_statement6534_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_list_in_compound_statement6544  */
static	ANTLR3_BITWORD FOLLOW_statement_list_in_compound_statement6544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_list_in_compound_statement6544	= { FOLLOW_statement_list_in_compound_statement6544_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RCURLY_in_compound_statement6550  */
static	ANTLR3_BITWORD FOLLOW_RCURLY_in_compound_statement6550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RCURLY_in_compound_statement6550	= { FOLLOW_RCURLY_in_compound_statement6550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_selection_statement6573  */
static	ANTLR3_BITWORD FOLLOW_139_in_selection_statement6573_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_selection_statement6573	= { FOLLOW_139_in_selection_statement6573_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_selection_statement6575  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_selection_statement6575_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_selection_statement6575	= { FOLLOW_LPAREN_in_selection_statement6575_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_in_selection_statement6584  */
static	ANTLR3_BITWORD FOLLOW_condition_in_selection_statement6584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_in_selection_statement6584	= { FOLLOW_condition_in_selection_statement6584_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_selection_statement6586  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_selection_statement6586_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_selection_statement6586	= { FOLLOW_RPAREN_in_selection_statement6586_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_selection_statement6594  */
static	ANTLR3_BITWORD FOLLOW_statement_in_selection_statement6594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_selection_statement6594	= { FOLLOW_statement_in_selection_statement6594_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_selection_statement6603  */
static	ANTLR3_BITWORD FOLLOW_130_in_selection_statement6603_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_selection_statement6603	= { FOLLOW_130_in_selection_statement6603_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_selection_statement6609  */
static	ANTLR3_BITWORD FOLLOW_statement_in_selection_statement6609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_selection_statement6609	= { FOLLOW_statement_in_selection_statement6609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_selection_statement6623  */
static	ANTLR3_BITWORD FOLLOW_159_in_selection_statement6623_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_selection_statement6623	= { FOLLOW_159_in_selection_statement6623_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_selection_statement6625  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_selection_statement6625_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_selection_statement6625	= { FOLLOW_LPAREN_in_selection_statement6625_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_in_selection_statement6633  */
static	ANTLR3_BITWORD FOLLOW_condition_in_selection_statement6633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_in_selection_statement6633	= { FOLLOW_condition_in_selection_statement6633_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_selection_statement6635  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_selection_statement6635_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_selection_statement6635	= { FOLLOW_RPAREN_in_selection_statement6635_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_selection_statement6637  */
static	ANTLR3_BITWORD FOLLOW_statement_in_selection_statement6637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_selection_statement6637	= { FOLLOW_statement_in_selection_statement6637_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_iteration_statement6656  */
static	ANTLR3_BITWORD FOLLOW_175_in_iteration_statement6656_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_iteration_statement6656	= { FOLLOW_175_in_iteration_statement6656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_iteration_statement6658  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_iteration_statement6658_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_iteration_statement6658	= { FOLLOW_LPAREN_in_iteration_statement6658_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_in_iteration_statement6666  */
static	ANTLR3_BITWORD FOLLOW_condition_in_iteration_statement6666_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_in_iteration_statement6666	= { FOLLOW_condition_in_iteration_statement6666_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_iteration_statement6668  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_iteration_statement6668_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_iteration_statement6668	= { FOLLOW_RPAREN_in_iteration_statement6668_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_iteration_statement6673  */
static	ANTLR3_BITWORD FOLLOW_statement_in_iteration_statement6673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_iteration_statement6673	= { FOLLOW_statement_in_iteration_statement6673_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_iteration_statement6687  */
static	ANTLR3_BITWORD FOLLOW_127_in_iteration_statement6687_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_iteration_statement6687	= { FOLLOW_127_in_iteration_statement6687_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_iteration_statement6696  */
static	ANTLR3_BITWORD FOLLOW_statement_in_iteration_statement6696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_iteration_statement6696	= { FOLLOW_statement_in_iteration_statement6696_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_iteration_statement6698  */
static	ANTLR3_BITWORD FOLLOW_175_in_iteration_statement6698_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_iteration_statement6698	= { FOLLOW_175_in_iteration_statement6698_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_iteration_statement6702  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_iteration_statement6702_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_iteration_statement6702	= { FOLLOW_LPAREN_in_iteration_statement6702_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_iteration_statement6704  */
static	ANTLR3_BITWORD FOLLOW_expression_in_iteration_statement6704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_iteration_statement6704	= { FOLLOW_expression_in_iteration_statement6704_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_iteration_statement6706  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_iteration_statement6706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_iteration_statement6706	= { FOLLOW_RPAREN_in_iteration_statement6706_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_iteration_statement6715  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_iteration_statement6715_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_iteration_statement6715	= { FOLLOW_SEMICOLON_in_iteration_statement6715_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_iteration_statement6726  */
static	ANTLR3_BITWORD FOLLOW_136_in_iteration_statement6726_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_iteration_statement6726	= { FOLLOW_136_in_iteration_statement6726_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_iteration_statement6728  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_iteration_statement6728_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D0C0), ANTLR3_UINT64_LIT(0x00007FEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_iteration_statement6728	= { FOLLOW_LPAREN_in_iteration_statement6728_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_iteration_statement6743  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_iteration_statement6743_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D0C0), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_iteration_statement6743	= { FOLLOW_declaration_in_iteration_statement6743_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_iteration_statement6751  */
static	ANTLR3_BITWORD FOLLOW_expression_in_iteration_statement6751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_iteration_statement6751	= { FOLLOW_expression_in_iteration_statement6751_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_iteration_statement6755  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_iteration_statement6755_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D0C0), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_iteration_statement6755	= { FOLLOW_SEMICOLON_in_iteration_statement6755_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_in_iteration_statement6766  */
static	ANTLR3_BITWORD FOLLOW_condition_in_iteration_statement6766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_in_iteration_statement6766	= { FOLLOW_condition_in_iteration_statement6766_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_iteration_statement6770  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_iteration_statement6770_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D050), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_iteration_statement6770	= { FOLLOW_SEMICOLON_in_iteration_statement6770_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_iteration_statement6777  */
static	ANTLR3_BITWORD FOLLOW_expression_in_iteration_statement6777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_iteration_statement6777	= { FOLLOW_expression_in_iteration_statement6777_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_iteration_statement6783  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_iteration_statement6783_bits[]	= { ANTLR3_UINT64_LIT(0x1592899180028010), ANTLR3_UINT64_LIT(0xFF7FFFFFFFB0D0C0), ANTLR3_UINT64_LIT(0x0000FFFFFFFFFFFB) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_iteration_statement6783	= { FOLLOW_RPAREN_in_iteration_statement6783_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_iteration_statement6785  */
static	ANTLR3_BITWORD FOLLOW_statement_in_iteration_statement6785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_iteration_statement6785	= { FOLLOW_statement_in_iteration_statement6785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_condition6821  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_condition6821_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_condition6821	= { FOLLOW_declaration_specifiers_in_condition6821_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_condition6823  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_condition6823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_condition6823	= { FOLLOW_declarator_in_condition6823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_condition6825  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_condition6825_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_condition6825	= { FOLLOW_ASSIGNEQUAL_in_condition6825_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_remainder_expression_in_condition6827  */
static	ANTLR3_BITWORD FOLLOW_remainder_expression_in_condition6827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_remainder_expression_in_condition6827	= { FOLLOW_remainder_expression_in_condition6827_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_condition6833  */
static	ANTLR3_BITWORD FOLLOW_expression_in_condition6833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_condition6833	= { FOLLOW_expression_in_condition6833_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_jump_statement6854  */
static	ANTLR3_BITWORD FOLLOW_138_in_jump_statement6854_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_jump_statement6854	= { FOLLOW_138_in_jump_statement6854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_jump_statement6856  */
static	ANTLR3_BITWORD FOLLOW_ID_in_jump_statement6856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_jump_statement6856	= { FOLLOW_ID_in_jump_statement6856_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_jump_statement6858  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_jump_statement6858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_jump_statement6858	= { FOLLOW_SEMICOLON_in_jump_statement6858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_jump_statement6866  */
static	ANTLR3_BITWORD FOLLOW_124_in_jump_statement6866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_jump_statement6866	= { FOLLOW_124_in_jump_statement6866_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_jump_statement6868  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_jump_statement6868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_jump_statement6868	= { FOLLOW_SEMICOLON_in_jump_statement6868_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_117_in_jump_statement6876  */
static	ANTLR3_BITWORD FOLLOW_117_in_jump_statement6876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_117_in_jump_statement6876	= { FOLLOW_117_in_jump_statement6876_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_jump_statement6878  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_jump_statement6878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_jump_statement6878	= { FOLLOW_SEMICOLON_in_jump_statement6878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_jump_statement6890  */
static	ANTLR3_BITWORD FOLLOW_152_in_jump_statement6890_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D0C0), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_jump_statement6890	= { FOLLOW_152_in_jump_statement6890_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_jump_statement6963  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_jump_statement6963_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_jump_statement6963	= { FOLLOW_LPAREN_in_jump_statement6963_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_jump_statement6965  */
static	ANTLR3_BITWORD FOLLOW_ID_in_jump_statement6965_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_jump_statement6965	= { FOLLOW_ID_in_jump_statement6965_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_jump_statement6967  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_jump_statement6967_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D0C0), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_jump_statement6967	= { FOLLOW_RPAREN_in_jump_statement6967_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_jump_statement6970  */
static	ANTLR3_BITWORD FOLLOW_expression_in_jump_statement6970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_jump_statement6970	= { FOLLOW_expression_in_jump_statement6970_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_jump_statement6998  */
static	ANTLR3_BITWORD FOLLOW_expression_in_jump_statement6998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_jump_statement6998	= { FOLLOW_expression_in_jump_statement6998_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_jump_statement7007  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_jump_statement7007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_jump_statement7007	= { FOLLOW_SEMICOLON_in_jump_statement7007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_try_block7029  */
static	ANTLR3_BITWORD FOLLOW_164_in_try_block7029_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_try_block7029	= { FOLLOW_164_in_try_block7029_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_statement_in_try_block7031  */
static	ANTLR3_BITWORD FOLLOW_compound_statement_in_try_block7031_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_statement_in_try_block7031	= { FOLLOW_compound_statement_in_try_block7031_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_handler_in_try_block7034  */
static	ANTLR3_BITWORD FOLLOW_handler_in_try_block7034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_handler_in_try_block7034	= { FOLLOW_handler_in_try_block7034_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_119_in_handler7051  */
static	ANTLR3_BITWORD FOLLOW_119_in_handler7051_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_119_in_handler7051	= { FOLLOW_119_in_handler7051_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_handler7063  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_handler7063_bits[]	= { ANTLR3_UINT64_LIT(0x0100088001000010), ANTLR3_UINT64_LIT(0x0719FFFFFF009040), ANTLR3_UINT64_LIT(0x00007BA05644F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_handler7063	= { FOLLOW_LPAREN_in_handler7063_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exception_declaration_in_handler7065  */
static	ANTLR3_BITWORD FOLLOW_exception_declaration_in_handler7065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_exception_declaration_in_handler7065	= { FOLLOW_exception_declaration_in_handler7065_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_handler7067  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_handler7067_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_handler7067	= { FOLLOW_RPAREN_in_handler7067_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_statement_in_handler7075  */
static	ANTLR3_BITWORD FOLLOW_compound_statement_in_handler7075_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_statement_in_handler7075	= { FOLLOW_compound_statement_in_handler7075_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_declaration_list_in_exception_declaration7094  */
static	ANTLR3_BITWORD FOLLOW_parameter_declaration_list_in_exception_declaration7094_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_declaration_list_in_exception_declaration7094	= { FOLLOW_parameter_declaration_list_in_exception_declaration7094_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_throw_statement7113  */
static	ANTLR3_BITWORD FOLLOW_162_in_throw_statement7113_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D0C0), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_throw_statement7113	= { FOLLOW_162_in_throw_statement7113_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_throw_statement7116  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_throw_statement7116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_throw_statement7116	= { FOLLOW_assignment_expression_in_throw_statement7116_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_throw_statement7121  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_throw_statement7121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_throw_statement7121	= { FOLLOW_SEMICOLON_in_throw_statement7121_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_using_statement7145  */
static	ANTLR3_BITWORD FOLLOW_170_in_using_statement7145_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040), ANTLR3_UINT64_LIT(0x0000008000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_using_statement7145	= { FOLLOW_170_in_using_statement7145_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_using_statement7150  */
static	ANTLR3_BITWORD FOLLOW_144_in_using_statement7150_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_using_statement7150	= { FOLLOW_144_in_using_statement7150_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_using_statement7156  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_using_statement7156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_using_statement7156	= { FOLLOW_qualified_id_in_using_statement7156_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_using_statement7165  */
static	ANTLR3_BITWORD FOLLOW_167_in_using_statement7165_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_using_statement7165	= { FOLLOW_167_in_using_statement7165_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_using_statement7173  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_using_statement7173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_using_statement7173	= { FOLLOW_qualified_id_in_using_statement7173_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_using_statement7183  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_using_statement7183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_using_statement7183	= { FOLLOW_SEMICOLON_in_using_statement7183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_expression7214  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_expression7214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_expression7214	= { FOLLOW_assignment_expression_in_expression7214_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression7217  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expression7217_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression7217	= { FOLLOW_COMMA_in_expression7217_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_expression7219  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_expression7219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_expression7219	= { FOLLOW_assignment_expression_in_expression7219_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditional_expression_in_assignment_expression7237  */
static	ANTLR3_BITWORD FOLLOW_conditional_expression_in_assignment_expression7237_bits[]	= { ANTLR3_UINT64_LIT(0x0809000000080AC2), ANTLR3_UINT64_LIT(0x0000000000010A00) };
static  ANTLR3_BITSET_LIST FOLLOW_conditional_expression_in_assignment_expression7237	= { FOLLOW_conditional_expression_in_assignment_expression7237_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignment_expression7247  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignment_expression7247_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignment_expression7247	= { FOLLOW_set_in_assignment_expression7247_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_remainder_expression_in_assignment_expression7286  */
static	ANTLR3_BITWORD FOLLOW_remainder_expression_in_assignment_expression7286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_remainder_expression_in_assignment_expression7286	= { FOLLOW_remainder_expression_in_assignment_expression7286_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_remainder_expression7334  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_remainder_expression7334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_remainder_expression7334	= { FOLLOW_assignment_expression_in_remainder_expression7334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_remainder_expression7349  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_remainder_expression7349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_remainder_expression7349	= { FOLLOW_assignment_expression_in_remainder_expression7349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_or_expression_in_conditional_expression7368  */
static	ANTLR3_BITWORD FOLLOW_logical_or_expression_in_conditional_expression7368_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_or_expression_in_conditional_expression7368	= { FOLLOW_logical_or_expression_in_conditional_expression7368_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUESTIONMARK_in_conditional_expression7373  */
static	ANTLR3_BITWORD FOLLOW_QUESTIONMARK_in_conditional_expression7373_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_QUESTIONMARK_in_conditional_expression7373	= { FOLLOW_QUESTIONMARK_in_conditional_expression7373_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_conditional_expression7375  */
static	ANTLR3_BITWORD FOLLOW_expression_in_conditional_expression7375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_conditional_expression7375	= { FOLLOW_expression_in_conditional_expression7375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_conditional_expression7377  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_conditional_expression7377_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_conditional_expression7377	= { FOLLOW_COLON_in_conditional_expression7377_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditional_expression_in_conditional_expression7379  */
static	ANTLR3_BITWORD FOLLOW_conditional_expression_in_conditional_expression7379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditional_expression_in_conditional_expression7379	= { FOLLOW_conditional_expression_in_conditional_expression7379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditional_expression_in_constant_expression7396  */
static	ANTLR3_BITWORD FOLLOW_conditional_expression_in_constant_expression7396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditional_expression_in_constant_expression7396	= { FOLLOW_conditional_expression_in_constant_expression7396_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_logical_or_expression7411  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression7411_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_logical_or_expression7411	= { FOLLOW_logical_and_expression_in_logical_or_expression7411_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logical_or_expression7414  */
static	ANTLR3_BITWORD FOLLOW_OR_in_logical_or_expression7414_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logical_or_expression7414	= { FOLLOW_OR_in_logical_or_expression7414_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_logical_or_expression7416  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression7416_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_logical_or_expression7416	= { FOLLOW_logical_and_expression_in_logical_or_expression7416_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_inclusive_or_expression_in_logical_and_expression7434  */
static	ANTLR3_BITWORD FOLLOW_inclusive_or_expression_in_logical_and_expression7434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_inclusive_or_expression_in_logical_and_expression7434	= { FOLLOW_inclusive_or_expression_in_logical_and_expression7434_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logical_and_expression7437  */
static	ANTLR3_BITWORD FOLLOW_AND_in_logical_and_expression7437_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logical_and_expression7437	= { FOLLOW_AND_in_logical_and_expression7437_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_inclusive_or_expression_in_logical_and_expression7439  */
static	ANTLR3_BITWORD FOLLOW_inclusive_or_expression_in_logical_and_expression7439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_inclusive_or_expression_in_logical_and_expression7439	= { FOLLOW_inclusive_or_expression_in_logical_and_expression7439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exclusive_or_expression_in_inclusive_or_expression7457  */
static	ANTLR3_BITWORD FOLLOW_exclusive_or_expression_in_inclusive_or_expression7457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000102) };
static  ANTLR3_BITSET_LIST FOLLOW_exclusive_or_expression_in_inclusive_or_expression7457	= { FOLLOW_exclusive_or_expression_in_inclusive_or_expression7457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BITWISEOR_in_inclusive_or_expression7460  */
static	ANTLR3_BITWORD FOLLOW_BITWISEOR_in_inclusive_or_expression7460_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_BITWISEOR_in_inclusive_or_expression7460	= { FOLLOW_BITWISEOR_in_inclusive_or_expression7460_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exclusive_or_expression_in_inclusive_or_expression7462  */
static	ANTLR3_BITWORD FOLLOW_exclusive_or_expression_in_inclusive_or_expression7462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000102) };
static  ANTLR3_BITSET_LIST FOLLOW_exclusive_or_expression_in_inclusive_or_expression7462	= { FOLLOW_exclusive_or_expression_in_inclusive_or_expression7462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_and_expression_in_exclusive_or_expression7479  */
static	ANTLR3_BITWORD FOLLOW_and_expression_in_exclusive_or_expression7479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000402) };
static  ANTLR3_BITSET_LIST FOLLOW_and_expression_in_exclusive_or_expression7479	= { FOLLOW_and_expression_in_exclusive_or_expression7479_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BITWISEXOR_in_exclusive_or_expression7482  */
static	ANTLR3_BITWORD FOLLOW_BITWISEXOR_in_exclusive_or_expression7482_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_BITWISEXOR_in_exclusive_or_expression7482	= { FOLLOW_BITWISEXOR_in_exclusive_or_expression7482_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_and_expression_in_exclusive_or_expression7484  */
static	ANTLR3_BITWORD FOLLOW_and_expression_in_exclusive_or_expression7484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000402) };
static  ANTLR3_BITSET_LIST FOLLOW_and_expression_in_exclusive_or_expression7484	= { FOLLOW_and_expression_in_exclusive_or_expression7484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expression_in_and_expression7501  */
static	ANTLR3_BITWORD FOLLOW_equality_expression_in_and_expression7501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000012) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expression_in_and_expression7501	= { FOLLOW_equality_expression_in_and_expression7501_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AMPERSAND_in_and_expression7504  */
static	ANTLR3_BITWORD FOLLOW_AMPERSAND_in_and_expression7504_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_AMPERSAND_in_and_expression7504	= { FOLLOW_AMPERSAND_in_and_expression7504_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expression_in_and_expression7506  */
static	ANTLR3_BITWORD FOLLOW_equality_expression_in_and_expression7506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000012) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expression_in_and_expression7506	= { FOLLOW_equality_expression_in_and_expression7506_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_equality_expression7523  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_equality_expression7523_bits[]	= { ANTLR3_UINT64_LIT(0x0020000002000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_equality_expression7523	= { FOLLOW_relational_expression_in_equality_expression7523_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_equality_expression7527  */
static	ANTLR3_BITWORD FOLLOW_set_in_equality_expression7527_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_equality_expression7527	= { FOLLOW_set_in_equality_expression7527_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_equality_expression7533  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_equality_expression7533_bits[]	= { ANTLR3_UINT64_LIT(0x0020000002000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_equality_expression7533	= { FOLLOW_relational_expression_in_equality_expression7533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shift_expression_in_relational_expression7550  */
static	ANTLR3_BITWORD FOLLOW_shift_expression_in_relational_expression7550_bits[]	= { ANTLR3_UINT64_LIT(0x0000060C00000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shift_expression_in_relational_expression7550	= { FOLLOW_shift_expression_in_relational_expression7550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_relational_expression7571  */
static	ANTLR3_BITWORD FOLLOW_set_in_relational_expression7571_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_relational_expression7571	= { FOLLOW_set_in_relational_expression7571_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shift_expression_in_relational_expression7622  */
static	ANTLR3_BITWORD FOLLOW_shift_expression_in_relational_expression7622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shift_expression_in_relational_expression7622	= { FOLLOW_shift_expression_in_relational_expression7622_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additive_expression_in_shift_expression7642  */
static	ANTLR3_BITWORD FOLLOW_additive_expression_in_shift_expression7642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000500) };
static  ANTLR3_BITSET_LIST FOLLOW_additive_expression_in_shift_expression7642	= { FOLLOW_additive_expression_in_shift_expression7642_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_shift_expression7645  */
static	ANTLR3_BITWORD FOLLOW_set_in_shift_expression7645_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_shift_expression7645	= { FOLLOW_set_in_shift_expression7645_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additive_expression_in_shift_expression7653  */
static	ANTLR3_BITWORD FOLLOW_additive_expression_in_shift_expression7653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000500) };
static  ANTLR3_BITSET_LIST FOLLOW_additive_expression_in_shift_expression7653	= { FOLLOW_additive_expression_in_shift_expression7653_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicative_expression_in_additive_expression7670  */
static	ANTLR3_BITWORD FOLLOW_multiplicative_expression_in_additive_expression7670_bits[]	= { ANTLR3_UINT64_LIT(0x0400800000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicative_expression_in_additive_expression7670	= { FOLLOW_multiplicative_expression_in_additive_expression7670_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_additive_expression7679  */
static	ANTLR3_BITWORD FOLLOW_set_in_additive_expression7679_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_additive_expression7679	= { FOLLOW_set_in_additive_expression7679_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicative_expression_in_additive_expression7687  */
static	ANTLR3_BITWORD FOLLOW_multiplicative_expression_in_additive_expression7687_bits[]	= { ANTLR3_UINT64_LIT(0x0400800000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicative_expression_in_additive_expression7687	= { FOLLOW_multiplicative_expression_in_additive_expression7687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pm_expression_in_multiplicative_expression7713  */
static	ANTLR3_BITWORD FOLLOW_pm_expression_in_multiplicative_expression7713_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000040002), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_pm_expression_in_multiplicative_expression7713	= { FOLLOW_pm_expression_in_multiplicative_expression7713_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_multiplicative_expression7722  */
static	ANTLR3_BITWORD FOLLOW_set_in_multiplicative_expression7722_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_multiplicative_expression7722	= { FOLLOW_set_in_multiplicative_expression7722_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pm_expression_in_multiplicative_expression7730  */
static	ANTLR3_BITWORD FOLLOW_pm_expression_in_multiplicative_expression7730_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000040002), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_pm_expression_in_multiplicative_expression7730	= { FOLLOW_pm_expression_in_multiplicative_expression7730_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cast_expression_in_pm_expression7750  */
static	ANTLR3_BITWORD FOLLOW_cast_expression_in_pm_expression7750_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000200002) };
static  ANTLR3_BITSET_LIST FOLLOW_cast_expression_in_pm_expression7750	= { FOLLOW_cast_expression_in_pm_expression7750_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_pm_expression7754  */
static	ANTLR3_BITWORD FOLLOW_set_in_pm_expression7754_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_pm_expression7754	= { FOLLOW_set_in_pm_expression7754_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cast_expression_in_pm_expression7760  */
static	ANTLR3_BITWORD FOLLOW_cast_expression_in_pm_expression7760_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000200002) };
static  ANTLR3_BITSET_LIST FOLLOW_cast_expression_in_pm_expression7760	= { FOLLOW_cast_expression_in_pm_expression7760_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_cast_expression7828  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_cast_expression7828_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_cast_expression7828	= { FOLLOW_LPAREN_in_cast_expression7828_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_cast_expression7830  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_cast_expression7830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_cast_expression7830	= { FOLLOW_type_id_in_cast_expression7830_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_cast_expression7832  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_cast_expression7832_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_cast_expression7832	= { FOLLOW_RPAREN_in_cast_expression7832_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_cast_expression7834  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_cast_expression7834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_cast_expression7834	= { FOLLOW_unary_expression_in_cast_expression7834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_cast_expression7858  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_cast_expression7858_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_cast_expression7858	= { FOLLOW_LPAREN_in_cast_expression7858_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_cast_expression7860  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_cast_expression7860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_cast_expression7860	= { FOLLOW_type_id_in_cast_expression7860_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_cast_expression7862  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_cast_expression7862_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_cast_expression7862	= { FOLLOW_RPAREN_in_cast_expression7862_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cast_expression_in_cast_expression7864  */
static	ANTLR3_BITWORD FOLLOW_cast_expression_in_cast_expression7864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cast_expression_in_cast_expression7864	= { FOLLOW_cast_expression_in_cast_expression7864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_cast_expression7873  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_cast_expression7873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_cast_expression7873	= { FOLLOW_unary_expression_in_cast_expression7873_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfix_expression_in_unary_expression7904  */
static	ANTLR3_BITWORD FOLLOW_postfix_expression_in_unary_expression7904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfix_expression_in_unary_expression7904	= { FOLLOW_postfix_expression_in_unary_expression7904_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_unary_expression7914  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_unary_expression7914_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_unary_expression7914	= { FOLLOW_PLUSPLUS_in_unary_expression7914_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_unary_expression7916  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_unary_expression7916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_unary_expression7916	= { FOLLOW_unary_expression_in_unary_expression7916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_unary_expression7926  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_unary_expression7926_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_unary_expression7926	= { FOLLOW_MINUSMINUS_in_unary_expression7926_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_unary_expression7928  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_unary_expression7928_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_unary_expression7928	= { FOLLOW_unary_expression_in_unary_expression7928_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_operator_in_unary_expression7938  */
static	ANTLR3_BITWORD FOLLOW_unary_operator_in_unary_expression7938_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_operator_in_unary_expression7938	= { FOLLOW_unary_operator_in_unary_expression7938_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cast_expression_in_unary_expression7940  */
static	ANTLR3_BITWORD FOLLOW_cast_expression_in_unary_expression7940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cast_expression_in_unary_expression7940	= { FOLLOW_cast_expression_in_unary_expression7940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_unary_expression7950  */
static	ANTLR3_BITWORD FOLLOW_set_in_unary_expression7950_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_unary_expression7950	= { FOLLOW_set_in_unary_expression7950_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_unary_expression7981  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_unary_expression7981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_unary_expression7981	= { FOLLOW_unary_expression_in_unary_expression7981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_unary_expression7992  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_unary_expression7992_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_unary_expression7992	= { FOLLOW_LPAREN_in_unary_expression7992_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_unary_expression7994  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_unary_expression7994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_unary_expression7994	= { FOLLOW_type_id_in_unary_expression7994_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_unary_expression7996  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_unary_expression7996_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_unary_expression7996	= { FOLLOW_RPAREN_in_unary_expression7996_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_unary_expression8014  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_unary_expression8014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_unary_expression8014	= { FOLLOW_SCOPE_in_unary_expression8014_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_new_expression_in_unary_expression8022  */
static	ANTLR3_BITWORD FOLLOW_new_expression_in_unary_expression8022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_new_expression_in_unary_expression8022	= { FOLLOW_new_expression_in_unary_expression8022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delete_expression_in_unary_expression8028  */
static	ANTLR3_BITWORD FOLLOW_delete_expression_in_unary_expression8028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_delete_expression_in_unary_expression8028	= { FOLLOW_delete_expression_in_unary_expression8028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simple_type_specifier_in_postfix_expression8098  */
static	ANTLR3_BITWORD FOLLOW_simple_type_specifier_in_postfix_expression8098_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_simple_type_specifier_in_postfix_expression8098	= { FOLLOW_simple_type_specifier_in_postfix_expression8098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_postfix_expression8100  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_postfix_expression8100_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D050), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_postfix_expression8100	= { FOLLOW_LPAREN_in_postfix_expression8100_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_postfix_expression8108  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_postfix_expression8108_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_postfix_expression8108	= { FOLLOW_RPAREN_in_postfix_expression8108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_postfix_expression8110  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_postfix_expression8110_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D050), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_postfix_expression8110	= { FOLLOW_LPAREN_in_postfix_expression8110_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_postfix_expression8113  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_postfix_expression8113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_postfix_expression8113	= { FOLLOW_expression_list_in_postfix_expression8113_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_postfix_expression8117  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_postfix_expression8117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_postfix_expression8117	= { FOLLOW_RPAREN_in_postfix_expression8117_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_postfix_expression8127  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_postfix_expression8127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_postfix_expression8127	= { FOLLOW_expression_list_in_postfix_expression8127_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_postfix_expression8131  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_postfix_expression8131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_postfix_expression8131	= { FOLLOW_RPAREN_in_postfix_expression8131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_postfix_expression8139  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_postfix_expression8139_bits[]	= { ANTLR3_UINT64_LIT(0x0180089180028000), ANTLR3_UINT64_LIT(0x0B111E10F030C040), ANTLR3_UINT64_LIT(0x000053CA668060CB) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_postfix_expression8139	= { FOLLOW_DOT_in_postfix_expression8139_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfix_expression_in_postfix_expression8141  */
static	ANTLR3_BITWORD FOLLOW_postfix_expression_in_postfix_expression8141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfix_expression_in_postfix_expression8141	= { FOLLOW_postfix_expression_in_postfix_expression8141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_expression_in_postfix_expression8156  */
static	ANTLR3_BITWORD FOLLOW_primary_expression_in_postfix_expression8156_bits[]	= { ANTLR3_UINT64_LIT(0x3002180000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_expression_in_postfix_expression8156	= { FOLLOW_primary_expression_in_postfix_expression8156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_postfix_expression8172  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_postfix_expression8172_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_postfix_expression8172	= { FOLLOW_LSQUARE_in_postfix_expression8172_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_postfix_expression8174  */
static	ANTLR3_BITWORD FOLLOW_expression_in_postfix_expression8174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_postfix_expression8174	= { FOLLOW_expression_in_postfix_expression8174_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQUARE_in_postfix_expression8176  */
static	ANTLR3_BITWORD FOLLOW_RSQUARE_in_postfix_expression8176_bits[]	= { ANTLR3_UINT64_LIT(0x3002180000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQUARE_in_postfix_expression8176	= { FOLLOW_RSQUARE_in_postfix_expression8176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_postfix_expression8184  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_postfix_expression8184_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D050), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_postfix_expression8184	= { FOLLOW_LPAREN_in_postfix_expression8184_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_postfix_expression8187  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_postfix_expression8187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_postfix_expression8187	= { FOLLOW_expression_list_in_postfix_expression8187_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_postfix_expression8191  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_postfix_expression8191_bits[]	= { ANTLR3_UINT64_LIT(0x3002180000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_postfix_expression8191	= { FOLLOW_RPAREN_in_postfix_expression8191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_postfix_expression8200  */
static	ANTLR3_BITWORD FOLLOW_set_in_postfix_expression8200_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_postfix_expression8200	= { FOLLOW_set_in_postfix_expression8200_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_postfix_expression8207  */
static	ANTLR3_BITWORD FOLLOW_160_in_postfix_expression8207_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_postfix_expression8207	= { FOLLOW_160_in_postfix_expression8207_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_id_expression_in_postfix_expression8211  */
static	ANTLR3_BITWORD FOLLOW_id_expression_in_postfix_expression8211_bits[]	= { ANTLR3_UINT64_LIT(0x3002180000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_id_expression_in_postfix_expression8211	= { FOLLOW_id_expression_in_postfix_expression8211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUSPLUS_in_postfix_expression8219  */
static	ANTLR3_BITWORD FOLLOW_PLUSPLUS_in_postfix_expression8219_bits[]	= { ANTLR3_UINT64_LIT(0x3002180000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUSPLUS_in_postfix_expression8219	= { FOLLOW_PLUSPLUS_in_postfix_expression8219_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUSMINUS_in_postfix_expression8228  */
static	ANTLR3_BITWORD FOLLOW_MINUSMINUS_in_postfix_expression8228_bits[]	= { ANTLR3_UINT64_LIT(0x3002180000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUSMINUS_in_postfix_expression8228	= { FOLLOW_MINUSMINUS_in_postfix_expression8228_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_postfix_expression8245  */
static	ANTLR3_BITWORD FOLLOW_set_in_postfix_expression8245_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_postfix_expression8245	= { FOLLOW_set_in_postfix_expression8245_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_postfix_expression8257  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_postfix_expression8257_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07111E10F0000040), ANTLR3_UINT64_LIT(0x0000538046006089) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_postfix_expression8257	= { FOLLOW_LESSTHAN_in_postfix_expression8257_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_postfix_expression8260  */
static	ANTLR3_BITWORD FOLLOW_122_in_postfix_expression8260_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x03111E10F0000040), ANTLR3_UINT64_LIT(0x0000538046006089) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_postfix_expression8260	= { FOLLOW_122_in_postfix_expression8260_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_specifier_in_postfix_expression8268  */
static	ANTLR3_BITWORD FOLLOW_type_specifier_in_postfix_expression8268_bits[]	= { ANTLR3_UINT64_LIT(0x0000008400000010), ANTLR3_UINT64_LIT(0x0000E0AF05001040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_specifier_in_postfix_expression8268	= { FOLLOW_type_specifier_in_postfix_expression8268_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ptr_operator_in_postfix_expression8271  */
static	ANTLR3_BITWORD FOLLOW_ptr_operator_in_postfix_expression8271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ptr_operator_in_postfix_expression8271	= { FOLLOW_ptr_operator_in_postfix_expression8271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_postfix_expression8275  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_postfix_expression8275_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_postfix_expression8275	= { FOLLOW_GREATERTHAN_in_postfix_expression8275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_postfix_expression8279  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_postfix_expression8279_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_postfix_expression8279	= { FOLLOW_LPAREN_in_postfix_expression8279_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_postfix_expression8281  */
static	ANTLR3_BITWORD FOLLOW_expression_in_postfix_expression8281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_postfix_expression8281	= { FOLLOW_expression_in_postfix_expression8281_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_postfix_expression8283  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_postfix_expression8283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_postfix_expression8283	= { FOLLOW_RPAREN_in_postfix_expression8283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_postfix_expression8290  */
static	ANTLR3_BITWORD FOLLOW_166_in_postfix_expression8290_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_postfix_expression8290	= { FOLLOW_166_in_postfix_expression8290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_postfix_expression8295  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_postfix_expression8295_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_postfix_expression8295	= { FOLLOW_LPAREN_in_postfix_expression8295_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_postfix_expression8302  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_postfix_expression8302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_postfix_expression8302	= { FOLLOW_type_id_in_postfix_expression8302_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_postfix_expression8304  */
static	ANTLR3_BITWORD FOLLOW_expression_in_postfix_expression8304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_postfix_expression8304	= { FOLLOW_expression_in_postfix_expression8304_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_postfix_expression8307  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_postfix_expression8307_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000100002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_postfix_expression8307	= { FOLLOW_RPAREN_in_postfix_expression8307_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_postfix_expression8313  */
static	ANTLR3_BITWORD FOLLOW_set_in_postfix_expression8313_bits[]	= { ANTLR3_UINT64_LIT(0x0180089180028000), ANTLR3_UINT64_LIT(0x0B111E10F030C040), ANTLR3_UINT64_LIT(0x000053CA668060CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_postfix_expression8313	= { FOLLOW_set_in_postfix_expression8313_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfix_expression_in_postfix_expression8319  */
static	ANTLR3_BITWORD FOLLOW_postfix_expression_in_postfix_expression8319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfix_expression_in_postfix_expression8319	= { FOLLOW_postfix_expression_in_postfix_expression8319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_id_expression_in_primary_expression8335  */
static	ANTLR3_BITWORD FOLLOW_id_expression_in_primary_expression8335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_id_expression_in_primary_expression8335	= { FOLLOW_id_expression_in_primary_expression8335_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primary_expression8340  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primary_expression8340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primary_expression8340	= { FOLLOW_literal_in_primary_expression8340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_primary_expression8345  */
static	ANTLR3_BITWORD FOLLOW_161_in_primary_expression8345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_primary_expression8345	= { FOLLOW_161_in_primary_expression8345_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_primary_expression8350  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_primary_expression8350_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_primary_expression8350	= { FOLLOW_LPAREN_in_primary_expression8350_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primary_expression8352  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primary_expression8352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primary_expression8352	= { FOLLOW_expression_in_primary_expression8352_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_primary_expression8354  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_primary_expression8354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_primary_expression8354	= { FOLLOW_RPAREN_in_primary_expression8354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_id_expression8381  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_id_expression8381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_id_expression8381	= { FOLLOW_qualified_id_in_id_expression8381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OCTALINT_in_literal8403  */
static	ANTLR3_BITWORD FOLLOW_OCTALINT_in_literal8403_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OCTALINT_in_literal8403	= { FOLLOW_OCTALINT_in_literal8403_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DECIMALINT_in_literal8408  */
static	ANTLR3_BITWORD FOLLOW_DECIMALINT_in_literal8408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_DECIMALINT_in_literal8408	= { FOLLOW_DECIMALINT_in_literal8408_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HEXADECIMALINT_in_literal8413  */
static	ANTLR3_BITWORD FOLLOW_HEXADECIMALINT_in_literal8413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_HEXADECIMALINT_in_literal8413	= { FOLLOW_HEXADECIMALINT_in_literal8413_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CharLiteral_in_literal8418  */
static	ANTLR3_BITWORD FOLLOW_CharLiteral_in_literal8418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CharLiteral_in_literal8418	= { FOLLOW_CharLiteral_in_literal8418_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WCharLiteral_in_literal8423  */
static	ANTLR3_BITWORD FOLLOW_WCharLiteral_in_literal8423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_WCharLiteral_in_literal8423	= { FOLLOW_WCharLiteral_in_literal8423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOATONE_in_literal8438  */
static	ANTLR3_BITWORD FOLLOW_FLOATONE_in_literal8438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOATONE_in_literal8438	= { FOLLOW_FLOATONE_in_literal8438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOATTWO_in_literal8443  */
static	ANTLR3_BITWORD FOLLOW_FLOATTWO_in_literal8443_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOATTWO_in_literal8443	= { FOLLOW_FLOATTWO_in_literal8443_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_literal8448  */
static	ANTLR3_BITWORD FOLLOW_163_in_literal8448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_literal8448	= { FOLLOW_163_in_literal8448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_literal8453  */
static	ANTLR3_BITWORD FOLLOW_134_in_literal8453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_literal8453	= { FOLLOW_134_in_literal8453_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_new_expression8524  */
static	ANTLR3_BITWORD FOLLOW_145_in_new_expression8524_bits[]	= { ANTLR3_UINT64_LIT(0x0000088000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_new_expression8524	= { FOLLOW_145_in_new_expression8524_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_new_expression8544  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_new_expression8544_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_new_expression8544	= { FOLLOW_LPAREN_in_new_expression8544_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_new_expression8546  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_new_expression8546_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_new_expression8546	= { FOLLOW_expression_list_in_new_expression8546_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_new_expression8548  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_new_expression8548_bits[]	= { ANTLR3_UINT64_LIT(0x0000088000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_new_expression8548	= { FOLLOW_RPAREN_in_new_expression8548_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_new_expression8567  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_new_expression8567_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_new_expression8567	= { FOLLOW_LPAREN_in_new_expression8567_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_new_expression8569  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_new_expression8569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_new_expression8569	= { FOLLOW_type_id_in_new_expression8569_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_new_expression8571  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_new_expression8571_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_new_expression8571	= { FOLLOW_RPAREN_in_new_expression8571_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_new_type_id_in_new_expression8576  */
static	ANTLR3_BITWORD FOLLOW_new_type_id_in_new_expression8576_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_new_type_id_in_new_expression8576	= { FOLLOW_new_type_id_in_new_expression8576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_new_initializer_in_new_expression8590  */
static	ANTLR3_BITWORD FOLLOW_new_initializer_in_new_expression8590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_new_initializer_in_new_expression8590	= { FOLLOW_new_initializer_in_new_expression8590_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_new_initializer8610  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_new_initializer8610_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D050), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_new_initializer8610	= { FOLLOW_LPAREN_in_new_initializer8610_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_new_initializer8613  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_new_initializer8613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_new_initializer8613	= { FOLLOW_expression_list_in_new_initializer8613_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_new_initializer8617  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_new_initializer8617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_new_initializer8617	= { FOLLOW_RPAREN_in_new_initializer8617_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_new_type_id8632  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_new_type_id8632_bits[]	= { ANTLR3_UINT64_LIT(0x0000108000000012), ANTLR3_UINT64_LIT(0x0000E0AF05001040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_new_type_id8632	= { FOLLOW_declaration_specifiers_in_new_type_id8632_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_new_declarator_in_new_type_id8642  */
static	ANTLR3_BITWORD FOLLOW_new_declarator_in_new_type_id8642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_new_declarator_in_new_type_id8642	= { FOLLOW_new_declarator_in_new_type_id8642_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ptr_operator_in_new_declarator8663  */
static	ANTLR3_BITWORD FOLLOW_ptr_operator_in_new_declarator8663_bits[]	= { ANTLR3_UINT64_LIT(0x0000108000000012), ANTLR3_UINT64_LIT(0x0000E0AF05001040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ptr_operator_in_new_declarator8663	= { FOLLOW_ptr_operator_in_new_declarator8663_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_new_declarator_in_new_declarator8671  */
static	ANTLR3_BITWORD FOLLOW_new_declarator_in_new_declarator8671_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_new_declarator_in_new_declarator8671	= { FOLLOW_new_declarator_in_new_declarator8671_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_direct_new_declarator_in_new_declarator8681  */
static	ANTLR3_BITWORD FOLLOW_direct_new_declarator_in_new_declarator8681_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_direct_new_declarator_in_new_declarator8681	= { FOLLOW_direct_new_declarator_in_new_declarator8681_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_direct_new_declarator8710  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_direct_new_declarator8710_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_direct_new_declarator8710	= { FOLLOW_LSQUARE_in_direct_new_declarator8710_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_direct_new_declarator8712  */
static	ANTLR3_BITWORD FOLLOW_expression_in_direct_new_declarator8712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_direct_new_declarator8712	= { FOLLOW_expression_in_direct_new_declarator8712_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQUARE_in_direct_new_declarator8714  */
static	ANTLR3_BITWORD FOLLOW_RSQUARE_in_direct_new_declarator8714_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQUARE_in_direct_new_declarator8714	= { FOLLOW_RSQUARE_in_direct_new_declarator8714_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AMPERSAND_in_ptr_operator8756  */
static	ANTLR3_BITWORD FOLLOW_AMPERSAND_in_ptr_operator8756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_AMPERSAND_in_ptr_operator8756	= { FOLLOW_AMPERSAND_in_ptr_operator8756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_ptr_operator8767  */
static	ANTLR3_BITWORD FOLLOW_set_in_ptr_operator8767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_ptr_operator8767	= { FOLLOW_set_in_ptr_operator8767_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_ptr_operator8779  */
static	ANTLR3_BITWORD FOLLOW_set_in_ptr_operator8779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_ptr_operator8779	= { FOLLOW_set_in_ptr_operator8779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_ptr_operator8791  */
static	ANTLR3_BITWORD FOLLOW_set_in_ptr_operator8791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_ptr_operator8791	= { FOLLOW_set_in_ptr_operator8791_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_ptr_operator8803  */
static	ANTLR3_BITWORD FOLLOW_96_in_ptr_operator8803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_ptr_operator8803	= { FOLLOW_96_in_ptr_operator8803_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_ptr_operator8811  */
static	ANTLR3_BITWORD FOLLOW_set_in_ptr_operator8811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_ptr_operator8811	= { FOLLOW_set_in_ptr_operator8811_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_ptr_operator8825  */
static	ANTLR3_BITWORD FOLLOW_set_in_ptr_operator8825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_ptr_operator8825	= { FOLLOW_set_in_ptr_operator8825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_ptr_operator8858  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_ptr_operator8858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_ptr_operator8858	= { FOLLOW_scope_override_in_ptr_operator8858_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STAR_in_ptr_operator8861  */
static	ANTLR3_BITWORD FOLLOW_STAR_in_ptr_operator8861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_STAR_in_ptr_operator8861	= { FOLLOW_STAR_in_ptr_operator8861_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cv_qualifier_seq_in_ptr_operator8865  */
static	ANTLR3_BITWORD FOLLOW_cv_qualifier_seq_in_ptr_operator8865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cv_qualifier_seq_in_ptr_operator8865	= { FOLLOW_cv_qualifier_seq_in_ptr_operator8865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_ptr_to_member8910  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_ptr_to_member8910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_ptr_to_member8910	= { FOLLOW_scope_override_in_ptr_to_member8910_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STAR_in_ptr_to_member8913  */
static	ANTLR3_BITWORD FOLLOW_STAR_in_ptr_to_member8913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_STAR_in_ptr_to_member8913	= { FOLLOW_STAR_in_ptr_to_member8913_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cv_qualifier_seq_in_ptr_to_member8918  */
static	ANTLR3_BITWORD FOLLOW_cv_qualifier_seq_in_ptr_to_member8918_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cv_qualifier_seq_in_ptr_to_member8918	= { FOLLOW_cv_qualifier_seq_in_ptr_to_member8918_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_qualifier_in_cv_qualifier_seq8944  */
static	ANTLR3_BITWORD FOLLOW_type_qualifier_in_cv_qualifier_seq8944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_qualifier_in_cv_qualifier_seq8944	= { FOLLOW_type_qualifier_in_cv_qualifier_seq8944_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_scope_override8978  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_scope_override8978_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_scope_override8978	= { FOLLOW_SCOPE_in_scope_override8978_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_scope_override9016  */
static	ANTLR3_BITWORD FOLLOW_ID_in_scope_override9016_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_scope_override9016	= { FOLLOW_ID_in_scope_override9016_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_scope_override9023  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_scope_override9023_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_scope_override9023	= { FOLLOW_LESSTHAN_in_scope_override9023_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_argument_list_in_scope_override9025  */
static	ANTLR3_BITWORD FOLLOW_template_argument_list_in_scope_override9025_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_argument_list_in_scope_override9025	= { FOLLOW_template_argument_list_in_scope_override9025_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_scope_override9027  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_scope_override9027_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_scope_override9027	= { FOLLOW_GREATERTHAN_in_scope_override9027_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_scope_override9033  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_scope_override9033_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_scope_override9033	= { FOLLOW_SCOPE_in_scope_override9033_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_scope_override9041  */
static	ANTLR3_BITWORD FOLLOW_160_in_scope_override9041_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_scope_override9041	= { FOLLOW_160_in_scope_override9041_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_scope_override9076  */
static	ANTLR3_BITWORD FOLLOW_ID_in_scope_override9076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_scope_override9076	= { FOLLOW_ID_in_scope_override9076_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_scope_override9083  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_scope_override9083_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_scope_override9083	= { FOLLOW_SCOPE_in_scope_override9083_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_scope_override9091  */
static	ANTLR3_BITWORD FOLLOW_160_in_scope_override9091_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_scope_override9091	= { FOLLOW_160_in_scope_override9091_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_delete_expression9125  */
static	ANTLR3_BITWORD FOLLOW_126_in_delete_expression9125_bits[]	= { ANTLR3_UINT64_LIT(0x1592989180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_delete_expression9125	= { FOLLOW_126_in_delete_expression9125_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_delete_expression9128  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_delete_expression9128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_delete_expression9128	= { FOLLOW_LSQUARE_in_delete_expression9128_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQUARE_in_delete_expression9130  */
static	ANTLR3_BITWORD FOLLOW_RSQUARE_in_delete_expression9130_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQUARE_in_delete_expression9130	= { FOLLOW_RSQUARE_in_delete_expression9130_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cast_expression_in_delete_expression9134  */
static	ANTLR3_BITWORD FOLLOW_cast_expression_in_delete_expression9134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cast_expression_in_delete_expression9134	= { FOLLOW_cast_expression_in_delete_expression9134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_expression_list9150  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_expression_list9150_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_expression_list9150	= { FOLLOW_assignment_expression_in_expression_list9150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression_list9153  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expression_list9153_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression_list9153	= { FOLLOW_COMMA_in_expression_list9153_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_expression_list9155  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_expression_list9155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_expression_list9155	= { FOLLOW_assignment_expression_in_expression_list9155_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_optor9192  */
static	ANTLR3_BITWORD FOLLOW_145_in_optor9192_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_optor9192	= { FOLLOW_145_in_optor9192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_optor9205  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_optor9205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_optor9205	= { FOLLOW_LSQUARE_in_optor9205_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQUARE_in_optor9207  */
static	ANTLR3_BITWORD FOLLOW_RSQUARE_in_optor9207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQUARE_in_optor9207	= { FOLLOW_RSQUARE_in_optor9207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_optor9225  */
static	ANTLR3_BITWORD FOLLOW_126_in_optor9225_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_optor9225	= { FOLLOW_126_in_optor9225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_optor9238  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_optor9238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_optor9238	= { FOLLOW_LSQUARE_in_optor9238_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQUARE_in_optor9240  */
static	ANTLR3_BITWORD FOLLOW_RSQUARE_in_optor9240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQUARE_in_optor9240	= { FOLLOW_RSQUARE_in_optor9240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_optor9256  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_optor9256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_optor9256	= { FOLLOW_LPAREN_in_optor9256_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_optor9258  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_optor9258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_optor9258	= { FOLLOW_RPAREN_in_optor9258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_optor9271  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_optor9271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_optor9271	= { FOLLOW_LSQUARE_in_optor9271_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQUARE_in_optor9273  */
static	ANTLR3_BITWORD FOLLOW_RSQUARE_in_optor9273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQUARE_in_optor9273	= { FOLLOW_RSQUARE_in_optor9273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_optor_simple_tokclass_in_optor9290  */
static	ANTLR3_BITWORD FOLLOW_optor_simple_tokclass_in_optor9290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_optor_simple_tokclass_in_optor9290	= { FOLLOW_optor_simple_tokclass_in_optor9290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_specifier_in_optor9308  */
static	ANTLR3_BITWORD FOLLOW_type_specifier_in_optor9308_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_specifier_in_optor9308	= { FOLLOW_type_specifier_in_optor9308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_optor9310  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_optor9310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_optor9310	= { FOLLOW_LPAREN_in_optor9310_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_optor9312  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_optor9312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_optor9312	= { FOLLOW_RPAREN_in_optor9312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_synpred1_CPP_grammar_155  */
static	ANTLR3_BITWORD FOLLOW_160_in_synpred1_CPP_grammar_155_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_synpred1_CPP_grammar_155	= { FOLLOW_160_in_synpred1_CPP_grammar_155_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_synpred1_CPP_grammar_157  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_synpred1_CPP_grammar_157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_synpred1_CPP_grammar_157	= { FOLLOW_LESSTHAN_in_synpred1_CPP_grammar_157_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_synpred1_CPP_grammar_159  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_synpred1_CPP_grammar_159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_synpred1_CPP_grammar_159	= { FOLLOW_GREATERTHAN_in_synpred1_CPP_grammar_159_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_synpred2_CPP_grammar_187  */
static	ANTLR3_BITWORD FOLLOW_165_in_synpred2_CPP_grammar_187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_synpred2_CPP_grammar_187	= { FOLLOW_165_in_synpred2_CPP_grammar_187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_synpred3_CPP_grammar_199  */
static	ANTLR3_BITWORD FOLLOW_165_in_synpred3_CPP_grammar_199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_synpred3_CPP_grammar_199	= { FOLLOW_165_in_synpred3_CPP_grammar_199_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_synpred3_CPP_grammar_201  */
static	ANTLR3_BITWORD FOLLOW_131_in_synpred3_CPP_grammar_201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_synpred3_CPP_grammar_201	= { FOLLOW_131_in_synpred3_CPP_grammar_201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred4_CPP_grammar_236  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred4_CPP_grammar_236_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred4_CPP_grammar_236	= { FOLLOW_declaration_specifiers_in_synpred4_CPP_grammar_236_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred4_CPP_grammar_238  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred4_CPP_grammar_238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred4_CPP_grammar_238	= { FOLLOW_function_declarator_in_synpred4_CPP_grammar_238_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred4_CPP_grammar_241  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred4_CPP_grammar_241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred4_CPP_grammar_241	= { FOLLOW_SEMICOLON_in_synpred4_CPP_grammar_241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred5_CPP_grammar_264  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred5_CPP_grammar_264_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred5_CPP_grammar_264	= { FOLLOW_declaration_specifiers_in_synpred5_CPP_grammar_264_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_synpred5_CPP_grammar_267  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_synpred5_CPP_grammar_267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_synpred5_CPP_grammar_267	= { FOLLOW_init_declarator_list_in_synpred5_CPP_grammar_267_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred5_CPP_grammar_271  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred5_CPP_grammar_271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred5_CPP_grammar_271	= { FOLLOW_SEMICOLON_in_synpred5_CPP_grammar_271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_synpred6_CPP_grammar_293  */
static	ANTLR3_BITWORD FOLLOW_165_in_synpred6_CPP_grammar_293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x0000010040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_synpred6_CPP_grammar_293	= { FOLLOW_165_in_synpred6_CPP_grammar_293_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_specifier_in_synpred6_CPP_grammar_295  */
static	ANTLR3_BITWORD FOLLOW_class_specifier_in_synpred6_CPP_grammar_295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_class_specifier_in_synpred6_CPP_grammar_295	= { FOLLOW_class_specifier_in_synpred6_CPP_grammar_295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_head_in_synpred7_CPP_grammar_340  */
static	ANTLR3_BITWORD FOLLOW_template_head_in_synpred7_CPP_grammar_340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_template_head_in_synpred7_CPP_grammar_340	= { FOLLOW_template_head_in_synpred7_CPP_grammar_340_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_synpred7_CPP_grammar_347  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_synpred7_CPP_grammar_347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_synpred7_CPP_grammar_347	= { FOLLOW_function_specifier_in_synpred7_CPP_grammar_347_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_specifier_in_synpred7_CPP_grammar_351  */
static	ANTLR3_BITWORD FOLLOW_class_specifier_in_synpred7_CPP_grammar_351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_class_specifier_in_synpred7_CPP_grammar_351	= { FOLLOW_class_specifier_in_synpred7_CPP_grammar_351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred8_CPP_grammar_413  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred8_CPP_grammar_413_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred8_CPP_grammar_413	= { FOLLOW_declaration_specifiers_in_synpred8_CPP_grammar_413_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_synpred8_CPP_grammar_416  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_synpred8_CPP_grammar_416_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_synpred8_CPP_grammar_416	= { FOLLOW_init_declarator_list_in_synpred8_CPP_grammar_416_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred8_CPP_grammar_420  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred8_CPP_grammar_420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred8_CPP_grammar_420	= { FOLLOW_SEMICOLON_in_synpred8_CPP_grammar_420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred9_CPP_grammar_459  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred9_CPP_grammar_459_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred9_CPP_grammar_459	= { FOLLOW_declaration_specifiers_in_synpred9_CPP_grammar_459_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred9_CPP_grammar_461  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred9_CPP_grammar_461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred9_CPP_grammar_461	= { FOLLOW_function_declarator_in_synpred9_CPP_grammar_461_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred9_CPP_grammar_464  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred9_CPP_grammar_464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred9_CPP_grammar_464	= { FOLLOW_SEMICOLON_in_synpred9_CPP_grammar_464_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred10_CPP_grammar_493  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred10_CPP_grammar_493_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred10_CPP_grammar_493	= { FOLLOW_declaration_specifiers_in_synpred10_CPP_grammar_493_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred10_CPP_grammar_495  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred10_CPP_grammar_495_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred10_CPP_grammar_495	= { FOLLOW_function_declarator_in_synpred10_CPP_grammar_495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred10_CPP_grammar_498  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred10_CPP_grammar_498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred10_CPP_grammar_498	= { FOLLOW_LCURLY_in_synpred10_CPP_grammar_498_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_decl_spec_in_synpred11_CPP_grammar_556  */
static	ANTLR3_BITWORD FOLLOW_ctor_decl_spec_in_synpred11_CPP_grammar_556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_decl_spec_in_synpred11_CPP_grammar_556	= { FOLLOW_ctor_decl_spec_in_synpred11_CPP_grammar_556_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_synpred12_CPP_grammar_600  */
static	ANTLR3_BITWORD FOLLOW_131_in_synpred12_CPP_grammar_600_bits[]	= { ANTLR3_UINT64_LIT(0x0000018000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_synpred12_CPP_grammar_600	= { FOLLOW_131_in_synpred12_CPP_grammar_600_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synpred12_CPP_grammar_603  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synpred12_CPP_grammar_603_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synpred12_CPP_grammar_603	= { FOLLOW_ID_in_synpred12_CPP_grammar_603_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred12_CPP_grammar_607  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred12_CPP_grammar_607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred12_CPP_grammar_607	= { FOLLOW_LCURLY_in_synpred12_CPP_grammar_607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_head_in_synpred13_CPP_grammar_638  */
static	ANTLR3_BITWORD FOLLOW_template_head_in_synpred13_CPP_grammar_638_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000010008008040), ANTLR3_UINT64_LIT(0x0000080000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_head_in_synpred13_CPP_grammar_638	= { FOLLOW_template_head_in_synpred13_CPP_grammar_638_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_head_in_synpred13_CPP_grammar_642  */
static	ANTLR3_BITWORD FOLLOW_dtor_head_in_synpred13_CPP_grammar_642_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_head_in_synpred13_CPP_grammar_642	= { FOLLOW_dtor_head_in_synpred13_CPP_grammar_642_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred13_CPP_grammar_645  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred13_CPP_grammar_645_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred13_CPP_grammar_645	= { FOLLOW_LCURLY_in_synpred13_CPP_grammar_645_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_decl_spec_in_synpred14_CPP_grammar_692  */
static	ANTLR3_BITWORD FOLLOW_ctor_decl_spec_in_synpred14_CPP_grammar_692_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_decl_spec_in_synpred14_CPP_grammar_692	= { FOLLOW_ctor_decl_spec_in_synpred14_CPP_grammar_692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_synpred15_CPP_grammar_726  */
static	ANTLR3_BITWORD FOLLOW_140_in_synpred15_CPP_grammar_726_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_synpred15_CPP_grammar_726	= { FOLLOW_140_in_synpred15_CPP_grammar_726_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_synpred15_CPP_grammar_730  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_synpred15_CPP_grammar_730_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_synpred15_CPP_grammar_730	= { FOLLOW_scope_override_in_synpred15_CPP_grammar_730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conversion_function_decl_or_def_in_synpred15_CPP_grammar_734  */
static	ANTLR3_BITWORD FOLLOW_conversion_function_decl_or_def_in_synpred15_CPP_grammar_734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conversion_function_decl_or_def_in_synpred15_CPP_grammar_734	= { FOLLOW_conversion_function_decl_or_def_in_synpred15_CPP_grammar_734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred16_CPP_grammar_771  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred16_CPP_grammar_771_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred16_CPP_grammar_771	= { FOLLOW_declaration_specifiers_in_synpred16_CPP_grammar_771_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred16_CPP_grammar_773  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred16_CPP_grammar_773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred16_CPP_grammar_773	= { FOLLOW_function_declarator_in_synpred16_CPP_grammar_773_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred16_CPP_grammar_776  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred16_CPP_grammar_776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred16_CPP_grammar_776	= { FOLLOW_SEMICOLON_in_synpred16_CPP_grammar_776_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred17_CPP_grammar_805  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred17_CPP_grammar_805_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred17_CPP_grammar_805	= { FOLLOW_declaration_specifiers_in_synpred17_CPP_grammar_805_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred17_CPP_grammar_807  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred17_CPP_grammar_807_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred17_CPP_grammar_807	= { FOLLOW_function_declarator_in_synpred17_CPP_grammar_807_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred17_CPP_grammar_810  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred17_CPP_grammar_810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred17_CPP_grammar_810	= { FOLLOW_LCURLY_in_synpred17_CPP_grammar_810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred18_CPP_grammar_832  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred18_CPP_grammar_832_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred18_CPP_grammar_832	= { FOLLOW_function_declarator_in_synpred18_CPP_grammar_832_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred18_CPP_grammar_835  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred18_CPP_grammar_835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred18_CPP_grammar_835	= { FOLLOW_LCURLY_in_synpred18_CPP_grammar_835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred19_CPP_grammar_857  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred19_CPP_grammar_857_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred19_CPP_grammar_857	= { FOLLOW_declaration_specifiers_in_synpred19_CPP_grammar_857_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred19_CPP_grammar_859  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred19_CPP_grammar_859_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007FA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred19_CPP_grammar_859	= { FOLLOW_function_declarator_in_synpred19_CPP_grammar_859_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_synpred19_CPP_grammar_862  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_synpred19_CPP_grammar_862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_synpred19_CPP_grammar_862	= { FOLLOW_declaration_in_synpred19_CPP_grammar_862_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred20_CPP_grammar_883  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred20_CPP_grammar_883_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007FA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred20_CPP_grammar_883	= { FOLLOW_function_declarator_in_synpred20_CPP_grammar_883_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_synpred20_CPP_grammar_886  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_synpred20_CPP_grammar_886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_synpred20_CPP_grammar_886	= { FOLLOW_declaration_in_synpred20_CPP_grammar_886_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_synpred21_CPP_grammar_908  */
static	ANTLR3_BITWORD FOLLOW_133_in_synpred21_CPP_grammar_908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_synpred21_CPP_grammar_908	= { FOLLOW_133_in_synpred21_CPP_grammar_908_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_synpred21_CPP_grammar_917  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_synpred21_CPP_grammar_917_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_synpred21_CPP_grammar_917	= { FOLLOW_function_specifier_in_synpred21_CPP_grammar_917_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_specifier_in_synpred21_CPP_grammar_921  */
static	ANTLR3_BITWORD FOLLOW_class_specifier_in_synpred21_CPP_grammar_921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_class_specifier_in_synpred21_CPP_grammar_921	= { FOLLOW_class_specifier_in_synpred21_CPP_grammar_921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred22_CPP_grammar_1015  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred22_CPP_grammar_1015_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred22_CPP_grammar_1015	= { FOLLOW_declaration_specifiers_in_synpred22_CPP_grammar_1015_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_synpred22_CPP_grammar_1018  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_synpred22_CPP_grammar_1018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_synpred22_CPP_grammar_1018	= { FOLLOW_init_declarator_list_in_synpred22_CPP_grammar_1018_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred22_CPP_grammar_1022  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred22_CPP_grammar_1022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred22_CPP_grammar_1022	= { FOLLOW_SEMICOLON_in_synpred22_CPP_grammar_1022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_synpred23_CPP_grammar_1151  */
static	ANTLR3_BITWORD FOLLOW_160_in_synpred23_CPP_grammar_1151_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_synpred23_CPP_grammar_1151	= { FOLLOW_160_in_synpred23_CPP_grammar_1151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_synpred23_CPP_grammar_1153  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_synpred23_CPP_grammar_1153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_synpred23_CPP_grammar_1153	= { FOLLOW_LESSTHAN_in_synpred23_CPP_grammar_1153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_synpred23_CPP_grammar_1155  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_synpred23_CPP_grammar_1155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_synpred23_CPP_grammar_1155	= { FOLLOW_GREATERTHAN_in_synpred23_CPP_grammar_1155_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_synpred24_CPP_grammar_1189  */
static	ANTLR3_BITWORD FOLLOW_165_in_synpred24_CPP_grammar_1189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_synpred24_CPP_grammar_1189	= { FOLLOW_165_in_synpred24_CPP_grammar_1189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_synpred25_CPP_grammar_1201  */
static	ANTLR3_BITWORD FOLLOW_165_in_synpred25_CPP_grammar_1201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_synpred25_CPP_grammar_1201	= { FOLLOW_165_in_synpred25_CPP_grammar_1201_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_synpred25_CPP_grammar_1203  */
static	ANTLR3_BITWORD FOLLOW_131_in_synpred25_CPP_grammar_1203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_synpred25_CPP_grammar_1203	= { FOLLOW_131_in_synpred25_CPP_grammar_1203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred26_CPP_grammar_1238  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred26_CPP_grammar_1238_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred26_CPP_grammar_1238	= { FOLLOW_declaration_specifiers_in_synpred26_CPP_grammar_1238_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred26_CPP_grammar_1240  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred26_CPP_grammar_1240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred26_CPP_grammar_1240	= { FOLLOW_function_declarator_in_synpred26_CPP_grammar_1240_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred26_CPP_grammar_1243  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred26_CPP_grammar_1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred26_CPP_grammar_1243	= { FOLLOW_SEMICOLON_in_synpred26_CPP_grammar_1243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred27_CPP_grammar_1270  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred27_CPP_grammar_1270_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred27_CPP_grammar_1270	= { FOLLOW_declaration_specifiers_in_synpred27_CPP_grammar_1270_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_synpred27_CPP_grammar_1273  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_synpred27_CPP_grammar_1273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_synpred27_CPP_grammar_1273	= { FOLLOW_init_declarator_list_in_synpred27_CPP_grammar_1273_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred27_CPP_grammar_1277  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred27_CPP_grammar_1277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred27_CPP_grammar_1277	= { FOLLOW_SEMICOLON_in_synpred27_CPP_grammar_1277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_synpred28_CPP_grammar_1303  */
static	ANTLR3_BITWORD FOLLOW_165_in_synpred28_CPP_grammar_1303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x0000010040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_synpred28_CPP_grammar_1303	= { FOLLOW_165_in_synpred28_CPP_grammar_1303_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_specifier_in_synpred28_CPP_grammar_1305  */
static	ANTLR3_BITWORD FOLLOW_class_specifier_in_synpred28_CPP_grammar_1305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_class_specifier_in_synpred28_CPP_grammar_1305	= { FOLLOW_class_specifier_in_synpred28_CPP_grammar_1305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_head_in_synpred29_CPP_grammar_1353  */
static	ANTLR3_BITWORD FOLLOW_template_head_in_synpred29_CPP_grammar_1353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_template_head_in_synpred29_CPP_grammar_1353	= { FOLLOW_template_head_in_synpred29_CPP_grammar_1353_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_synpred29_CPP_grammar_1360  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_synpred29_CPP_grammar_1360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_synpred29_CPP_grammar_1360	= { FOLLOW_function_specifier_in_synpred29_CPP_grammar_1360_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_specifier_in_synpred29_CPP_grammar_1364  */
static	ANTLR3_BITWORD FOLLOW_class_specifier_in_synpred29_CPP_grammar_1364_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_class_specifier_in_synpred29_CPP_grammar_1364	= { FOLLOW_class_specifier_in_synpred29_CPP_grammar_1364_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred30_CPP_grammar_1428  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred30_CPP_grammar_1428_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred30_CPP_grammar_1428	= { FOLLOW_declaration_specifiers_in_synpred30_CPP_grammar_1428_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_synpred30_CPP_grammar_1431  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_synpred30_CPP_grammar_1431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_synpred30_CPP_grammar_1431	= { FOLLOW_init_declarator_list_in_synpred30_CPP_grammar_1431_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred30_CPP_grammar_1435  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred30_CPP_grammar_1435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred30_CPP_grammar_1435	= { FOLLOW_SEMICOLON_in_synpred30_CPP_grammar_1435_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred31_CPP_grammar_1470  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred31_CPP_grammar_1470_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred31_CPP_grammar_1470	= { FOLLOW_declaration_specifiers_in_synpred31_CPP_grammar_1470_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred31_CPP_grammar_1472  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred31_CPP_grammar_1472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred31_CPP_grammar_1472	= { FOLLOW_function_declarator_in_synpred31_CPP_grammar_1472_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred31_CPP_grammar_1475  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred31_CPP_grammar_1475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred31_CPP_grammar_1475	= { FOLLOW_SEMICOLON_in_synpred31_CPP_grammar_1475_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred32_CPP_grammar_1503  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred32_CPP_grammar_1503_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred32_CPP_grammar_1503	= { FOLLOW_declaration_specifiers_in_synpred32_CPP_grammar_1503_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred32_CPP_grammar_1505  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred32_CPP_grammar_1505_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred32_CPP_grammar_1505	= { FOLLOW_function_declarator_in_synpred32_CPP_grammar_1505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred32_CPP_grammar_1508  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred32_CPP_grammar_1508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred32_CPP_grammar_1508	= { FOLLOW_LCURLY_in_synpred32_CPP_grammar_1508_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_decl_spec_in_synpred33_CPP_grammar_1536  */
static	ANTLR3_BITWORD FOLLOW_ctor_decl_spec_in_synpred33_CPP_grammar_1536_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_decl_spec_in_synpred33_CPP_grammar_1536	= { FOLLOW_ctor_decl_spec_in_synpred33_CPP_grammar_1536_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_declarator_in_synpred33_CPP_grammar_1549  */
static	ANTLR3_BITWORD FOLLOW_ctor_declarator_in_synpred33_CPP_grammar_1549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_declarator_in_synpred33_CPP_grammar_1549	= { FOLLOW_ctor_declarator_in_synpred33_CPP_grammar_1549_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred33_CPP_grammar_1552  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred33_CPP_grammar_1552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred33_CPP_grammar_1552	= { FOLLOW_SEMICOLON_in_synpred33_CPP_grammar_1552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_decl_spec_in_synpred34_CPP_grammar_1597  */
static	ANTLR3_BITWORD FOLLOW_ctor_decl_spec_in_synpred34_CPP_grammar_1597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_decl_spec_in_synpred34_CPP_grammar_1597	= { FOLLOW_ctor_decl_spec_in_synpred34_CPP_grammar_1597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_synpred35_CPP_grammar_1682  */
static	ANTLR3_BITWORD FOLLOW_131_in_synpred35_CPP_grammar_1682_bits[]	= { ANTLR3_UINT64_LIT(0x0000018000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_synpred35_CPP_grammar_1682	= { FOLLOW_131_in_synpred35_CPP_grammar_1682_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synpred35_CPP_grammar_1685  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synpred35_CPP_grammar_1685_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synpred35_CPP_grammar_1685	= { FOLLOW_ID_in_synpred35_CPP_grammar_1685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred35_CPP_grammar_1689  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred35_CPP_grammar_1689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred35_CPP_grammar_1689	= { FOLLOW_LCURLY_in_synpred35_CPP_grammar_1689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_decl_spec_in_synpred36_CPP_grammar_1720  */
static	ANTLR3_BITWORD FOLLOW_ctor_decl_spec_in_synpred36_CPP_grammar_1720_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_decl_spec_in_synpred36_CPP_grammar_1720	= { FOLLOW_ctor_decl_spec_in_synpred36_CPP_grammar_1720_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_declarator_in_synpred36_CPP_grammar_1731  */
static	ANTLR3_BITWORD FOLLOW_ctor_declarator_in_synpred36_CPP_grammar_1731_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_declarator_in_synpred36_CPP_grammar_1731	= { FOLLOW_ctor_declarator_in_synpred36_CPP_grammar_1731_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred36_CPP_grammar_1734  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred36_CPP_grammar_1734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred36_CPP_grammar_1734	= { FOLLOW_SEMICOLON_in_synpred36_CPP_grammar_1734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_decl_spec_in_synpred37_CPP_grammar_1780  */
static	ANTLR3_BITWORD FOLLOW_ctor_decl_spec_in_synpred37_CPP_grammar_1780_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_decl_spec_in_synpred37_CPP_grammar_1780	= { FOLLOW_ctor_decl_spec_in_synpred37_CPP_grammar_1780_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctor_declarator_in_synpred37_CPP_grammar_1790  */
static	ANTLR3_BITWORD FOLLOW_ctor_declarator_in_synpred37_CPP_grammar_1790_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ctor_declarator_in_synpred37_CPP_grammar_1790	= { FOLLOW_ctor_declarator_in_synpred37_CPP_grammar_1790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred37_CPP_grammar_1796  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred37_CPP_grammar_1796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred37_CPP_grammar_1796	= { FOLLOW_set_in_synpred37_CPP_grammar_1796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_head_in_synpred38_CPP_grammar_1856  */
static	ANTLR3_BITWORD FOLLOW_dtor_head_in_synpred38_CPP_grammar_1856_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_head_in_synpred38_CPP_grammar_1856	= { FOLLOW_dtor_head_in_synpred38_CPP_grammar_1856_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred38_CPP_grammar_1859  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred38_CPP_grammar_1859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred38_CPP_grammar_1859	= { FOLLOW_SEMICOLON_in_synpred38_CPP_grammar_1859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dtor_head_in_synpred39_CPP_grammar_1891  */
static	ANTLR3_BITWORD FOLLOW_dtor_head_in_synpred39_CPP_grammar_1891_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dtor_head_in_synpred39_CPP_grammar_1891	= { FOLLOW_dtor_head_in_synpred39_CPP_grammar_1891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred39_CPP_grammar_1894  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred39_CPP_grammar_1894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred39_CPP_grammar_1894	= { FOLLOW_LCURLY_in_synpred39_CPP_grammar_1894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred40_CPP_grammar_1919  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred40_CPP_grammar_1919_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred40_CPP_grammar_1919	= { FOLLOW_declaration_specifiers_in_synpred40_CPP_grammar_1919_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred40_CPP_grammar_1921  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred40_CPP_grammar_1921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred40_CPP_grammar_1921	= { FOLLOW_function_declarator_in_synpred40_CPP_grammar_1921_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred40_CPP_grammar_1924  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred40_CPP_grammar_1924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred40_CPP_grammar_1924	= { FOLLOW_SEMICOLON_in_synpred40_CPP_grammar_1924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred41_CPP_grammar_1956  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred41_CPP_grammar_1956_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred41_CPP_grammar_1956	= { FOLLOW_declaration_specifiers_in_synpred41_CPP_grammar_1956_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred41_CPP_grammar_1958  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred41_CPP_grammar_1958_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred41_CPP_grammar_1958	= { FOLLOW_function_declarator_in_synpred41_CPP_grammar_1958_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred41_CPP_grammar_1961  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred41_CPP_grammar_1961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred41_CPP_grammar_1961	= { FOLLOW_LCURLY_in_synpred41_CPP_grammar_1961_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_synpred42_CPP_grammar_1985  */
static	ANTLR3_BITWORD FOLLOW_137_in_synpred42_CPP_grammar_1985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_synpred42_CPP_grammar_1985	= { FOLLOW_137_in_synpred42_CPP_grammar_1985_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_synpred42_CPP_grammar_1994  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_synpred42_CPP_grammar_1994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200010008000000), ANTLR3_UINT64_LIT(0x0000090040001010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_synpred42_CPP_grammar_1994	= { FOLLOW_function_specifier_in_synpred42_CPP_grammar_1994_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_specifier_in_synpred42_CPP_grammar_1998  */
static	ANTLR3_BITWORD FOLLOW_class_specifier_in_synpred42_CPP_grammar_1998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_class_specifier_in_synpred42_CPP_grammar_1998	= { FOLLOW_class_specifier_in_synpred42_CPP_grammar_1998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred43_CPP_grammar_2041  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred43_CPP_grammar_2041_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000001010), ANTLR3_UINT64_LIT(0x0000E0AF050090C0), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred43_CPP_grammar_2041	= { FOLLOW_declaration_specifiers_in_synpred43_CPP_grammar_2041_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_declarator_list_in_synpred43_CPP_grammar_2044  */
static	ANTLR3_BITWORD FOLLOW_init_declarator_list_in_synpred43_CPP_grammar_2044_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_init_declarator_list_in_synpred43_CPP_grammar_2044	= { FOLLOW_init_declarator_list_in_synpred43_CPP_grammar_2044_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred43_CPP_grammar_2048  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred43_CPP_grammar_2048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred43_CPP_grammar_2048	= { FOLLOW_SEMICOLON_in_synpred43_CPP_grammar_2048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_synpred44_CPP_grammar_2075  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_synpred44_CPP_grammar_2075_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E1AF0D009040), ANTLR3_UINT64_LIT(0x0000080000041010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_synpred44_CPP_grammar_2075	= { FOLLOW_function_specifier_in_synpred44_CPP_grammar_2075_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred44_CPP_grammar_2079  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred44_CPP_grammar_2079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred44_CPP_grammar_2079	= { FOLLOW_function_declarator_in_synpred44_CPP_grammar_2079_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred44_CPP_grammar_2082  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred44_CPP_grammar_2082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred44_CPP_grammar_2082	= { FOLLOW_SEMICOLON_in_synpred44_CPP_grammar_2082_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_specifier_in_synpred45_CPP_grammar_2122  */
static	ANTLR3_BITWORD FOLLOW_function_specifier_in_synpred45_CPP_grammar_2122_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E1AF0D009040), ANTLR3_UINT64_LIT(0x0000080000041010) };
static  ANTLR3_BITSET_LIST FOLLOW_function_specifier_in_synpred45_CPP_grammar_2122	= { FOLLOW_function_specifier_in_synpred45_CPP_grammar_2122_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_declarator_in_synpred45_CPP_grammar_2126  */
static	ANTLR3_BITWORD FOLLOW_function_declarator_in_synpred45_CPP_grammar_2126_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_declarator_in_synpred45_CPP_grammar_2126	= { FOLLOW_function_declarator_in_synpred45_CPP_grammar_2126_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred45_CPP_grammar_2129  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred45_CPP_grammar_2129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred45_CPP_grammar_2129	= { FOLLOW_LCURLY_in_synpred45_CPP_grammar_2129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_synpred46_CPP_grammar_2165  */
static	ANTLR3_BITWORD FOLLOW_140_in_synpred46_CPP_grammar_2165_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_synpred46_CPP_grammar_2165	= { FOLLOW_140_in_synpred46_CPP_grammar_2165_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conversion_function_decl_or_def_in_synpred46_CPP_grammar_2169  */
static	ANTLR3_BITWORD FOLLOW_conversion_function_decl_or_def_in_synpred46_CPP_grammar_2169_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conversion_function_decl_or_def_in_synpred46_CPP_grammar_2169	= { FOLLOW_conversion_function_decl_or_def_in_synpred46_CPP_grammar_2169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_synpred47_CPP_grammar_2203  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_synpred47_CPP_grammar_2203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_synpred47_CPP_grammar_2203	= { FOLLOW_qualified_id_in_synpred47_CPP_grammar_2203_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred47_CPP_grammar_2206  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred47_CPP_grammar_2206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred47_CPP_grammar_2206	= { FOLLOW_SEMICOLON_in_synpred47_CPP_grammar_2206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_synpred48_CPP_grammar_2428  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_synpred48_CPP_grammar_2428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_synpred48_CPP_grammar_2428	= { FOLLOW_declaration_in_synpred48_CPP_grammar_2428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_synpred49_CPP_grammar_2476  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_synpred49_CPP_grammar_2476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_synpred49_CPP_grammar_2476	= { FOLLOW_declaration_in_synpred49_CPP_grammar_2476_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_synpred50_CPP_grammar_2525  */
static	ANTLR3_BITWORD FOLLOW_133_in_synpred50_CPP_grammar_2525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_synpred50_CPP_grammar_2525	= { FOLLOW_133_in_synpred50_CPP_grammar_2525_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_StringLiteral_in_synpred50_CPP_grammar_2527  */
static	ANTLR3_BITWORD FOLLOW_StringLiteral_in_synpred50_CPP_grammar_2527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_StringLiteral_in_synpred50_CPP_grammar_2527	= { FOLLOW_StringLiteral_in_synpred50_CPP_grammar_2527_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred51_CPP_grammar_3533  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred51_CPP_grammar_3533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred51_CPP_grammar_3533	= { FOLLOW_SEMICOLON_in_synpred51_CPP_grammar_3533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_declarator_in_synpred51_CPP_grammar_3535  */
static	ANTLR3_BITWORD FOLLOW_member_declarator_in_synpred51_CPP_grammar_3535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_member_declarator_in_synpred51_CPP_grammar_3535	= { FOLLOW_member_declarator_in_synpred51_CPP_grammar_3535_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_synpred52_CPP_grammar_3991  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_synpred52_CPP_grammar_3991_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_synpred52_CPP_grammar_3991	= { FOLLOW_LESSTHAN_in_synpred52_CPP_grammar_3991_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_argument_list_in_synpred52_CPP_grammar_3993  */
static	ANTLR3_BITWORD FOLLOW_template_argument_list_in_synpred52_CPP_grammar_3993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_argument_list_in_synpred52_CPP_grammar_3993	= { FOLLOW_template_argument_list_in_synpred52_CPP_grammar_3993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_synpred52_CPP_grammar_3995  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_synpred52_CPP_grammar_3995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_synpred52_CPP_grammar_3995	= { FOLLOW_GREATERTHAN_in_synpred52_CPP_grammar_3995_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synpred53_CPP_grammar_4116  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synpred53_CPP_grammar_4116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synpred53_CPP_grammar_4116	= { FOLLOW_ID_in_synpred53_CPP_grammar_4116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_synpred53_CPP_grammar_4120  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_synpred53_CPP_grammar_4120_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_synpred53_CPP_grammar_4120	= { FOLLOW_COLON_in_synpred53_CPP_grammar_4120_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expression_in_synpred53_CPP_grammar_4122  */
static	ANTLR3_BITWORD FOLLOW_constant_expression_in_synpred53_CPP_grammar_4122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expression_in_synpred53_CPP_grammar_4122	= { FOLLOW_constant_expression_in_synpred53_CPP_grammar_4122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_synpred54_CPP_grammar_4151  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_synpred54_CPP_grammar_4151_bits[]	= { ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_synpred54_CPP_grammar_4151	= { FOLLOW_ASSIGNEQUAL_in_synpred54_CPP_grammar_4151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OCTALINT_in_synpred54_CPP_grammar_4153  */
static	ANTLR3_BITWORD FOLLOW_OCTALINT_in_synpred54_CPP_grammar_4153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_OCTALINT_in_synpred54_CPP_grammar_4153	= { FOLLOW_OCTALINT_in_synpred54_CPP_grammar_4153_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_synpred54_CPP_grammar_4155  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_synpred54_CPP_grammar_4155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_synpred54_CPP_grammar_4155	= { FOLLOW_SEMICOLON_in_synpred54_CPP_grammar_4155_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ptr_operator_in_synpred55_CPP_grammar_4253  */
static	ANTLR3_BITWORD FOLLOW_ptr_operator_in_synpred55_CPP_grammar_4253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ptr_operator_in_synpred55_CPP_grammar_4253	= { FOLLOW_ptr_operator_in_synpred55_CPP_grammar_4253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_synpred56_CPP_grammar_4303  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_synpred56_CPP_grammar_4303_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_synpred56_CPP_grammar_4303	= { FOLLOW_qualified_id_in_synpred56_CPP_grammar_4303_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred56_CPP_grammar_4306  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred56_CPP_grammar_4306_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000050), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred56_CPP_grammar_4306	= { FOLLOW_LPAREN_in_synpred56_CPP_grammar_4306_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_synpred56_CPP_grammar_4309  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_synpred56_CPP_grammar_4309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_synpred56_CPP_grammar_4309	= { FOLLOW_RPAREN_in_synpred56_CPP_grammar_4309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred56_CPP_grammar_4311  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred56_CPP_grammar_4311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred56_CPP_grammar_4311	= { FOLLOW_declaration_specifiers_in_synpred56_CPP_grammar_4311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_synpred57_CPP_grammar_4375  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_synpred57_CPP_grammar_4375_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_synpred57_CPP_grammar_4375	= { FOLLOW_qualified_id_in_synpred57_CPP_grammar_4375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred57_CPP_grammar_4378  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred57_CPP_grammar_4378_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred57_CPP_grammar_4378	= { FOLLOW_LPAREN_in_synpred57_CPP_grammar_4378_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_synpred57_CPP_grammar_4380  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_synpred57_CPP_grammar_4380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_synpred57_CPP_grammar_4380	= { FOLLOW_qualified_id_in_synpred57_CPP_grammar_4380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_synpred58_CPP_grammar_4417  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_synpred58_CPP_grammar_4417_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_synpred58_CPP_grammar_4417	= { FOLLOW_qualified_id_in_synpred58_CPP_grammar_4417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQUARE_in_synpred58_CPP_grammar_4420  */
static	ANTLR3_BITWORD FOLLOW_LSQUARE_in_synpred58_CPP_grammar_4420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQUARE_in_synpred58_CPP_grammar_4420	= { FOLLOW_LSQUARE_in_synpred58_CPP_grammar_4420_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_synpred59_CPP_grammar_4466  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_synpred59_CPP_grammar_4466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_synpred59_CPP_grammar_4466	= { FOLLOW_qualified_id_in_synpred59_CPP_grammar_4466_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_synpred59_CPP_grammar_4469  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_synpred59_CPP_grammar_4469_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_synpred59_CPP_grammar_4469	= { FOLLOW_RPAREN_in_synpred59_CPP_grammar_4469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred59_CPP_grammar_4471  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred59_CPP_grammar_4471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred59_CPP_grammar_4471	= { FOLLOW_LPAREN_in_synpred59_CPP_grammar_4471_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ptr_operator_in_synpred60_CPP_grammar_4732  */
static	ANTLR3_BITWORD FOLLOW_ptr_operator_in_synpred60_CPP_grammar_4732_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ptr_operator_in_synpred60_CPP_grammar_4732	= { FOLLOW_ptr_operator_in_synpred60_CPP_grammar_4732_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_synpred61_CPP_grammar_5360  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_synpred61_CPP_grammar_5360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_synpred61_CPP_grammar_5360	= { FOLLOW_declarator_in_synpred61_CPP_grammar_5360_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_synpred62_CPP_grammar_5406  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_synpred62_CPP_grammar_5406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_synpred62_CPP_grammar_5406	= { FOLLOW_declarator_in_synpred62_CPP_grammar_5406_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred63_CPP_grammar_5496  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred63_CPP_grammar_5496_bits[]	= { ANTLR3_UINT64_LIT(0x0000188000000010), ANTLR3_UINT64_LIT(0x0000E0AF05001050), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred63_CPP_grammar_5496	= { FOLLOW_LPAREN_in_synpred63_CPP_grammar_5496_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_abstract_declarator_in_synpred63_CPP_grammar_5498  */
static	ANTLR3_BITWORD FOLLOW_abstract_declarator_in_synpred63_CPP_grammar_5498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_abstract_declarator_in_synpred63_CPP_grammar_5498	= { FOLLOW_abstract_declarator_in_synpred63_CPP_grammar_5498_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_synpred63_CPP_grammar_5500  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_synpred63_CPP_grammar_5500_bits[]	= { ANTLR3_UINT64_LIT(0x0000180000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_synpred63_CPP_grammar_5500	= { FOLLOW_RPAREN_in_synpred63_CPP_grammar_5500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred63_CPP_grammar_5502  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred63_CPP_grammar_5502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred63_CPP_grammar_5502	= { FOLLOW_set_in_synpred63_CPP_grammar_5502_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_declaration_in_synpred64_CPP_grammar_5768  */
static	ANTLR3_BITWORD FOLLOW_parameter_declaration_in_synpred64_CPP_grammar_5768_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_declaration_in_synpred64_CPP_grammar_5768	= { FOLLOW_parameter_declaration_in_synpred64_CPP_grammar_5768_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_synpred65_CPP_grammar_6002  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_synpred65_CPP_grammar_6002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_synpred65_CPP_grammar_6002	= { FOLLOW_declarator_in_synpred65_CPP_grammar_6002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_synpred66_CPP_grammar_6046  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_synpred66_CPP_grammar_6046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_synpred66_CPP_grammar_6046	= { FOLLOW_declarator_in_synpred66_CPP_grammar_6046_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_synpred68_CPP_grammar_6242  */
static	ANTLR3_BITWORD FOLLOW_165_in_synpred68_CPP_grammar_6242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x0000010040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_synpred68_CPP_grammar_6242	= { FOLLOW_165_in_synpred68_CPP_grammar_6242_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_class_specifier_in_synpred68_CPP_grammar_6246  */
static	ANTLR3_BITWORD FOLLOW_class_specifier_in_synpred68_CPP_grammar_6246_bits[]	= { ANTLR3_UINT64_LIT(0x0100018000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_class_specifier_in_synpred68_CPP_grammar_6246	= { FOLLOW_class_specifier_in_synpred68_CPP_grammar_6246_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_synpred68_CPP_grammar_6249  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_synpred68_CPP_grammar_6249_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_synpred68_CPP_grammar_6249	= { FOLLOW_qualified_id_in_synpred68_CPP_grammar_6249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LCURLY_in_synpred68_CPP_grammar_6254  */
static	ANTLR3_BITWORD FOLLOW_LCURLY_in_synpred68_CPP_grammar_6254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LCURLY_in_synpred68_CPP_grammar_6254	= { FOLLOW_LCURLY_in_synpred68_CPP_grammar_6254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ptr_operator_in_synpred69_CPP_grammar_6273  */
static	ANTLR3_BITWORD FOLLOW_ptr_operator_in_synpred69_CPP_grammar_6273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ptr_operator_in_synpred69_CPP_grammar_6273	= { FOLLOW_ptr_operator_in_synpred69_CPP_grammar_6273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred70_CPP_grammar_6269  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred70_CPP_grammar_6269_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred70_CPP_grammar_6269	= { FOLLOW_declaration_specifiers_in_synpred70_CPP_grammar_6269_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ptr_operator_in_synpred70_CPP_grammar_6276  */
static	ANTLR3_BITWORD FOLLOW_ptr_operator_in_synpred70_CPP_grammar_6276_bits[]	= { ANTLR3_UINT64_LIT(0x0100008000000000), ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_ptr_operator_in_synpred70_CPP_grammar_6276	= { FOLLOW_ptr_operator_in_synpred70_CPP_grammar_6276_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_id_in_synpred70_CPP_grammar_6280  */
static	ANTLR3_BITWORD FOLLOW_qualified_id_in_synpred70_CPP_grammar_6280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_id_in_synpred70_CPP_grammar_6280	= { FOLLOW_qualified_id_in_synpred70_CPP_grammar_6280_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labeled_statement_in_synpred71_CPP_grammar_6297  */
static	ANTLR3_BITWORD FOLLOW_labeled_statement_in_synpred71_CPP_grammar_6297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labeled_statement_in_synpred71_CPP_grammar_6297	= { FOLLOW_labeled_statement_in_synpred71_CPP_grammar_6297_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_in_synpred72_CPP_grammar_6739  */
static	ANTLR3_BITWORD FOLLOW_declaration_in_synpred72_CPP_grammar_6739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_in_synpred72_CPP_grammar_6739	= { FOLLOW_declaration_in_synpred72_CPP_grammar_6739_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declaration_specifiers_in_synpred73_CPP_grammar_6808  */
static	ANTLR3_BITWORD FOLLOW_declaration_specifiers_in_synpred73_CPP_grammar_6808_bits[]	= { ANTLR3_UINT64_LIT(0x0100088000000010), ANTLR3_UINT64_LIT(0x0000E0AF05009040), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_declaration_specifiers_in_synpred73_CPP_grammar_6808	= { FOLLOW_declaration_specifiers_in_synpred73_CPP_grammar_6808_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_declarator_in_synpred73_CPP_grammar_6810  */
static	ANTLR3_BITWORD FOLLOW_declarator_in_synpred73_CPP_grammar_6810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_declarator_in_synpred73_CPP_grammar_6810	= { FOLLOW_declarator_in_synpred73_CPP_grammar_6810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGNEQUAL_in_synpred73_CPP_grammar_6812  */
static	ANTLR3_BITWORD FOLLOW_ASSIGNEQUAL_in_synpred73_CPP_grammar_6812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGNEQUAL_in_synpred73_CPP_grammar_6812	= { FOLLOW_ASSIGNEQUAL_in_synpred73_CPP_grammar_6812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred74_CPP_grammar_6948  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred74_CPP_grammar_6948_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred74_CPP_grammar_6948	= { FOLLOW_LPAREN_in_synpred74_CPP_grammar_6948_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synpred74_CPP_grammar_6952  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synpred74_CPP_grammar_6952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synpred74_CPP_grammar_6952	= { FOLLOW_ID_in_synpred74_CPP_grammar_6952_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_synpred74_CPP_grammar_6954  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_synpred74_CPP_grammar_6954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_synpred74_CPP_grammar_6954	= { FOLLOW_RPAREN_in_synpred74_CPP_grammar_6954_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditional_expression_in_synpred75_CPP_grammar_7313  */
static	ANTLR3_BITWORD FOLLOW_conditional_expression_in_synpred75_CPP_grammar_7313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000), ANTLR3_UINT64_LIT(0x0000000000000090) };
static  ANTLR3_BITSET_LIST FOLLOW_conditional_expression_in_synpred75_CPP_grammar_7313	= { FOLLOW_conditional_expression_in_synpred75_CPP_grammar_7313_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred75_CPP_grammar_7315  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred75_CPP_grammar_7315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred75_CPP_grammar_7315	= { FOLLOW_set_in_synpred75_CPP_grammar_7315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred76_CPP_grammar_7571  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred76_CPP_grammar_7571_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred76_CPP_grammar_7571	= { FOLLOW_set_in_synpred76_CPP_grammar_7571_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shift_expression_in_synpred76_CPP_grammar_7622  */
static	ANTLR3_BITWORD FOLLOW_shift_expression_in_synpred76_CPP_grammar_7622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shift_expression_in_synpred76_CPP_grammar_7622	= { FOLLOW_shift_expression_in_synpred76_CPP_grammar_7622_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred77_CPP_grammar_7815  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred77_CPP_grammar_7815_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred77_CPP_grammar_7815	= { FOLLOW_LPAREN_in_synpred77_CPP_grammar_7815_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_synpred77_CPP_grammar_7817  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_synpred77_CPP_grammar_7817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_synpred77_CPP_grammar_7817	= { FOLLOW_type_id_in_synpred77_CPP_grammar_7817_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_synpred77_CPP_grammar_7819  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_synpred77_CPP_grammar_7819_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_synpred77_CPP_grammar_7819	= { FOLLOW_RPAREN_in_synpred77_CPP_grammar_7819_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_synpred77_CPP_grammar_7821  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_synpred77_CPP_grammar_7821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_synpred77_CPP_grammar_7821	= { FOLLOW_unary_expression_in_synpred77_CPP_grammar_7821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred78_CPP_grammar_7845  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred78_CPP_grammar_7845_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred78_CPP_grammar_7845	= { FOLLOW_LPAREN_in_synpred78_CPP_grammar_7845_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_synpred78_CPP_grammar_7847  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_synpred78_CPP_grammar_7847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_synpred78_CPP_grammar_7847	= { FOLLOW_type_id_in_synpred78_CPP_grammar_7847_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_synpred78_CPP_grammar_7849  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_synpred78_CPP_grammar_7849_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_synpred78_CPP_grammar_7849	= { FOLLOW_RPAREN_in_synpred78_CPP_grammar_7849_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cast_expression_in_synpred78_CPP_grammar_7851  */
static	ANTLR3_BITWORD FOLLOW_cast_expression_in_synpred78_CPP_grammar_7851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cast_expression_in_synpred78_CPP_grammar_7851	= { FOLLOW_cast_expression_in_synpred78_CPP_grammar_7851_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfix_expression_in_synpred79_CPP_grammar_7896  */
static	ANTLR3_BITWORD FOLLOW_postfix_expression_in_synpred79_CPP_grammar_7896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfix_expression_in_synpred79_CPP_grammar_7896	= { FOLLOW_postfix_expression_in_synpred79_CPP_grammar_7896_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_synpred80_CPP_grammar_7972  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_synpred80_CPP_grammar_7972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_synpred80_CPP_grammar_7972	= { FOLLOW_unary_expression_in_synpred80_CPP_grammar_7972_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_simple_type_specifier_in_synpred81_CPP_grammar_8085  */
static	ANTLR3_BITWORD FOLLOW_simple_type_specifier_in_synpred81_CPP_grammar_8085_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_simple_type_specifier_in_synpred81_CPP_grammar_8085	= { FOLLOW_simple_type_specifier_in_synpred81_CPP_grammar_8085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred81_CPP_grammar_8087  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred81_CPP_grammar_8087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred81_CPP_grammar_8087	= { FOLLOW_LPAREN_in_synpred81_CPP_grammar_8087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_synpred82_CPP_grammar_8299  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_synpred82_CPP_grammar_8299_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_synpred82_CPP_grammar_8299	= { FOLLOW_type_id_in_synpred82_CPP_grammar_8299_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred83_CPP_grammar_8531  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred83_CPP_grammar_8531_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4B111E10F0B0D040), ANTLR3_UINT64_LIT(0x000053CA6E8260CB) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred83_CPP_grammar_8531	= { FOLLOW_LPAREN_in_synpred83_CPP_grammar_8531_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_synpred83_CPP_grammar_8533  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_synpred83_CPP_grammar_8533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_synpred83_CPP_grammar_8533	= { FOLLOW_expression_list_in_synpred83_CPP_grammar_8533_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_synpred83_CPP_grammar_8535  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_synpred83_CPP_grammar_8535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_synpred83_CPP_grammar_8535	= { FOLLOW_RPAREN_in_synpred83_CPP_grammar_8535_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_synpred84_CPP_grammar_8559  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_synpred84_CPP_grammar_8559_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000), ANTLR3_UINT64_LIT(0x07191F50FA000040), ANTLR3_UINT64_LIT(0x00007BA05640F2B9) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_synpred84_CPP_grammar_8559	= { FOLLOW_LPAREN_in_synpred84_CPP_grammar_8559_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_id_in_synpred84_CPP_grammar_8561  */
static	ANTLR3_BITWORD FOLLOW_type_id_in_synpred84_CPP_grammar_8561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_type_id_in_synpred84_CPP_grammar_8561	= { FOLLOW_type_id_in_synpred84_CPP_grammar_8561_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_synpred84_CPP_grammar_8563  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_synpred84_CPP_grammar_8563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_synpred84_CPP_grammar_8563	= { FOLLOW_RPAREN_in_synpred84_CPP_grammar_8563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_new_initializer_in_synpred85_CPP_grammar_8586  */
static	ANTLR3_BITWORD FOLLOW_new_initializer_in_synpred85_CPP_grammar_8586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_new_initializer_in_synpred85_CPP_grammar_8586	= { FOLLOW_new_initializer_in_synpred85_CPP_grammar_8586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scope_override_in_synpred86_CPP_grammar_8841  */
static	ANTLR3_BITWORD FOLLOW_scope_override_in_synpred86_CPP_grammar_8841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_scope_override_in_synpred86_CPP_grammar_8841	= { FOLLOW_scope_override_in_synpred86_CPP_grammar_8841_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STAR_in_synpred86_CPP_grammar_8844  */
static	ANTLR3_BITWORD FOLLOW_STAR_in_synpred86_CPP_grammar_8844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_STAR_in_synpred86_CPP_grammar_8844	= { FOLLOW_STAR_in_synpred86_CPP_grammar_8844_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cv_qualifier_seq_in_synpred86_CPP_grammar_8846  */
static	ANTLR3_BITWORD FOLLOW_cv_qualifier_seq_in_synpred86_CPP_grammar_8846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cv_qualifier_seq_in_synpred86_CPP_grammar_8846	= { FOLLOW_cv_qualifier_seq_in_synpred86_CPP_grammar_8846_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synpred87_CPP_grammar_8999  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synpred87_CPP_grammar_8999_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synpred87_CPP_grammar_8999	= { FOLLOW_ID_in_synpred87_CPP_grammar_8999_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LESSTHAN_in_synpred87_CPP_grammar_9001  */
static	ANTLR3_BITWORD FOLLOW_LESSTHAN_in_synpred87_CPP_grammar_9001_bits[]	= { ANTLR3_UINT64_LIT(0x1592889180028010), ANTLR3_UINT64_LIT(0x4F191F50FAB0D040), ANTLR3_UINT64_LIT(0x00007BEA7EC2F2FB) };
static  ANTLR3_BITSET_LIST FOLLOW_LESSTHAN_in_synpred87_CPP_grammar_9001	= { FOLLOW_LESSTHAN_in_synpred87_CPP_grammar_9001_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_template_argument_list_in_synpred87_CPP_grammar_9003  */
static	ANTLR3_BITWORD FOLLOW_template_argument_list_in_synpred87_CPP_grammar_9003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_template_argument_list_in_synpred87_CPP_grammar_9003	= { FOLLOW_template_argument_list_in_synpred87_CPP_grammar_9003_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GREATERTHAN_in_synpred87_CPP_grammar_9005  */
static	ANTLR3_BITWORD FOLLOW_GREATERTHAN_in_synpred87_CPP_grammar_9005_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_GREATERTHAN_in_synpred87_CPP_grammar_9005	= { FOLLOW_GREATERTHAN_in_synpred87_CPP_grammar_9005_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_synpred87_CPP_grammar_9007  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_synpred87_CPP_grammar_9007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_synpred87_CPP_grammar_9007	= { FOLLOW_SCOPE_in_synpred87_CPP_grammar_9007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synpred88_CPP_grammar_9060  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synpred88_CPP_grammar_9060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synpred88_CPP_grammar_9060	= { FOLLOW_ID_in_synpred88_CPP_grammar_9060_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCOPE_in_synpred88_CPP_grammar_9062  */
static	ANTLR3_BITWORD FOLLOW_SCOPE_in_synpred88_CPP_grammar_9062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SCOPE_in_synpred88_CPP_grammar_9062	= { FOLLOW_SCOPE_in_synpred88_CPP_grammar_9062_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start translation_unit
 * CPP_grammar_.g:160:1: translation_unit : ( external_declaration )* EOF ;
 */
static void
translation_unit(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */


    		CPPParser__init();
    	
    {
        // CPP_grammar_.g:164:2: ( ( external_declaration )* EOF )
        // CPP_grammar_.g:164:4: ( external_declaration )* EOF
        {
            if ( BACKTRACKING==0 )
            {
                enterExternalScope();
            }


            // CPP_grammar_.g:165:3: ( external_declaration )*

            for (;;)
            {
                int alt1=2;
                switch ( LA(1) )
                {
                case AMPERSAND:
                case ID:
                case LPAREN:
                case OPERATOR:
                case SCOPE:
                case SEMICOLON:
                case STAR:
                case TILDE:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 120:
                case 121:
                case 122:
                case 128:
                case 131:
                case 132:
                case 133:
                case 135:
                case 137:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 146:
                case 150:
                case 153:
                case 154:
                case 156:
                case 158:
                case 160:
                case 165:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // CPP_grammar_.g:165:4: external_declaration
            	    {
            	        FOLLOWPUSH(FOLLOW_external_declaration_in_translation_unit107);
            	        external_declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletranslation_unitEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


             MATCHT(EOF, &FOLLOW_EOF_in_translation_unit112);
            if  (HASEXCEPTION())
            {
                goto ruletranslation_unitEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                exitExternalScope();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletranslation_unitEx; /* Prevent compiler warnings */
    ruletranslation_unitEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end translation_unit */

/**
 * $ANTLR start external_declaration
 * CPP_grammar_.g:170:1: external_declaration : ( ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN external_declaration | ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON ) | ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON | template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}?)=> ctor_definition ) | ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON | ( ( template_head )? dtor_head[1] LCURLY )=> ( template_head )? dtor_head[1] dtor_body | ( ( ctor_decl_spec )? {...}?)=> ctor_definition | ( ( 'inline' )? scope_override[$external_declaration::pScopeOverrideBuf] conversion_function_decl_or_def )=> ( 'inline' )? s1= scope_override[bufScopeOverrideScope] conversion_function_decl_or_def | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( function_declarator[1] LCURLY )=> function_definition | ( declaration_specifiers function_declarator[1] declaration )=> function_definition | ( function_declarator[1] declaration )=> function_definition | ( ( 'extern' )? (fs= function_specifier )* class_specifier )=> ( 'extern' )? (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | 'namespace' namespace_definition | SEMICOLON | declaration | 'antlrTrace_on' | 'antlrTrace_off' ) ;
 */
static void
external_declaration(pCPP_grammar_Parser ctx)
{

    		//FunctionSpecifier fs = fsInvalid;	// inline,virtual,explicit
    		char bufScopeOverrideScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    FunctionSpecifier fs;
    #undef	RETURN_TYPE_fs
    #define	RETURN_TYPE_fs FunctionSpecifier

    char * s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 char *

    /* Initialize rule variables
     */
    ctx->pCPP_grammar_Parser_external_declarationTop = pCPP_grammar_Parser_external_declarationPush(ctx);

    		lineNo = LT(1)->line;
    		boolean K_and_R;
    		K_and_R = FALSE;
    		//FunctionSpecifier
    		fs = fsInvalid;	// inline,virtual,explicit
    		//in_user_file = in_user_file_deferred;
    		(SCOPE_TOP(external_declaration))->pScopeOverrideBuf= bufScopeOverrideScope; 
    	
    {
        // CPP_grammar_.g:187:2: ( ( ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN external_declaration | ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON ) | ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON | template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}?)=> ctor_definition ) | ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON | ( ( template_head )? dtor_head[1] LCURLY )=> ( template_head )? dtor_head[1] dtor_body | ( ( ctor_decl_spec )? {...}?)=> ctor_definition | ( ( 'inline' )? scope_override[$external_declaration::pScopeOverrideBuf] conversion_function_decl_or_def )=> ( 'inline' )? s1= scope_override[bufScopeOverrideScope] conversion_function_decl_or_def | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( function_declarator[1] LCURLY )=> function_definition | ( declaration_specifiers function_declarator[1] declaration )=> function_definition | ( function_declarator[1] declaration )=> function_definition | ( ( 'extern' )? (fs= function_specifier )* class_specifier )=> ( 'extern' )? (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | 'namespace' namespace_definition | SEMICOLON | declaration | 'antlrTrace_on' | 'antlrTrace_off' ) )
        // CPP_grammar_.g:188:2: ( ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN external_declaration | ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON ) | ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON | template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}?)=> ctor_definition ) | ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON | ( ( template_head )? dtor_head[1] LCURLY )=> ( template_head )? dtor_head[1] dtor_body | ( ( ctor_decl_spec )? {...}?)=> ctor_definition | ( ( 'inline' )? scope_override[$external_declaration::pScopeOverrideBuf] conversion_function_decl_or_def )=> ( 'inline' )? s1= scope_override[bufScopeOverrideScope] conversion_function_decl_or_def | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( function_declarator[1] LCURLY )=> function_definition | ( declaration_specifiers function_declarator[1] declaration )=> function_definition | ( function_declarator[1] declaration )=> function_definition | ( ( 'extern' )? (fs= function_specifier )* class_specifier )=> ( 'extern' )? (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | 'namespace' namespace_definition | SEMICOLON | declaration | 'antlrTrace_on' | 'antlrTrace_off' )
        {
            // CPP_grammar_.g:188:2: ( ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN external_declaration | ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON ) | ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON | template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}?)=> ctor_definition ) | ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON | ( ( template_head )? dtor_head[1] LCURLY )=> ( template_head )? dtor_head[1] dtor_body | ( ( ctor_decl_spec )? {...}?)=> ctor_definition | ( ( 'inline' )? scope_override[$external_declaration::pScopeOverrideBuf] conversion_function_decl_or_def )=> ( 'inline' )? s1= scope_override[bufScopeOverrideScope] conversion_function_decl_or_def | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( function_declarator[1] LCURLY )=> function_definition | ( declaration_specifiers function_declarator[1] declaration )=> function_definition | ( function_declarator[1] declaration )=> function_definition | ( ( 'extern' )? (fs= function_specifier )* class_specifier )=> ( 'extern' )? (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | 'namespace' namespace_definition | SEMICOLON | declaration | 'antlrTrace_on' | 'antlrTrace_off' )
            {
                int alt15=20;
                switch ( LA(1) )
                {
                case 160:
                	{
                		{
                		    int LA15_1 = LA(2);
                		    if ( (synpred1_CPP_grammar_(ctx)))
                		    {
                		        alt15=1;
                		    }
                		    else if ( (synpred7_CPP_grammar_(ctx)))
                		    {
                		        alt15=3;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=4;
                		    }
                		    else if ( (synpred13_CPP_grammar_(ctx)))
                		    {
                		        alt15=6;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 1;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 165:
                	{
                		{
                		    int LA15_2 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 2;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 133:
                	{
                		{
                		    int LA15_3 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred21_CPP_grammar_(ctx)))
                		    {
                		        alt15=14;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 3;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 137:
                	{
                		{
                		    int LA15_4 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 4;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 115:
                	{
                		{
                		    int LA15_5 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 5;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 150:
                	{
                		{
                		    int LA15_6 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 6;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 156:
                	{
                		{
                		    int LA15_7 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 7;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 143:
                	{
                		{
                		    int LA15_8 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 8;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 122:
                	{
                		{
                		    int LA15_9 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 9;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 173:
                	{
                		{
                		    int LA15_10 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 10;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 140:
                	{
                		{
                		    int LA15_11 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred13_CPP_grammar_(ctx)))
                		    {
                		        alt15=6;
                		    }
                		    else if ( (synpred14_CPP_grammar_(ctx)))
                		    {
                		        alt15=7;
                		    }
                		    else if ( (synpred15_CPP_grammar_(ctx)))
                		    {
                		        alt15=8;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred21_CPP_grammar_(ctx)))
                		    {
                		        alt15=14;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 11;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 171:
                	{
                		{
                		    int LA15_12 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred13_CPP_grammar_(ctx)))
                		    {
                		        alt15=6;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred21_CPP_grammar_(ctx)))
                		    {
                		        alt15=14;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 12;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 132:
                	{
                		{
                		    int LA15_13 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred14_CPP_grammar_(ctx)))
                		    {
                		        alt15=7;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred21_CPP_grammar_(ctx)))
                		    {
                		        alt15=14;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 13;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 89:
                case 102:
                	{
                		{
                		    int LA15_14 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 14;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case SCOPE:
                	{
                		{
                		    int LA15_15 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred13_CPP_grammar_(ctx)))
                		    {
                		        alt15=6;
                		    }
                		    else if ( (synpred14_CPP_grammar_(ctx)))
                		    {
                		        alt15=7;
                		    }
                		    else if ( (synpred15_CPP_grammar_(ctx)))
                		    {
                		        alt15=8;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 15;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case ID:
                	{
                		{
                		    int LA15_16 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred13_CPP_grammar_(ctx)))
                		    {
                		        alt15=6;
                		    }
                		    else if ( (synpred14_CPP_grammar_(ctx)))
                		    {
                		        alt15=7;
                		    }
                		    else if ( (synpred15_CPP_grammar_(ctx)))
                		    {
                		        alt15=8;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 16;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 167:
                	{
                		{
                		    int LA15_17 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 17;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 131:
                	{
                		{
                		    int LA15_18 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred12_CPP_grammar_(ctx)))
                		    {
                		        alt15=5;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 18;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 121:
                	{
                		{
                		    int LA15_19 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred21_CPP_grammar_(ctx)))
                		    {
                		        alt15=14;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 19;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 158:
                	{
                		{
                		    int LA15_20 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred21_CPP_grammar_(ctx)))
                		    {
                		        alt15=14;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 20;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 168:
                	{
                		{
                		    int LA15_21 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred21_CPP_grammar_(ctx)))
                		    {
                		        alt15=14;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 21;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 120:
                	{
                		{
                		    int LA15_22 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 22;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 174:
                	{
                		{
                		    int LA15_23 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 23;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 116:
                	{
                		{
                		    int LA15_24 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 24;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 153:
                	{
                		{
                		    int LA15_25 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 25;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 141:
                	{
                		{
                		    int LA15_26 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 26;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 95:
                case 108:
                	{
                		{
                		    int LA15_27 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 27;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 92:
                case 105:
                	{
                		{
                		    int LA15_28 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 28;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 93:
                case 106:
                	{
                		{
                		    int LA15_29 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 29;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 94:
                case 107:
                	{
                		{
                		    int LA15_30 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 30;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 100:
                case 112:
                	{
                		{
                		    int LA15_31 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 31;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 142:
                	{
                		{
                		    int LA15_32 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 32;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 154:
                	{
                		{
                		    int LA15_33 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 33;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 169:
                	{
                		{
                		    int LA15_34 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 34;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 135:
                	{
                		{
                		    int LA15_35 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 35;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 128:
                	{
                		{
                		    int LA15_36 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 36;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 172:
                	{
                		{
                		    int LA15_37 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 37;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 170:
                	{
                		{
                		    int LA15_38 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 38;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case TILDE:
                	{
                		{
                		    int LA15_39 = LA(2);
                		    if ( (synpred13_CPP_grammar_(ctx)))
                		    {
                		        alt15=6;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 39;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 91:
                case 104:
                	{
                		{
                		    int LA15_40 = LA(2);
                		    if ( (synpred2_CPP_grammar_(ctx)))
                		    {
                		        alt15=2;
                		    }
                		    else if ( (synpred13_CPP_grammar_(ctx)))
                		    {
                		        alt15=6;
                		    }
                		    else if ( (synpred14_CPP_grammar_(ctx)))
                		    {
                		        alt15=7;
                		    }
                		    else if ( (synpred16_CPP_grammar_(ctx)))
                		    {
                		        alt15=9;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else if ( (synpred21_CPP_grammar_(ctx)))
                		    {
                		        alt15=14;
                		    }
                		    else if ( (synpred22_CPP_grammar_(ctx)))
                		    {
                		        alt15=15;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt15=18;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 40;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case OPERATOR:
                	{
                		{
                		    int LA15_41 = LA(2);
                		    if ( (synpred15_CPP_grammar_(ctx)))
                		    {
                		        alt15=8;
                		    }
                		    else if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 41;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case AMPERSAND:
                	{
                		{
                		    int LA15_42 = LA(2);
                		    if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 42;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 88:
                case 101:
                	{
                		{
                		    int LA15_43 = LA(2);
                		    if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 43;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 97:
                case 109:
                	{
                		{
                		    int LA15_44 = LA(2);
                		    if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 44;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 90:
                case 103:
                	{
                		{
                		    int LA15_45 = LA(2);
                		    if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 45;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 96:
                	{
                		{
                		    int LA15_46 = LA(2);
                		    if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 46;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 98:
                case 110:
                case 146:
                	{
                		{
                		    int LA15_47 = LA(2);
                		    if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 47;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 99:
                case 111:
                	{
                		{
                		    int LA15_48 = LA(2);
                		    if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 48;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case STAR:
                	{
                		{
                		    int LA15_49 = LA(2);
                		    if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 49;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case LPAREN:
                	{
                		{
                		    int LA15_50 = LA(2);
                		    if ( (synpred17_CPP_grammar_(ctx)))
                		    {
                		        alt15=10;
                		    }
                		    else if ( (synpred18_CPP_grammar_(ctx)))
                		    {
                		        alt15=11;
                		    }
                		    else if ( (synpred19_CPP_grammar_(ctx)))
                		    {
                		        alt15=12;
                		    }
                		    else if ( (synpred20_CPP_grammar_(ctx)))
                		    {
                		        alt15=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            pCPP_grammar_Parser_external_declarationPop(ctx);

                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 15;
                		        EXCEPTION->state        = 50;


                		        goto ruleexternal_declarationEx;

                		    }
                		}
                	}
                    break;
                case 144:
                	{
                		alt15=16;
                	}
                    break;
                case SEMICOLON:
                	{
                		alt15=17;
                	}
                    break;
                case 114:
                	{
                		alt15=19;
                	}
                    break;
                case 113:
                	{
                		alt15=20;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        pCPP_grammar_Parser_external_declarationPop(ctx);

                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 15;
                    EXCEPTION->state        = 0;


                    goto ruleexternal_declarationEx;

                }

                switch (alt15)
                {
            	case 1:
            	    // CPP_grammar_.g:190:3: ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN external_declaration
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if(statementTrace>=1) 
            	            			printf("%d external_declaration template explicit-specialisation\n",LT(1)->line);
            	            		
            	        }


            	         MATCHT(160, &FOLLOW_160_in_external_declaration169);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_external_declaration171);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_external_declaration173);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_external_declaration_in_external_declaration175);
            	        external_declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:198:3: ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON )
            	    {
            	        // CPP_grammar_.g:199:3: ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON )
            	        {
            	            int alt4=4;
            	            switch ( LA(1) )
            	            {
            	            case 165:
            	            	{
            	            		{
            	            		    int LA4_1 = LA(2);
            	            		    if ( (synpred3_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=1;
            	            		    }
            	            		    else if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else if ( (synpred6_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=4;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 1;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 133:
            	            	{
            	            		{
            	            		    int LA4_2 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 2;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 137:
            	            	{
            	            		{
            	            		    int LA4_3 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 3;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 115:
            	            	{
            	            		{
            	            		    int LA4_4 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 4;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 150:
            	            	{
            	            		{
            	            		    int LA4_5 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 5;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 156:
            	            	{
            	            		{
            	            		    int LA4_6 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 6;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 143:
            	            	{
            	            		{
            	            		    int LA4_7 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 7;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 122:
            	            	{
            	            		{
            	            		    int LA4_8 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 8;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 173:
            	            	{
            	            		{
            	            		    int LA4_9 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 9;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 91:
            	            case 104:
            	            case 140:
            	            	{
            	            		{
            	            		    int LA4_10 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 10;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 171:
            	            	{
            	            		{
            	            		    int LA4_11 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 11;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 132:
            	            	{
            	            		{
            	            		    int LA4_12 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 12;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 89:
            	            case 102:
            	            	{
            	            		{
            	            		    int LA4_13 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 13;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case SCOPE:
            	            	{
            	            		{
            	            		    int LA4_14 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 14;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case ID:
            	            	{
            	            		{
            	            		    int LA4_15 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 15;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 167:
            	            	{
            	            		{
            	            		    int LA4_16 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 16;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 131:
            	            	{
            	            		{
            	            		    int LA4_17 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 17;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 121:
            	            	{
            	            		{
            	            		    int LA4_18 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 18;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 158:
            	            	{
            	            		{
            	            		    int LA4_19 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 19;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 168:
            	            	{
            	            		{
            	            		    int LA4_20 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 20;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 120:
            	            	{
            	            		{
            	            		    int LA4_21 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 21;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 174:
            	            	{
            	            		{
            	            		    int LA4_22 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 22;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 116:
            	            	{
            	            		{
            	            		    int LA4_23 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 23;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 153:
            	            	{
            	            		{
            	            		    int LA4_24 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 24;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 141:
            	            	{
            	            		{
            	            		    int LA4_25 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 25;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 95:
            	            case 108:
            	            	{
            	            		{
            	            		    int LA4_26 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 26;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 92:
            	            case 105:
            	            	{
            	            		{
            	            		    int LA4_27 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 27;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 93:
            	            case 106:
            	            	{
            	            		{
            	            		    int LA4_28 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 28;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 94:
            	            case 107:
            	            	{
            	            		{
            	            		    int LA4_29 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 29;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 100:
            	            case 112:
            	            	{
            	            		{
            	            		    int LA4_30 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 30;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 142:
            	            	{
            	            		{
            	            		    int LA4_31 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 31;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 154:
            	            	{
            	            		{
            	            		    int LA4_32 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 32;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 169:
            	            	{
            	            		{
            	            		    int LA4_33 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 33;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 135:
            	            	{
            	            		{
            	            		    int LA4_34 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 34;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 128:
            	            	{
            	            		{
            	            		    int LA4_35 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 35;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 172:
            	            	{
            	            		{
            	            		    int LA4_36 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 36;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 170:
            	            	{
            	            		{
            	            		    int LA4_37 = LA(2);
            	            		    if ( (synpred4_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( (synpred5_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 4;
            	            		        EXCEPTION->state        = 37;


            	            		        goto ruleexternal_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;

            	            default:
            	                if (BACKTRACKING>0)
            	                {
            	                    FAILEDFLAG = ANTLR3_TRUE;
            	                    pCPP_grammar_Parser_external_declarationPop(ctx);

            	                    return ;
            	                }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 4;
            	                EXCEPTION->state        = 0;


            	                goto ruleexternal_declarationEx;

            	            }

            	            switch (alt4)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:200:4: ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if(statementTrace>=1) 
            	        	            				printf("%d external_declaration Typedef enum type\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	         MATCHT(165, &FOLLOW_165_in_external_declaration213);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_enum_specifier_in_external_declaration215);
            	        	        enum_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            _td = TRUE;
            	        	        }


            	        	        // CPP_grammar_.g:204:43: ( init_declarator_list )?
            	        	        {
            	        	            int alt2=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case AMPERSAND:
            	        	                case COLON:
            	        	                case ID:
            	        	                case LPAREN:
            	        	                case OPERATOR:
            	        	                case SCOPE:
            	        	                case STAR:
            	        	                case TILDE:
            	        	                case 88:
            	        	                case 90:
            	        	                case 96:
            	        	                case 97:
            	        	                case 98:
            	        	                case 99:
            	        	                case 101:
            	        	                case 103:
            	        	                case 109:
            	        	                case 110:
            	        	                case 111:
            	        	                case 146:
            	        	                	{
            	        	                		alt2=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt2)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:204:44: init_declarator_list
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_external_declaration220);
            	        	        	        init_declarator_list(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleexternal_declarationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_external_declaration224);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            end_of_stmt();
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:206:4: ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if(statementTrace>=1) 
            	        	            				printf("%d external_declaration Typedef function type\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_declaration_in_external_declaration254);
            	        	        declaration(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CPP_grammar_.g:212:4: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if(statementTrace>=1) 
            	        	            				printf("%d external_declaration Typedef variable type\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_declaration_in_external_declaration283);
            	        	        declaration(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // CPP_grammar_.g:218:4: ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if(statementTrace>=1) 
            	        	            				printf("%d external_declaration Typedef class type\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	         MATCHT(165, &FOLLOW_165_in_external_declaration307);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_class_decl_or_def_in_external_declaration309);
            	        	        class_decl_or_def(ctx, bufScopeOverrideScope, fs);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            _td = TRUE;
            	        	        }


            	        	        // CPP_grammar_.g:222:73: ( init_declarator_list )?
            	        	        {
            	        	            int alt3=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case AMPERSAND:
            	        	                case COLON:
            	        	                case ID:
            	        	                case LPAREN:
            	        	                case OPERATOR:
            	        	                case SCOPE:
            	        	                case STAR:
            	        	                case TILDE:
            	        	                case 88:
            	        	                case 90:
            	        	                case 96:
            	        	                case 97:
            	        	                case 98:
            	        	                case 99:
            	        	                case 101:
            	        	                case 103:
            	        	                case 109:
            	        	                case 110:
            	        	                case 111:
            	        	                case 146:
            	        	                	{
            	        	                		alt3=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt3)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:222:74: init_declarator_list
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_external_declaration315);
            	        	        	        init_declarator_list(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleexternal_declarationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_external_declaration319);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            end_of_stmt();
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:227:3: ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Templated class decl or def\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_template_head_in_external_declaration361);
            	        template_head(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        // CPP_grammar_.g:231:17: (fs= function_specifier )*

            	        for (;;)
            	        {
            	            int alt5=2;
            	            switch ( LA(1) )
            	            {
            	            case 91:
            	            case 104:
            	            case 132:
            	            case 140:
            	            case 171:
            	            	{
            	            		alt5=1;
            	            	}
            	                break;

            	            }

            	            switch (alt5)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:231:18: fs= function_specifier
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_function_specifier_in_external_declaration368);
            	        	        fs=function_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop5;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop5: ; /* Jump out to here if this rule does not match */


            	        FOLLOWPUSH(FOLLOW_class_decl_or_def_in_external_declaration372);
            	        class_decl_or_def(ctx, bufScopeOverrideScope, fs);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        // CPP_grammar_.g:231:89: ( init_declarator_list )?
            	        {
            	            int alt6=2;
            	            switch ( LA(1) )
            	            {
            	                case AMPERSAND:
            	                case COLON:
            	                case ID:
            	                case LPAREN:
            	                case OPERATOR:
            	                case SCOPE:
            	                case STAR:
            	                case TILDE:
            	                case 88:
            	                case 90:
            	                case 96:
            	                case 97:
            	                case 98:
            	                case 99:
            	                case 101:
            	                case 103:
            	                case 109:
            	                case 110:
            	                case 111:
            	                case 146:
            	                	{
            	                		alt6=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt6)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:231:90: init_declarator_list
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_external_declaration376);
            	        	        init_declarator_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_external_declaration380);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 4:
            	    // CPP_grammar_.g:234:3: template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}?)=> ctor_definition )
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            beginTemplateDeclaration();
            	        }


            	        FOLLOWPUSH(FOLLOW_template_head_in_external_declaration397);
            	        template_head(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        // CPP_grammar_.g:236:3: ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}?)=> ctor_definition )
            	        {
            	            int alt8=4;
            	            {
            	                int LA8_0 = LA(1);
            	                if ( (LA8_0 == 165))
            	                {
            	                    {
            	                        int LA8_1 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 1;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 137))
            	                {
            	                    {
            	                        int LA8_2 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 2;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 115))
            	                {
            	                    {
            	                        int LA8_3 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 3;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 150))
            	                {
            	                    {
            	                        int LA8_4 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 4;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 156))
            	                {
            	                    {
            	                        int LA8_5 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 5;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 133))
            	                {
            	                    {
            	                        int LA8_6 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 6;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 143))
            	                {
            	                    {
            	                        int LA8_7 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 7;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 122))
            	                {
            	                    {
            	                        int LA8_8 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 8;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 173))
            	                {
            	                    {
            	                        int LA8_9 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 9;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 91 || LA8_0 == 104 || LA8_0 == 140))
            	                {
            	                    {
            	                        int LA8_10 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else if ( (synpred11_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=4;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 10;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 171))
            	                {
            	                    {
            	                        int LA8_11 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 11;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 132))
            	                {
            	                    {
            	                        int LA8_12 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else if ( (synpred11_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=4;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 12;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 89 || LA8_0 == 102))
            	                {
            	                    {
            	                        int LA8_13 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 13;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == SCOPE))
            	                {
            	                    {
            	                        int LA8_14 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else if ( (synpred11_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=4;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 14;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == ID))
            	                {
            	                    {
            	                        int LA8_15 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else if ( (synpred11_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=4;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 15;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 167))
            	                {
            	                    {
            	                        int LA8_16 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 16;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 131))
            	                {
            	                    {
            	                        int LA8_17 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 17;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 121))
            	                {
            	                    {
            	                        int LA8_18 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 18;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 158))
            	                {
            	                    {
            	                        int LA8_19 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 19;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 168))
            	                {
            	                    {
            	                        int LA8_20 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 20;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 120))
            	                {
            	                    {
            	                        int LA8_21 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 21;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 174))
            	                {
            	                    {
            	                        int LA8_22 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 22;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 116))
            	                {
            	                    {
            	                        int LA8_23 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 23;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 153))
            	                {
            	                    {
            	                        int LA8_24 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 24;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 141))
            	                {
            	                    {
            	                        int LA8_25 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 25;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 95 || LA8_0 == 108))
            	                {
            	                    {
            	                        int LA8_26 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 26;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 92 || LA8_0 == 105))
            	                {
            	                    {
            	                        int LA8_27 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 27;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 93 || LA8_0 == 106))
            	                {
            	                    {
            	                        int LA8_28 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 28;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 94 || LA8_0 == 107))
            	                {
            	                    {
            	                        int LA8_29 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 29;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 100 || LA8_0 == 112))
            	                {
            	                    {
            	                        int LA8_30 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 30;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 142))
            	                {
            	                    {
            	                        int LA8_31 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 31;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 154))
            	                {
            	                    {
            	                        int LA8_32 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 32;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 169))
            	                {
            	                    {
            	                        int LA8_33 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 33;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 135))
            	                {
            	                    {
            	                        int LA8_34 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 34;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 128))
            	                {
            	                    {
            	                        int LA8_35 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 35;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 172))
            	                {
            	                    {
            	                        int LA8_36 = LA(2);
            	                        if ( (synpred8_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (synpred9_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=2;
            	                        }
            	                        else if ( (synpred10_CPP_grammar_(ctx)))
            	                        {
            	                            alt8=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                pCPP_grammar_Parser_external_declarationPop(ctx);

            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 36;


            	                            goto ruleexternal_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (synpred9_CPP_grammar_(ctx)) && (LA8_0 == 170))
            	                {
            	                    alt8=2;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == AMPERSAND))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == 88 || LA8_0 == 101))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == 97 || LA8_0 == 109))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == 90 || LA8_0 == 103))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == 96))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == 98 || LA8_0 == 110 || LA8_0 == 146))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == 99 || LA8_0 == 111))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == STAR))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == LPAREN))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == OPERATOR))
            	                {
            	                    alt8=3;
            	                }
            	                else if ( (synpred10_CPP_grammar_(ctx)) && (LA8_0 == TILDE))
            	                {
            	                    alt8=3;
            	                }
            	                else
            	                {
            	                    if (BACKTRACKING>0)
            	                    {
            	                        FAILEDFLAG = ANTLR3_TRUE;
            	                        pCPP_grammar_Parser_external_declarationPop(ctx);

            	                        return ;
            	                    }


            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 8;
            	                    EXCEPTION->state        = 0;


            	                    goto ruleexternal_declarationEx;

            	                }
            	            }
            	            switch (alt8)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:238:4: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d external_declaration Templated class forward declaration\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_external_declaration434);
            	        	        declaration_specifiers(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	        // CPP_grammar_.g:242:27: ( init_declarator_list )?
            	        	        {
            	        	            int alt7=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case AMPERSAND:
            	        	                case COLON:
            	        	                case ID:
            	        	                case LPAREN:
            	        	                case OPERATOR:
            	        	                case SCOPE:
            	        	                case STAR:
            	        	                case TILDE:
            	        	                case 88:
            	        	                case 90:
            	        	                case 96:
            	        	                case 97:
            	        	                case 98:
            	        	                case 99:
            	        	                case 101:
            	        	                case 103:
            	        	                case 109:
            	        	                case 110:
            	        	                case 111:
            	        	                case 146:
            	        	                	{
            	        	                		alt7=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt7)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:242:28: init_declarator_list
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_external_declaration437);
            	        	        	        init_declarator_list(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleexternal_declarationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_external_declaration441);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            end_of_stmt();
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:245:4: ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d external_declaration Templated function declaration\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_declaration_in_external_declaration477);
            	        	        declaration(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CPP_grammar_.g:252:4: ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d external_declaration Templated function definition\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_function_definition_in_external_declaration511);
            	        	        function_definition(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // CPP_grammar_.g:261:4: ( ctor_decl_spec {...}?)=> ctor_definition
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d external_declaration Templated constructor definition\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_ctor_definition_in_external_declaration579);
            	        	        ctor_definition(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        if ( BACKTRACKING==0 )
            	        {
            	            endTemplateDeclaration();
            	        }


            	    }
            	    break;
            	case 5:
            	    // CPP_grammar_.g:272:3: ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Enum definition\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_enum_specifier_in_external_declaration617);
            	        enum_specifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        // CPP_grammar_.g:276:18: ( init_declarator_list )?
            	        {
            	            int alt9=2;
            	            switch ( LA(1) )
            	            {
            	                case AMPERSAND:
            	                case COLON:
            	                case ID:
            	                case LPAREN:
            	                case OPERATOR:
            	                case SCOPE:
            	                case STAR:
            	                case TILDE:
            	                case 88:
            	                case 90:
            	                case 96:
            	                case 97:
            	                case 98:
            	                case 99:
            	                case 101:
            	                case 103:
            	                case 109:
            	                case 110:
            	                case 111:
            	                case 146:
            	                	{
            	                		alt9=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt9)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:276:19: init_declarator_list
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_external_declaration620);
            	        	        init_declarator_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_external_declaration624);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 6:
            	    // CPP_grammar_.g:279:3: ( ( template_head )? dtor_head[1] LCURLY )=> ( template_head )? dtor_head[1] dtor_body
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Destructor definition\n",LT(1)->line);
            	            		
            	        }


            	        // CPP_grammar_.g:283:3: ( template_head )?
            	        {
            	            int alt10=2;
            	            switch ( LA(1) )
            	            {
            	                case 160:
            	                	{
            	                		alt10=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt10)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:283:4: template_head
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_template_head_in_external_declaration656);
            	        	        template_head(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_dtor_head_in_external_declaration660);
            	        dtor_head(ctx, 1);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_dtor_body_in_external_declaration663);
            	        dtor_body(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 7:
            	    // CPP_grammar_.g:289:3: ( ( ctor_decl_spec )? {...}?)=> ctor_definition
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Constructor definition\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_ctor_definition_in_external_declaration712);
            	        ctor_definition(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 8:
            	    // CPP_grammar_.g:299:3: ( ( 'inline' )? scope_override[$external_declaration::pScopeOverrideBuf] conversion_function_decl_or_def )=> ( 'inline' )? s1= scope_override[bufScopeOverrideScope] conversion_function_decl_or_def
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Operator function\n",LT(1)->line);
            	            		
            	        }


            	        // CPP_grammar_.g:303:3: ( 'inline' )?
            	        {
            	            int alt11=2;
            	            switch ( LA(1) )
            	            {
            	                case 140:
            	                	{
            	                		alt11=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt11)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:303:4: 'inline'
            	        	    {
            	        	         MATCHT(140, &FOLLOW_140_in_external_declaration745);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_scope_override_in_external_declaration753);
            	        s1=scope_override(ctx, bufScopeOverrideScope);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_conversion_function_decl_or_def_in_external_declaration756);
            	        conversion_function_decl_or_def(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 9:
            	    // CPP_grammar_.g:306:3: ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Function declaration\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_external_declaration787);
            	        declaration_specifiers(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_function_declarator_in_external_declaration789);
            	        function_declarator(ctx, 0);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_external_declaration792);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 10:
            	    // CPP_grammar_.g:313:3: ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Function definition\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_function_definition_in_external_declaration821);
            	        function_definition(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 11:
            	    // CPP_grammar_.g:320:3: ( function_declarator[1] LCURLY )=> function_definition
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Function definition without return type\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_function_definition_in_external_declaration846);
            	        function_definition(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 12:
            	    // CPP_grammar_.g:327:3: ( declaration_specifiers function_declarator[1] declaration )=> function_definition
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            K_and_R = TRUE;
            	            		 if (statementTrace>=1) 
            	            			printf("%d external_declaration K & R function definition\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_function_definition_in_external_declaration872);
            	        function_definition(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 13:
            	    // CPP_grammar_.g:335:3: ( function_declarator[1] declaration )=> function_definition
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            K_and_R = TRUE;
            	            		 if (statementTrace>=1) 
            	            			printf("%d external_declaration K & R function definition without return type\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_function_definition_in_external_declaration896);
            	        function_definition(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 14:
            	    // CPP_grammar_.g:343:3: ( ( 'extern' )? (fs= function_specifier )* class_specifier )=> ( 'extern' )? (fs= function_specifier )* class_decl_or_def[bufScopeOverrideScope, fs] ( init_declarator_list )? SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Class decl or def\n",LT(1)->line);
            	            		
            	        }


            	        // CPP_grammar_.g:347:3: ( 'extern' )?
            	        {
            	            int alt12=2;
            	            switch ( LA(1) )
            	            {
            	                case 133:
            	                	{
            	                		alt12=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt12)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:347:4: 'extern'
            	        	    {
            	        	         MATCHT(133, &FOLLOW_133_in_external_declaration932);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // CPP_grammar_.g:347:15: (fs= function_specifier )*

            	        for (;;)
            	        {
            	            int alt13=2;
            	            switch ( LA(1) )
            	            {
            	            case 91:
            	            case 104:
            	            case 132:
            	            case 140:
            	            case 171:
            	            	{
            	            		alt13=1;
            	            	}
            	                break;

            	            }

            	            switch (alt13)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:347:16: fs= function_specifier
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_function_specifier_in_external_declaration941);
            	        	        fs=function_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop13;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop13: ; /* Jump out to here if this rule does not match */


            	        FOLLOWPUSH(FOLLOW_class_decl_or_def_in_external_declaration945);
            	        class_decl_or_def(ctx, bufScopeOverrideScope, fs);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        // CPP_grammar_.g:347:87: ( init_declarator_list )?
            	        {
            	            int alt14=2;
            	            switch ( LA(1) )
            	            {
            	                case AMPERSAND:
            	                case COLON:
            	                case ID:
            	                case LPAREN:
            	                case OPERATOR:
            	                case SCOPE:
            	                case STAR:
            	                case TILDE:
            	                case 88:
            	                case 90:
            	                case 96:
            	                case 97:
            	                case 98:
            	                case 99:
            	                case 101:
            	                case 103:
            	                case 109:
            	                case 110:
            	                case 111:
            	                case 146:
            	                	{
            	                		alt14=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt14)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:347:88: init_declarator_list
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_external_declaration949);
            	        	        init_declarator_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexternal_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_external_declaration953);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 15:
            	    // CPP_grammar_.g:370:3: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Declaration\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_declaration_in_external_declaration1032);
            	        declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 16:
            	    // CPP_grammar_.g:378:3: 'namespace' namespace_definition
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Namespace definition\n",LT(1)->line);
            	            		
            	        }


            	         MATCHT(144, &FOLLOW_144_in_external_declaration1049);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_namespace_definition_in_external_declaration1051);
            	        namespace_definition(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 17:
            	    // CPP_grammar_.g:384:3: SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Semicolon\n",LT(1)->line);
            	            		
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_external_declaration1066);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 18:
            	    // CPP_grammar_.g:390:3: declaration
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d external_declaration Other Declaration\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_declaration_in_external_declaration1083);
            	        declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 19:
            	    // CPP_grammar_.g:398:3: 'antlrTrace_on'
            	    {
            	         MATCHT(114, &FOLLOW_114_in_external_declaration1098);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            antlrTrace(TRUE);
            	        }


            	    }
            	    break;
            	case 20:
            	    // CPP_grammar_.g:401:3: 'antlrTrace_off'
            	    {
            	         MATCHT(113, &FOLLOW_113_in_external_declaration1110);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexternal_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_external_declarationPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            antlrTrace(FALSE);
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexternal_declarationEx; /* Prevent compiler warnings */
    ruleexternal_declarationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    pCPP_grammar_Parser_external_declarationPop(ctx);

    return ;
}
/* $ANTLR end external_declaration */

/**
 * $ANTLR start member_declaration
 * CPP_grammar_.g:407:1: member_declaration : ( ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN member_declaration | ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON ) | ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON | template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}?)=> ctor_definition | conversion_function_decl_or_def | class_head declaration_specifiers ( init_declarator_list )? SEMICOLON ) | ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}? ctor_declarator[1] ( COLON | LCURLY ) )=> ctor_definition | ( dtor_head[0] SEMICOLON )=> dtor_head[0] SEMICOLON | ( dtor_head[1] LCURLY )=> dtor_head[1] dtor_body | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ( 'friend' )? (fs= function_specifier )* class_specifier )=> ( 'friend' )? (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( (fs= function_specifier )* function_declarator[0] SEMICOLON )=> (fs= function_specifier )* function_declarator[0] SEMICOLON | ( (fs= function_specifier )* function_declarator[1] LCURLY )=> (fs= function_specifier )* function_declarator[1] compound_statement | ( ( 'inline' )? conversion_function_decl_or_def )=> ( 'inline' )? conversion_function_decl_or_def | ( qualified_id[NULL] SEMICOLON )=>q2= qualified_id[bufQualifiedIdScope] SEMICOLON | access_specifier COLON | SEMICOLON | 'antlrTrace_on' | 'antlrTrace_off' ) ;
 */
static void
member_declaration(pCPP_grammar_Parser ctx)
{

    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    FunctionSpecifier fs;
    #undef	RETURN_TYPE_fs
    #define	RETURN_TYPE_fs FunctionSpecifier

    CPP_grammar_Parser_qualified_id_return q2;
    #undef	RETURN_TYPE_q2
    #define	RETURN_TYPE_q2 CPP_grammar_Parser_qualified_id_return

    /* Initialize rule variables
     */


    		lineNo = LT(1)->line;
    		//FunctionSpecifier fs = fsInvalid;	// inline,virtual,explicit
    	
    {
        // CPP_grammar_.g:416:2: ( ( ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN member_declaration | ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON ) | ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON | template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}?)=> ctor_definition | conversion_function_decl_or_def | class_head declaration_specifiers ( init_declarator_list )? SEMICOLON ) | ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}? ctor_declarator[1] ( COLON | LCURLY ) )=> ctor_definition | ( dtor_head[0] SEMICOLON )=> dtor_head[0] SEMICOLON | ( dtor_head[1] LCURLY )=> dtor_head[1] dtor_body | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ( 'friend' )? (fs= function_specifier )* class_specifier )=> ( 'friend' )? (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( (fs= function_specifier )* function_declarator[0] SEMICOLON )=> (fs= function_specifier )* function_declarator[0] SEMICOLON | ( (fs= function_specifier )* function_declarator[1] LCURLY )=> (fs= function_specifier )* function_declarator[1] compound_statement | ( ( 'inline' )? conversion_function_decl_or_def )=> ( 'inline' )? conversion_function_decl_or_def | ( qualified_id[NULL] SEMICOLON )=>q2= qualified_id[bufQualifiedIdScope] SEMICOLON | access_specifier COLON | SEMICOLON | 'antlrTrace_on' | 'antlrTrace_off' ) )
        // CPP_grammar_.g:417:2: ( ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN member_declaration | ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON ) | ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON | template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}?)=> ctor_definition | conversion_function_decl_or_def | class_head declaration_specifiers ( init_declarator_list )? SEMICOLON ) | ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}? ctor_declarator[1] ( COLON | LCURLY ) )=> ctor_definition | ( dtor_head[0] SEMICOLON )=> dtor_head[0] SEMICOLON | ( dtor_head[1] LCURLY )=> dtor_head[1] dtor_body | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ( 'friend' )? (fs= function_specifier )* class_specifier )=> ( 'friend' )? (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( (fs= function_specifier )* function_declarator[0] SEMICOLON )=> (fs= function_specifier )* function_declarator[0] SEMICOLON | ( (fs= function_specifier )* function_declarator[1] LCURLY )=> (fs= function_specifier )* function_declarator[1] compound_statement | ( ( 'inline' )? conversion_function_decl_or_def )=> ( 'inline' )? conversion_function_decl_or_def | ( qualified_id[NULL] SEMICOLON )=>q2= qualified_id[bufQualifiedIdScope] SEMICOLON | access_specifier COLON | SEMICOLON | 'antlrTrace_on' | 'antlrTrace_off' )
        {
            // CPP_grammar_.g:417:2: ( ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN member_declaration | ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON ) | ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON | template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}?)=> ctor_definition | conversion_function_decl_or_def | class_head declaration_specifiers ( init_declarator_list )? SEMICOLON ) | ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}? ctor_declarator[1] ( COLON | LCURLY ) )=> ctor_definition | ( dtor_head[0] SEMICOLON )=> dtor_head[0] SEMICOLON | ( dtor_head[1] LCURLY )=> dtor_head[1] dtor_body | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ( 'friend' )? (fs= function_specifier )* class_specifier )=> ( 'friend' )? (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( (fs= function_specifier )* function_declarator[0] SEMICOLON )=> (fs= function_specifier )* function_declarator[0] SEMICOLON | ( (fs= function_specifier )* function_declarator[1] LCURLY )=> (fs= function_specifier )* function_declarator[1] compound_statement | ( ( 'inline' )? conversion_function_decl_or_def )=> ( 'inline' )? conversion_function_decl_or_def | ( qualified_id[NULL] SEMICOLON )=>q2= qualified_id[bufQualifiedIdScope] SEMICOLON | access_specifier COLON | SEMICOLON | 'antlrTrace_on' | 'antlrTrace_off' )
            {
                int alt31=21;
                switch ( LA(1) )
                {
                case 160:
                	{
                		{
                		    int LA31_1 = LA(2);
                		    if ( (synpred23_CPP_grammar_(ctx)))
                		    {
                		        alt31=1;
                		    }
                		    else if ( (synpred29_CPP_grammar_(ctx)))
                		    {
                		        alt31=3;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt31=4;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 1;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 165:
                	{
                		{
                		    int LA31_2 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 2;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 133:
                	{
                		{
                		    int LA31_3 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 3;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 137:
                	{
                		{
                		    int LA31_4 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred42_CPP_grammar_(ctx)))
                		    {
                		        alt31=12;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 4;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 115:
                	{
                		{
                		    int LA31_5 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 5;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 150:
                	{
                		{
                		    int LA31_6 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 6;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 156:
                	{
                		{
                		    int LA31_7 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 7;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 143:
                	{
                		{
                		    int LA31_8 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 8;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 122:
                	{
                		{
                		    int LA31_9 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 9;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 173:
                	{
                		{
                		    int LA31_10 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 10;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 140:
                	{
                		{
                		    int LA31_11 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred36_CPP_grammar_(ctx)))
                		    {
                		        alt31=6;
                		    }
                		    else if ( (synpred37_CPP_grammar_(ctx)))
                		    {
                		        alt31=7;
                		    }
                		    else if ( (synpred38_CPP_grammar_(ctx)))
                		    {
                		        alt31=8;
                		    }
                		    else if ( (synpred39_CPP_grammar_(ctx)))
                		    {
                		        alt31=9;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred42_CPP_grammar_(ctx)))
                		    {
                		        alt31=12;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else if ( (synpred46_CPP_grammar_(ctx)))
                		    {
                		        alt31=16;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 11;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 171:
                	{
                		{
                		    int LA31_12 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred38_CPP_grammar_(ctx)))
                		    {
                		        alt31=8;
                		    }
                		    else if ( (synpred39_CPP_grammar_(ctx)))
                		    {
                		        alt31=9;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred42_CPP_grammar_(ctx)))
                		    {
                		        alt31=12;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 12;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 132:
                	{
                		{
                		    int LA31_13 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred36_CPP_grammar_(ctx)))
                		    {
                		        alt31=6;
                		    }
                		    else if ( (synpred37_CPP_grammar_(ctx)))
                		    {
                		        alt31=7;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred42_CPP_grammar_(ctx)))
                		    {
                		        alt31=12;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 13;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 89:
                case 102:
                	{
                		{
                		    int LA31_14 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 14;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case SCOPE:
                	{
                		{
                		    int LA31_15 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred36_CPP_grammar_(ctx)))
                		    {
                		        alt31=6;
                		    }
                		    else if ( (synpred37_CPP_grammar_(ctx)))
                		    {
                		        alt31=7;
                		    }
                		    else if ( (synpred38_CPP_grammar_(ctx)))
                		    {
                		        alt31=8;
                		    }
                		    else if ( (synpred39_CPP_grammar_(ctx)))
                		    {
                		        alt31=9;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else if ( (synpred47_CPP_grammar_(ctx)))
                		    {
                		        alt31=17;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 15;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case ID:
                	{
                		{
                		    int LA31_16 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred36_CPP_grammar_(ctx)))
                		    {
                		        alt31=6;
                		    }
                		    else if ( (synpred37_CPP_grammar_(ctx)))
                		    {
                		        alt31=7;
                		    }
                		    else if ( (synpred38_CPP_grammar_(ctx)))
                		    {
                		        alt31=8;
                		    }
                		    else if ( (synpred39_CPP_grammar_(ctx)))
                		    {
                		        alt31=9;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else if ( (synpred47_CPP_grammar_(ctx)))
                		    {
                		        alt31=17;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 16;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 167:
                	{
                		{
                		    int LA31_17 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 17;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 131:
                	{
                		{
                		    int LA31_18 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred35_CPP_grammar_(ctx)))
                		    {
                		        alt31=5;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 18;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 121:
                	{
                		{
                		    int LA31_19 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred42_CPP_grammar_(ctx)))
                		    {
                		        alt31=12;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 19;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 158:
                	{
                		{
                		    int LA31_20 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred42_CPP_grammar_(ctx)))
                		    {
                		        alt31=12;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 20;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 168:
                	{
                		{
                		    int LA31_21 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred42_CPP_grammar_(ctx)))
                		    {
                		        alt31=12;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 21;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 120:
                	{
                		{
                		    int LA31_22 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 22;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 174:
                	{
                		{
                		    int LA31_23 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 23;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 116:
                	{
                		{
                		    int LA31_24 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 24;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 153:
                	{
                		{
                		    int LA31_25 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 25;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 141:
                	{
                		{
                		    int LA31_26 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 26;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 95:
                case 108:
                	{
                		{
                		    int LA31_27 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 27;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 92:
                case 105:
                	{
                		{
                		    int LA31_28 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 28;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 93:
                case 106:
                	{
                		{
                		    int LA31_29 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 29;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 94:
                case 107:
                	{
                		{
                		    int LA31_30 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 30;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 100:
                case 112:
                	{
                		{
                		    int LA31_31 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 31;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 142:
                	{
                		{
                		    int LA31_32 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 32;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 154:
                	{
                		{
                		    int LA31_33 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 33;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 169:
                	{
                		{
                		    int LA31_34 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 34;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 135:
                	{
                		{
                		    int LA31_35 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 35;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 128:
                	{
                		{
                		    int LA31_36 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 36;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 172:
                	{
                		{
                		    int LA31_37 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 37;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 170:
                	{
                		{
                		    int LA31_38 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 38;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case TILDE:
                	{
                		{
                		    int LA31_39 = LA(2);
                		    if ( (synpred38_CPP_grammar_(ctx)))
                		    {
                		        alt31=8;
                		    }
                		    else if ( (synpred39_CPP_grammar_(ctx)))
                		    {
                		        alt31=9;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else if ( (synpred47_CPP_grammar_(ctx)))
                		    {
                		        alt31=17;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 39;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case AMPERSAND:
                	{
                		{
                		    int LA31_40 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 40;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 88:
                case 101:
                	{
                		{
                		    int LA31_41 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 41;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 97:
                case 109:
                	{
                		{
                		    int LA31_42 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 42;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 90:
                case 103:
                	{
                		{
                		    int LA31_43 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 43;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 96:
                	{
                		{
                		    int LA31_44 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 44;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 98:
                case 110:
                case 146:
                	{
                		{
                		    int LA31_45 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 45;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 99:
                case 111:
                	{
                		{
                		    int LA31_46 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 46;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case STAR:
                	{
                		{
                		    int LA31_47 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 47;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case LPAREN:
                	{
                		{
                		    int LA31_48 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 48;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case OPERATOR:
                	{
                		{
                		    int LA31_49 = LA(2);
                		    if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else if ( (synpred46_CPP_grammar_(ctx)))
                		    {
                		        alt31=16;
                		    }
                		    else if ( (synpred47_CPP_grammar_(ctx)))
                		    {
                		        alt31=17;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 49;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 91:
                case 104:
                	{
                		{
                		    int LA31_50 = LA(2);
                		    if ( (synpred24_CPP_grammar_(ctx)))
                		    {
                		        alt31=2;
                		    }
                		    else if ( (synpred36_CPP_grammar_(ctx)))
                		    {
                		        alt31=6;
                		    }
                		    else if ( (synpred37_CPP_grammar_(ctx)))
                		    {
                		        alt31=7;
                		    }
                		    else if ( (synpred38_CPP_grammar_(ctx)))
                		    {
                		        alt31=8;
                		    }
                		    else if ( (synpred39_CPP_grammar_(ctx)))
                		    {
                		        alt31=9;
                		    }
                		    else if ( (synpred40_CPP_grammar_(ctx)))
                		    {
                		        alt31=10;
                		    }
                		    else if ( (synpred41_CPP_grammar_(ctx)))
                		    {
                		        alt31=11;
                		    }
                		    else if ( (synpred42_CPP_grammar_(ctx)))
                		    {
                		        alt31=12;
                		    }
                		    else if ( (synpred43_CPP_grammar_(ctx)))
                		    {
                		        alt31=13;
                		    }
                		    else if ( (synpred44_CPP_grammar_(ctx)))
                		    {
                		        alt31=14;
                		    }
                		    else if ( (synpred45_CPP_grammar_(ctx)))
                		    {
                		        alt31=15;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 31;
                		        EXCEPTION->state        = 50;


                		        goto rulemember_declarationEx;

                		    }
                		}
                	}
                    break;
                case 147:
                case 148:
                case 149:
                	{
                		alt31=18;
                	}
                    break;
                case SEMICOLON:
                	{
                		alt31=19;
                	}
                    break;
                case 114:
                	{
                		alt31=20;
                	}
                    break;
                case 113:
                	{
                		alt31=21;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 31;
                    EXCEPTION->state        = 0;


                    goto rulemember_declarationEx;

                }

                switch (alt31)
                {
            	case 1:
            	    // CPP_grammar_.g:419:3: ( 'template' LESSTHAN GREATERTHAN )=> 'template' LESSTHAN GREATERTHAN member_declaration
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if(statementTrace>=1) 
            	            			printf("%d member_declaration Template explicit-specialisation\n",LT(1)->line);
            	            		
            	        }


            	         MATCHT(160, &FOLLOW_160_in_member_declaration1165);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_member_declaration1167);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_member_declaration1169);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_member_declaration_in_member_declaration1171);
            	        member_declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:429:3: ( 'typedef' )=> ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON )
            	    {
            	        // CPP_grammar_.g:430:3: ( ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration | ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON )
            	        {
            	            int alt18=4;
            	            switch ( LA(1) )
            	            {
            	            case 165:
            	            	{
            	            		{
            	            		    int LA18_1 = LA(2);
            	            		    if ( (synpred25_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=1;
            	            		    }
            	            		    else if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else if ( (synpred28_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=4;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 1;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 133:
            	            	{
            	            		{
            	            		    int LA18_2 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 2;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 137:
            	            	{
            	            		{
            	            		    int LA18_3 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 3;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 115:
            	            	{
            	            		{
            	            		    int LA18_4 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 4;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 150:
            	            	{
            	            		{
            	            		    int LA18_5 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 5;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 156:
            	            	{
            	            		{
            	            		    int LA18_6 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 6;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 143:
            	            	{
            	            		{
            	            		    int LA18_7 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 7;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 122:
            	            	{
            	            		{
            	            		    int LA18_8 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 8;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 173:
            	            	{
            	            		{
            	            		    int LA18_9 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 9;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 91:
            	            case 104:
            	            case 140:
            	            	{
            	            		{
            	            		    int LA18_10 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 10;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 171:
            	            	{
            	            		{
            	            		    int LA18_11 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 11;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 132:
            	            	{
            	            		{
            	            		    int LA18_12 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 12;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 89:
            	            case 102:
            	            	{
            	            		{
            	            		    int LA18_13 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 13;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case SCOPE:
            	            	{
            	            		{
            	            		    int LA18_14 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 14;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case ID:
            	            	{
            	            		{
            	            		    int LA18_15 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 15;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 167:
            	            	{
            	            		{
            	            		    int LA18_16 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 16;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 131:
            	            	{
            	            		{
            	            		    int LA18_17 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 17;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 121:
            	            	{
            	            		{
            	            		    int LA18_18 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 18;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 158:
            	            	{
            	            		{
            	            		    int LA18_19 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 19;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 168:
            	            	{
            	            		{
            	            		    int LA18_20 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 20;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 120:
            	            	{
            	            		{
            	            		    int LA18_21 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 21;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 174:
            	            	{
            	            		{
            	            		    int LA18_22 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 22;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 116:
            	            	{
            	            		{
            	            		    int LA18_23 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 23;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 153:
            	            	{
            	            		{
            	            		    int LA18_24 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 24;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 141:
            	            	{
            	            		{
            	            		    int LA18_25 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 25;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 95:
            	            case 108:
            	            	{
            	            		{
            	            		    int LA18_26 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 26;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 92:
            	            case 105:
            	            	{
            	            		{
            	            		    int LA18_27 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 27;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 93:
            	            case 106:
            	            	{
            	            		{
            	            		    int LA18_28 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 28;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 94:
            	            case 107:
            	            	{
            	            		{
            	            		    int LA18_29 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 29;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 100:
            	            case 112:
            	            	{
            	            		{
            	            		    int LA18_30 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 30;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 142:
            	            	{
            	            		{
            	            		    int LA18_31 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 31;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 154:
            	            	{
            	            		{
            	            		    int LA18_32 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 32;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 169:
            	            	{
            	            		{
            	            		    int LA18_33 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 33;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 135:
            	            	{
            	            		{
            	            		    int LA18_34 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 34;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 128:
            	            	{
            	            		{
            	            		    int LA18_35 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 35;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 172:
            	            	{
            	            		{
            	            		    int LA18_36 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 36;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case 170:
            	            	{
            	            		{
            	            		    int LA18_37 = LA(2);
            	            		    if ( (synpred26_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=2;
            	            		    }
            	            		    else if ( (synpred27_CPP_grammar_(ctx)))
            	            		    {
            	            		        alt18=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (BACKTRACKING>0)
            	            		        {
            	            		            FAILEDFLAG = ANTLR3_TRUE;
            	            		            return ;
            	            		        }


            	            		        CONSTRUCTEX();
            	            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		        EXCEPTION->message      = (void *)"";
            	            		        EXCEPTION->decisionNum  = 18;
            	            		        EXCEPTION->state        = 37;


            	            		        goto rulemember_declarationEx;

            	            		    }
            	            		}
            	            	}
            	                break;

            	            default:
            	                if (BACKTRACKING>0)
            	                {
            	                    FAILEDFLAG = ANTLR3_TRUE;
            	                    return ;
            	                }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 18;
            	                EXCEPTION->state        = 0;


            	                goto rulemember_declarationEx;

            	            }

            	            switch (alt18)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:431:4: ( 'typedef' 'enum' )=> 'typedef' enum_specifier ( init_declarator_list )? SEMICOLON
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if(statementTrace>=1) 
            	        	            				printf("%d member_declaration Typedef enum type\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	         MATCHT(165, &FOLLOW_165_in_member_declaration1215);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_enum_specifier_in_member_declaration1217);
            	        	        enum_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            _td = TRUE;
            	        	        }


            	        	        // CPP_grammar_.g:435:43: ( init_declarator_list )?
            	        	        {
            	        	            int alt16=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case AMPERSAND:
            	        	                case COLON:
            	        	                case ID:
            	        	                case LPAREN:
            	        	                case OPERATOR:
            	        	                case SCOPE:
            	        	                case STAR:
            	        	                case TILDE:
            	        	                case 88:
            	        	                case 90:
            	        	                case 96:
            	        	                case 97:
            	        	                case 98:
            	        	                case 99:
            	        	                case 101:
            	        	                case 103:
            	        	                case 109:
            	        	                case 110:
            	        	                case 111:
            	        	                case 146:
            	        	                	{
            	        	                		alt16=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt16)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:435:44: init_declarator_list
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_member_declaration1222);
            	        	        	        init_declarator_list(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulemember_declarationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1226);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            end_of_stmt();
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:437:4: ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if(statementTrace>=1) 
            	        	            				printf("%d member_declaration Typedef function type\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_declaration_in_member_declaration1256);
            	        	        declaration(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CPP_grammar_.g:444:4: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if(statementTrace>=1) 
            	        	            				printf("%d member_declaration Typedef variable type\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_declaration_in_member_declaration1289);
            	        	        declaration(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // CPP_grammar_.g:451:4: ( 'typedef' class_specifier )=> 'typedef' class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if(statementTrace>=1) 
            	        	            				printf("%d member_declaration Typedef class type\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	         MATCHT(165, &FOLLOW_165_in_member_declaration1317);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_class_decl_or_def_in_member_declaration1319);
            	        	        class_decl_or_def(ctx, bufQualifiedIdScope, fs);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            _td = TRUE;
            	        	        }


            	        	        // CPP_grammar_.g:455:71: ( init_declarator_list )?
            	        	        {
            	        	            int alt17=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case AMPERSAND:
            	        	                case COLON:
            	        	                case ID:
            	        	                case LPAREN:
            	        	                case OPERATOR:
            	        	                case SCOPE:
            	        	                case STAR:
            	        	                case TILDE:
            	        	                case 88:
            	        	                case 90:
            	        	                case 96:
            	        	                case 97:
            	        	                case 98:
            	        	                case 99:
            	        	                case 101:
            	        	                case 103:
            	        	                case 109:
            	        	                case 110:
            	        	                case 111:
            	        	                case 146:
            	        	                	{
            	        	                		alt17=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt17)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:455:72: init_declarator_list
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_member_declaration1325);
            	        	        	        init_declarator_list(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulemember_declarationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1329);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            end_of_stmt();
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:461:3: ( template_head (fs= function_specifier )* class_specifier )=> template_head (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Templated class decl or def\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_template_head_in_member_declaration1374);
            	        template_head(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:465:17: (fs= function_specifier )*

            	        for (;;)
            	        {
            	            int alt19=2;
            	            switch ( LA(1) )
            	            {
            	            case 91:
            	            case 104:
            	            case 132:
            	            case 140:
            	            case 171:
            	            	{
            	            		alt19=1;
            	            	}
            	                break;

            	            }

            	            switch (alt19)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:465:18: fs= function_specifier
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_function_specifier_in_member_declaration1381);
            	        	        fs=function_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop19;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop19: ; /* Jump out to here if this rule does not match */


            	        FOLLOWPUSH(FOLLOW_class_decl_or_def_in_member_declaration1385);
            	        class_decl_or_def(ctx, bufQualifiedIdScope, fs);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:465:87: ( init_declarator_list )?
            	        {
            	            int alt20=2;
            	            switch ( LA(1) )
            	            {
            	                case AMPERSAND:
            	                case COLON:
            	                case ID:
            	                case LPAREN:
            	                case OPERATOR:
            	                case SCOPE:
            	                case STAR:
            	                case TILDE:
            	                case 88:
            	                case 90:
            	                case 96:
            	                case 97:
            	                case 98:
            	                case 99:
            	                case 101:
            	                case 103:
            	                case 109:
            	                case 110:
            	                case 111:
            	                case 146:
            	                	{
            	                		alt20=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt20)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:465:88: init_declarator_list
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_member_declaration1389);
            	        	        init_declarator_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1393);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 4:
            	    // CPP_grammar_.g:468:3: template_head ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}?)=> ctor_definition | conversion_function_decl_or_def | class_head declaration_specifiers ( init_declarator_list )? SEMICOLON )
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            beginTemplateDeclaration();
            	        }


            	        FOLLOWPUSH(FOLLOW_template_head_in_member_declaration1412);
            	        template_head(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:470:3: ( ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON | ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration | ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition | ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON | ( ctor_decl_spec {...}?)=> ctor_definition | conversion_function_decl_or_def | class_head declaration_specifiers ( init_declarator_list )? SEMICOLON )
            	        {
            	            int alt23=7;
            	            {
            	                int LA23_0 = LA(1);
            	                if ( (LA23_0 == 165))
            	                {
            	                    {
            	                        int LA23_1 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 1;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 137))
            	                {
            	                    {
            	                        int LA23_2 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 2;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 115))
            	                {
            	                    {
            	                        int LA23_3 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 3;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 150))
            	                {
            	                    {
            	                        int LA23_4 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 4;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 156))
            	                {
            	                    {
            	                        int LA23_5 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 5;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 133))
            	                {
            	                    {
            	                        int LA23_6 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 6;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 143))
            	                {
            	                    {
            	                        int LA23_7 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 7;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 122))
            	                {
            	                    {
            	                        int LA23_8 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 8;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 173))
            	                {
            	                    {
            	                        int LA23_9 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 9;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 91 || LA23_0 == 104 || LA23_0 == 140))
            	                {
            	                    {
            	                        int LA23_10 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else if ( (synpred33_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=4;
            	                        }
            	                        else if ( (synpred34_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=5;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 10;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 171))
            	                {
            	                    {
            	                        int LA23_11 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 11;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 132))
            	                {
            	                    {
            	                        int LA23_12 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else if ( (synpred33_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=4;
            	                        }
            	                        else if ( (synpred34_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=5;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 12;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 89 || LA23_0 == 102))
            	                {
            	                    {
            	                        int LA23_13 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 13;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == SCOPE))
            	                {
            	                    {
            	                        int LA23_14 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else if ( (synpred33_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=4;
            	                        }
            	                        else if ( (synpred34_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=5;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 14;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == ID))
            	                {
            	                    {
            	                        int LA23_15 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else if ( (synpred33_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=4;
            	                        }
            	                        else if ( (synpred34_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=5;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 15;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 167))
            	                {
            	                    {
            	                        int LA23_16 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 16;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 131))
            	                {
            	                    {
            	                        int LA23_17 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 17;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 121))
            	                {
            	                    {
            	                        int LA23_18 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt23=7;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 18;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 158))
            	                {
            	                    {
            	                        int LA23_19 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt23=7;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 19;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 168))
            	                {
            	                    {
            	                        int LA23_20 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt23=7;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 20;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 120))
            	                {
            	                    {
            	                        int LA23_21 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 21;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 174))
            	                {
            	                    {
            	                        int LA23_22 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 22;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 116))
            	                {
            	                    {
            	                        int LA23_23 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 23;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 153))
            	                {
            	                    {
            	                        int LA23_24 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 24;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 141))
            	                {
            	                    {
            	                        int LA23_25 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 25;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 95 || LA23_0 == 108))
            	                {
            	                    {
            	                        int LA23_26 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 26;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 92 || LA23_0 == 105))
            	                {
            	                    {
            	                        int LA23_27 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 27;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 93 || LA23_0 == 106))
            	                {
            	                    {
            	                        int LA23_28 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 28;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 94 || LA23_0 == 107))
            	                {
            	                    {
            	                        int LA23_29 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 29;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 100 || LA23_0 == 112))
            	                {
            	                    {
            	                        int LA23_30 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 30;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 142))
            	                {
            	                    {
            	                        int LA23_31 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 31;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 154))
            	                {
            	                    {
            	                        int LA23_32 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 32;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 169))
            	                {
            	                    {
            	                        int LA23_33 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 33;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 135))
            	                {
            	                    {
            	                        int LA23_34 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 34;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 128))
            	                {
            	                    {
            	                        int LA23_35 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 35;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA23_0 == 172))
            	                {
            	                    {
            	                        int LA23_36 = LA(2);
            	                        if ( (synpred30_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=1;
            	                        }
            	                        else if ( (synpred31_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=2;
            	                        }
            	                        else if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 36;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (synpred31_CPP_grammar_(ctx)) && (LA23_0 == 170))
            	                {
            	                    alt23=2;
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == AMPERSAND))
            	                {
            	                    alt23=3;
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == 88 || LA23_0 == 101))
            	                {
            	                    alt23=3;
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == 97 || LA23_0 == 109))
            	                {
            	                    alt23=3;
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == 90 || LA23_0 == 103))
            	                {
            	                    alt23=3;
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == 96))
            	                {
            	                    alt23=3;
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == 98 || LA23_0 == 110 || LA23_0 == 146))
            	                {
            	                    alt23=3;
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == 99 || LA23_0 == 111))
            	                {
            	                    alt23=3;
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == STAR))
            	                {
            	                    alt23=3;
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == LPAREN))
            	                {
            	                    alt23=3;
            	                }
            	                else if ( (LA23_0 == OPERATOR))
            	                {
            	                    {
            	                        int LA23_47 = LA(2);
            	                        if ( (synpred32_CPP_grammar_(ctx)))
            	                        {
            	                            alt23=3;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt23=6;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 23;
            	                            EXCEPTION->state        = 47;


            	                            goto rulemember_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (synpred32_CPP_grammar_(ctx)) && (LA23_0 == TILDE))
            	                {
            	                    alt23=3;
            	                }
            	                else
            	                {
            	                    if (BACKTRACKING>0)
            	                    {
            	                        FAILEDFLAG = ANTLR3_TRUE;
            	                        return ;
            	                    }


            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 23;
            	                    EXCEPTION->state        = 0;


            	                    goto rulemember_declarationEx;

            	                }
            	            }
            	            switch (alt23)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:472:4: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration_specifiers ( init_declarator_list )? SEMICOLON
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d member_declaration Templated forward declaration\n",LT(1)->line);
            	        	            				// DW 15/11/10 The above line amd other 6 were changed from antlr2. Insertion of backslash and replace getLine() with line
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_member_declaration1447);
            	        	        declaration_specifiers(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        // CPP_grammar_.g:477:27: ( init_declarator_list )?
            	        	        {
            	        	            int alt21=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case AMPERSAND:
            	        	                case COLON:
            	        	                case ID:
            	        	                case LPAREN:
            	        	                case OPERATOR:
            	        	                case SCOPE:
            	        	                case STAR:
            	        	                case TILDE:
            	        	                case 88:
            	        	                case 90:
            	        	                case 96:
            	        	                case 97:
            	        	                case 98:
            	        	                case 99:
            	        	                case 101:
            	        	                case 103:
            	        	                case 109:
            	        	                case 110:
            	        	                case 111:
            	        	                case 146:
            	        	                	{
            	        	                		alt21=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt21)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:477:28: init_declarator_list
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_member_declaration1450);
            	        	        	        init_declarator_list(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulemember_declarationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1454);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            end_of_stmt();
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:480:4: ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d member_declaration Templated function declaration\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_declaration_in_member_declaration1487);
            	        	        declaration(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CPP_grammar_.g:487:4: ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d member_declaration Templated function definition\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_function_definition_in_member_declaration1521);
            	        	        function_definition(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // CPP_grammar_.g:494:4: ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d member_declaration Templated constructor declarator\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_ctor_decl_spec_in_member_declaration1568);
            	        	        ctor_decl_spec(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_ctor_declarator_in_member_declaration1570);
            	        	        ctor_declarator(ctx, 0);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1573);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            end_of_stmt();
            	        	        }


            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // CPP_grammar_.g:506:4: ( ctor_decl_spec {...}?)=> ctor_definition
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d member_declaration Templated constructor definition\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_ctor_definition_in_member_declaration1616);
            	        	        ctor_definition(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // CPP_grammar_.g:514:4: conversion_function_decl_or_def
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d member_declaration Templated operator function\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_conversion_function_decl_or_def_in_member_declaration1634);
            	        	        conversion_function_decl_or_def(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 7:
            	        	    // CPP_grammar_.g:520:4: class_head declaration_specifiers ( init_declarator_list )? SEMICOLON
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            if (statementTrace>=1) 
            	        	            				printf("%d member_declaration Templated class definition\n",LT(1)->line);
            	        	            			
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_class_head_in_member_declaration1652);
            	        	        class_head(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_member_declaration1654);
            	        	        declaration_specifiers(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        // CPP_grammar_.g:523:38: ( init_declarator_list )?
            	        	        {
            	        	            int alt22=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case AMPERSAND:
            	        	                case COLON:
            	        	                case ID:
            	        	                case LPAREN:
            	        	                case OPERATOR:
            	        	                case SCOPE:
            	        	                case STAR:
            	        	                case TILDE:
            	        	                case 88:
            	        	                case 90:
            	        	                case 96:
            	        	                case 97:
            	        	                case 98:
            	        	                case 99:
            	        	                case 101:
            	        	                case 103:
            	        	                case 109:
            	        	                case 110:
            	        	                case 111:
            	        	                case 146:
            	        	                	{
            	        	                		alt22=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt22)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:523:39: init_declarator_list
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_member_declaration1657);
            	        	        	        init_declarator_list(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulemember_declarationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1661);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            end_of_stmt();
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        if ( BACKTRACKING==0 )
            	        {
            	            endTemplateDeclaration();
            	        }


            	    }
            	    break;
            	case 5:
            	    // CPP_grammar_.g:528:3: ( 'enum' ( ID )? LCURLY )=> enum_specifier ( init_declarator_list )? SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Enum definition\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_enum_specifier_in_member_declaration1699);
            	        enum_specifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:532:18: ( init_declarator_list )?
            	        {
            	            int alt24=2;
            	            switch ( LA(1) )
            	            {
            	                case AMPERSAND:
            	                case COLON:
            	                case ID:
            	                case LPAREN:
            	                case OPERATOR:
            	                case SCOPE:
            	                case STAR:
            	                case TILDE:
            	                case 88:
            	                case 90:
            	                case 96:
            	                case 97:
            	                case 98:
            	                case 99:
            	                case 101:
            	                case 103:
            	                case 109:
            	                case 110:
            	                case 111:
            	                case 146:
            	                	{
            	                		alt24=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt24)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:532:19: init_declarator_list
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_member_declaration1702);
            	        	        init_declarator_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1706);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 6:
            	    // CPP_grammar_.g:535:3: ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )=> ctor_decl_spec ctor_declarator[0] SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Constructor declarator\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_ctor_decl_spec_in_member_declaration1747);
            	        ctor_decl_spec(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_ctor_declarator_in_member_declaration1749);
            	        ctor_declarator(ctx, 0);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1752);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 7:
            	    // CPP_grammar_.g:549:3: ( ctor_decl_spec {...}? ctor_declarator[1] ( COLON | LCURLY ) )=> ctor_definition
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Constructor definition\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_ctor_definition_in_member_declaration1836);
            	        ctor_definition(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 8:
            	    // CPP_grammar_.g:564:3: ( dtor_head[0] SEMICOLON )=> dtor_head[0] SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Destructor declaration\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_dtor_head_in_member_declaration1869);
            	        dtor_head(ctx, 0);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1872);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 9:
            	    // CPP_grammar_.g:573:3: ( dtor_head[1] LCURLY )=> dtor_head[1] dtor_body
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Destructor definition\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_dtor_head_in_member_declaration1904);
            	        dtor_head(ctx, 1);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_dtor_body_in_member_declaration1907);
            	        dtor_body(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 10:
            	    // CPP_grammar_.g:581:3: ( declaration_specifiers function_declarator[0] SEMICOLON )=> declaration_specifiers function_declarator[0] SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Function declaration\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_member_declaration1934);
            	        declaration_specifiers(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_function_declarator_in_member_declaration1936);
            	        function_declarator(ctx, 0);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration1939);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 11:
            	    // CPP_grammar_.g:589:3: ( declaration_specifiers function_declarator[1] LCURLY )=> function_definition
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Function definition\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_function_definition_in_member_declaration1971);
            	        function_definition(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 12:
            	    // CPP_grammar_.g:597:3: ( ( 'friend' )? (fs= function_specifier )* class_specifier )=> ( 'friend' )? (fs= function_specifier )* class_decl_or_def[bufQualifiedIdScope, fs] ( init_declarator_list )? SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Class decl or def\n",LT(1)->line);
            	            		
            	        }


            	        // CPP_grammar_.g:601:3: ( 'friend' )?
            	        {
            	            int alt25=2;
            	            switch ( LA(1) )
            	            {
            	                case 137:
            	                	{
            	                		alt25=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt25)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:601:4: 'friend'
            	        	    {
            	        	         MATCHT(137, &FOLLOW_137_in_member_declaration2009);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // CPP_grammar_.g:601:15: (fs= function_specifier )*

            	        for (;;)
            	        {
            	            int alt26=2;
            	            switch ( LA(1) )
            	            {
            	            case 91:
            	            case 104:
            	            case 132:
            	            case 140:
            	            case 171:
            	            	{
            	            		alt26=1;
            	            	}
            	                break;

            	            }

            	            switch (alt26)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:601:16: fs= function_specifier
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_function_specifier_in_member_declaration2018);
            	        	        fs=function_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop26;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop26: ; /* Jump out to here if this rule does not match */


            	        FOLLOWPUSH(FOLLOW_class_decl_or_def_in_member_declaration2022);
            	        class_decl_or_def(ctx, bufQualifiedIdScope, fs);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:601:85: ( init_declarator_list )?
            	        {
            	            int alt27=2;
            	            switch ( LA(1) )
            	            {
            	                case AMPERSAND:
            	                case COLON:
            	                case ID:
            	                case LPAREN:
            	                case OPERATOR:
            	                case SCOPE:
            	                case STAR:
            	                case TILDE:
            	                case 88:
            	                case 90:
            	                case 96:
            	                case 97:
            	                case 98:
            	                case 99:
            	                case 101:
            	                case 103:
            	                case 109:
            	                case 110:
            	                case 111:
            	                case 146:
            	                	{
            	                		alt27=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt27)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:601:86: init_declarator_list
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_member_declaration2026);
            	        	        init_declarator_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration2030);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 13:
            	    // CPP_grammar_.g:603:3: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )=> declaration
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Declaration\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_declaration_in_member_declaration2058);
            	        declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 14:
            	    // CPP_grammar_.g:610:3: ( (fs= function_specifier )* function_declarator[0] SEMICOLON )=> (fs= function_specifier )* function_declarator[0] SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            fprintf(stderr,"%d warning Function declaration found without return type\n",LT(1)->line);
            	            		 if (statementTrace>=1) 
            	            			printf("%d member_declaration Function declaration\n",LT(1)->line);
            	            		
            	        }


            	        // CPP_grammar_.g:615:3: (fs= function_specifier )*

            	        for (;;)
            	        {
            	            int alt28=2;
            	            switch ( LA(1) )
            	            {
            	            case 91:
            	            case 104:
            	            case 132:
            	            case 140:
            	            case 171:
            	            	{
            	            		alt28=1;
            	            	}
            	                break;

            	            }

            	            switch (alt28)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:615:4: fs= function_specifier
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_function_specifier_in_member_declaration2097);
            	        	        fs=function_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop28;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop28: ; /* Jump out to here if this rule does not match */


            	        FOLLOWPUSH(FOLLOW_function_declarator_in_member_declaration2101);
            	        function_declarator(ctx, 0);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration2104);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 15:
            	    // CPP_grammar_.g:618:3: ( (fs= function_specifier )* function_declarator[1] LCURLY )=> (fs= function_specifier )* function_declarator[1] compound_statement
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            fprintf(stderr,"%d warning Function definition found without return type\n",LT(1)->line);
            	            		 if (statementTrace>=1) 
            	            			printf("%d member_declaration Function definition without return type\n",LT(1)->line);
            	            		
            	        }


            	        // CPP_grammar_.g:623:3: (fs= function_specifier )*

            	        for (;;)
            	        {
            	            int alt29=2;
            	            switch ( LA(1) )
            	            {
            	            case 91:
            	            case 104:
            	            case 132:
            	            case 140:
            	            case 171:
            	            	{
            	            		alt29=1;
            	            	}
            	                break;

            	            }

            	            switch (alt29)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:623:4: fs= function_specifier
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_function_specifier_in_member_declaration2144);
            	        	        fs=function_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop29;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop29: ; /* Jump out to here if this rule does not match */


            	        FOLLOWPUSH(FOLLOW_function_declarator_in_member_declaration2148);
            	        function_declarator(ctx, 1);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_compound_statement_in_member_declaration2151);
            	        compound_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            endFunctionDefinition();
            	        }


            	    }
            	    break;
            	case 16:
            	    // CPP_grammar_.g:626:3: ( ( 'inline' )? conversion_function_decl_or_def )=> ( 'inline' )? conversion_function_decl_or_def
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Operator function\n",LT(1)->line);
            	            		
            	        }


            	        // CPP_grammar_.g:630:3: ( 'inline' )?
            	        {
            	            int alt30=2;
            	            switch ( LA(1) )
            	            {
            	                case 140:
            	                	{
            	                		alt30=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt30)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:630:4: 'inline'
            	        	    {
            	        	         MATCHT(140, &FOLLOW_140_in_member_declaration2180);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemember_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_conversion_function_decl_or_def_in_member_declaration2184);
            	        conversion_function_decl_or_def(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 17:
            	    // CPP_grammar_.g:635:3: ( qualified_id[NULL] SEMICOLON )=>q2= qualified_id[bufQualifiedIdScope] SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Qualified ID\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_qualified_id_in_member_declaration2220);
            	        q2=qualified_id(ctx, bufQualifiedIdScope);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration2223);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 18:
            	    // CPP_grammar_.g:643:3: access_specifier COLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Access specifier\n",LT(1)->line);
            	            		
            	        }


            	        FOLLOWPUSH(FOLLOW_access_specifier_in_member_declaration2241);
            	        access_specifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(COLON, &FOLLOW_COLON_in_member_declaration2243);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 19:
            	    // CPP_grammar_.g:649:3: SEMICOLON
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            if (statementTrace>=1) 
            	            			printf("%d member_declaration Semicolon\n",LT(1)->line);
            	            		
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_member_declaration2257);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 20:
            	    // CPP_grammar_.g:656:3: 'antlrTrace_on'
            	    {
            	         MATCHT(114, &FOLLOW_114_in_member_declaration2273);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            antlrTrace(TRUE);
            	        }


            	    }
            	    break;
            	case 21:
            	    // CPP_grammar_.g:659:3: 'antlrTrace_off'
            	    {
            	         MATCHT(113, &FOLLOW_113_in_member_declaration2285);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemember_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            antlrTrace(FALSE);
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulemember_declarationEx; /* Prevent compiler warnings */
    rulemember_declarationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end member_declaration */

/**
 * $ANTLR start namespace_definition
 * CPP_grammar_.g:666:1: namespace_definition : (ns= ID )? LCURLY ( external_declaration )* RCURLY ;
 */
static void
namespace_definition(pCPP_grammar_Parser ctx)
{
    pANTLR3_COMMON_TOKEN    ns;

    /* Initialize rule variables
     */

    ns       = NULL;

    {
        // CPP_grammar_.g:667:2: ( (ns= ID )? LCURLY ( external_declaration )* RCURLY )
        // CPP_grammar_.g:668:3: (ns= ID )? LCURLY ( external_declaration )* RCURLY
        {
            // CPP_grammar_.g:668:3: (ns= ID )?
            {
                int alt32=2;
                switch ( LA(1) )
                {
                    case ID:
                    	{
                    		alt32=1;
                    	}
                        break;
                }

                switch (alt32)
                {
            	case 1:
            	    // CPP_grammar_.g:668:4: ns= ID
            	    {
            	        ns = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_namespace_definition2311);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenamespace_definitionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            declaratorID(((ns->getText(ns))->chars),qiType);
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(LCURLY, &FOLLOW_LCURLY_in_namespace_definition2318);
            if  (HASEXCEPTION())
            {
                goto rulenamespace_definitionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                enterNewLocalScope();
            }


            // CPP_grammar_.g:671:3: ( external_declaration )*

            for (;;)
            {
                int alt33=2;
                switch ( LA(1) )
                {
                case AMPERSAND:
                case ID:
                case LPAREN:
                case OPERATOR:
                case SCOPE:
                case SEMICOLON:
                case STAR:
                case TILDE:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 120:
                case 121:
                case 122:
                case 128:
                case 131:
                case 132:
                case 133:
                case 135:
                case 137:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 146:
                case 150:
                case 153:
                case 154:
                case 156:
                case 158:
                case 160:
                case 165:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                	{
                		alt33=1;
                	}
                    break;

                }

                switch (alt33)
                {
            	case 1:
            	    // CPP_grammar_.g:671:4: external_declaration
            	    {
            	        FOLLOWPUSH(FOLLOW_external_declaration_in_namespace_definition2328);
            	        external_declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenamespace_definitionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop33;	/* break out of the loop */
            	    break;
                }
            }
            loop33: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING==0 )
            {
                exitLocalScope();
            }


             MATCHT(RCURLY, &FOLLOW_RCURLY_in_namespace_definition2338);
            if  (HASEXCEPTION())
            {
                goto rulenamespace_definitionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenamespace_definitionEx; /* Prevent compiler warnings */
    rulenamespace_definitionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end namespace_definition */

/**
 * $ANTLR start namespace_alias_definition
 * CPP_grammar_.g:677:1: namespace_alias_definition : 'namespace' ns2= ID ASSIGNEQUAL qid2= qualified_id[bufQualifiedIdScope] SEMICOLON ;
 */
static void
namespace_alias_definition(pCPP_grammar_Parser ctx)
{

    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    pANTLR3_COMMON_TOKEN    ns2;
    CPP_grammar_Parser_qualified_id_return qid2;
    #undef	RETURN_TYPE_qid2
    #define	RETURN_TYPE_qid2 CPP_grammar_Parser_qualified_id_return

    /* Initialize rule variables
     */

    ns2       = NULL;

    {
        // CPP_grammar_.g:681:2: ( 'namespace' ns2= ID ASSIGNEQUAL qid2= qualified_id[bufQualifiedIdScope] SEMICOLON )
        // CPP_grammar_.g:682:3: 'namespace' ns2= ID ASSIGNEQUAL qid2= qualified_id[bufQualifiedIdScope] SEMICOLON
        {
             MATCHT(144, &FOLLOW_144_in_namespace_alias_definition2358);
            if  (HASEXCEPTION())
            {
                goto rulenamespace_alias_definitionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            ns2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_namespace_alias_definition2364);
            if  (HASEXCEPTION())
            {
                goto rulenamespace_alias_definitionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                declaratorID((ns2->getText(ns2))->chars,qiType);
            }


             MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_namespace_alias_definition2370);
            if  (HASEXCEPTION())
            {
                goto rulenamespace_alias_definitionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_qualified_id_in_namespace_alias_definition2376);
            qid2=qualified_id(ctx, bufQualifiedIdScope);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulenamespace_alias_definitionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_namespace_alias_definition2379);
            if  (HASEXCEPTION())
            {
                goto rulenamespace_alias_definitionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                end_of_stmt();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenamespace_alias_definitionEx; /* Prevent compiler warnings */
    rulenamespace_alias_definitionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end namespace_alias_definition */

/**
 * $ANTLR start function_definition
 * CPP_grammar_.g:688:1: function_definition : ({...}? declaration_specifiers function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement | function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement ) ;
 */
static void
function_definition(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */


    		lineNo = LT(1)->line;
    	
    {
        // CPP_grammar_.g:692:2: ( ({...}? declaration_specifiers function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement | function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement ) )
        // CPP_grammar_.g:693:2: ({...}? declaration_specifiers function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement | function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement )
        {
            // CPP_grammar_.g:693:2: ({...}? declaration_specifiers function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement | function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement )
            {
                int alt38=2;
                switch ( LA(1) )
                {
                case 89:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 100:
                case 102:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 112:
                case 115:
                case 116:
                case 120:
                case 121:
                case 122:
                case 128:
                case 131:
                case 132:
                case 133:
                case 135:
                case 137:
                case 140:
                case 141:
                case 142:
                case 143:
                case 150:
                case 153:
                case 154:
                case 156:
                case 158:
                case 165:
                case 167:
                case 168:
                case 169:
                case 171:
                case 172:
                case 173:
                case 174:
                	{
                		alt38=1;
                	}
                    break;
                case SCOPE:
                	{
                		{
                		    int LA38_14 = LA(2);
                		    if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )))
                		    {
                		        alt38=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt38=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 38;
                		        EXCEPTION->state        = 14;


                		        goto rulefunction_definitionEx;

                		    }
                		}
                	}
                    break;
                case ID:
                	{
                		{
                		    int LA38_15 = LA(2);
                		    if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )))
                		    {
                		        alt38=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt38=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 38;
                		        EXCEPTION->state        = 15;


                		        goto rulefunction_definitionEx;

                		    }
                		}
                	}
                    break;
                case AMPERSAND:
                case LPAREN:
                case OPERATOR:
                case STAR:
                case TILDE:
                case 88:
                case 90:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 103:
                case 109:
                case 110:
                case 111:
                case 146:
                	{
                		alt38=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 38;
                    EXCEPTION->state        = 0;


                    goto rulefunction_definitionEx;

                }

                switch (alt38)
                {
            	case 1:
            	    // CPP_grammar_.g:695:3: {...}? declaration_specifiers function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement
            	    {
            	        if ( !((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
            	                EXCEPTION->message      = (void *)"( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) )";
            	                EXCEPTION->ruleName	 = (void *)"function_definition";


            	        }

            	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_function_definition2414);
            	        declaration_specifiers(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_definitionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_function_declarator_in_function_definition2416);
            	        function_declarator(ctx, 1);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_definitionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:697:3: ( ( declaration )=> ( declaration )* )?
            	        {
            	            int alt35=2;
            	            {
            	                int LA35_0 = LA(1);
            	                if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 133))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 165))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 137))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 115))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 150))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 156))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 143))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 122))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 173))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 91 || LA35_0 == 104 || LA35_0 == 140))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 171))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 132))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 89 || LA35_0 == 102))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == SCOPE))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == ID))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 167))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 131))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 121))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 158))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 168))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 120))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 174))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 116))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 153))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 141))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 95 || LA35_0 == 108))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 92 || LA35_0 == 105))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 93 || LA35_0 == 106))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 94 || LA35_0 == 107))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 100 || LA35_0 == 112))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 142))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 154))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 169))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 135))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 128))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 172))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (synpred48_CPP_grammar_(ctx)) && (LA35_0 == 170))
            	                {
            	                    alt35=1;
            	                }
            	                else if ( (LA35_0 == LCURLY))
            	                {
            	                    {
            	                        int LA35_38 = LA(2);
            	                        if ( (synpred48_CPP_grammar_(ctx)))
            	                        {
            	                            alt35=1;
            	                        }
            	                    }
            	                }
            	            }
            	            switch (alt35)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:698:4: ( declaration )=> ( declaration )*
            	        	    {
            	        	        // CPP_grammar_.g:699:4: ( declaration )*

            	        	        for (;;)
            	        	        {
            	        	            int alt34=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	            case ID:
            	        	            case SCOPE:
            	        	            case 89:
            	        	            case 91:
            	        	            case 92:
            	        	            case 93:
            	        	            case 94:
            	        	            case 95:
            	        	            case 100:
            	        	            case 102:
            	        	            case 104:
            	        	            case 105:
            	        	            case 106:
            	        	            case 107:
            	        	            case 108:
            	        	            case 112:
            	        	            case 115:
            	        	            case 116:
            	        	            case 120:
            	        	            case 121:
            	        	            case 122:
            	        	            case 128:
            	        	            case 131:
            	        	            case 132:
            	        	            case 133:
            	        	            case 135:
            	        	            case 137:
            	        	            case 140:
            	        	            case 141:
            	        	            case 142:
            	        	            case 143:
            	        	            case 150:
            	        	            case 153:
            	        	            case 154:
            	        	            case 156:
            	        	            case 158:
            	        	            case 165:
            	        	            case 167:
            	        	            case 168:
            	        	            case 169:
            	        	            case 170:
            	        	            case 171:
            	        	            case 172:
            	        	            case 173:
            	        	            case 174:
            	        	            	{
            	        	            		alt34=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt34)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:699:5: declaration
            	        	        	    {
            	        	        	        if ( BACKTRACKING==0 )
            	        	        	        {
            	        	        	            lineNo = LT(1)->line;
            	        	        	        }


            	        	        	        FOLLOWPUSH(FOLLOW_declaration_in_function_definition2439);
            	        	        	        declaration(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulefunction_definitionEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop34;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop34: ; /* Jump out to here if this rule does not match */


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            in_parameter_list = FALSE;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_compound_statement_in_function_definition2456);
            	        compound_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_definitionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:704:3: function_declarator[1] ( ( declaration )=> ( declaration )* )? compound_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_function_declarator_in_function_definition2464);
            	        function_declarator(ctx, 1);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_definitionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:705:3: ( ( declaration )=> ( declaration )* )?
            	        {
            	            int alt37=2;
            	            {
            	                int LA37_0 = LA(1);
            	                if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 133))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 165))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 137))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 115))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 150))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 156))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 143))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 122))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 173))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 91 || LA37_0 == 104 || LA37_0 == 140))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 171))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 132))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 89 || LA37_0 == 102))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == SCOPE))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == ID))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 167))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 131))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 121))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 158))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 168))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 120))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 174))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 116))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 153))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 141))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 95 || LA37_0 == 108))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 92 || LA37_0 == 105))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 93 || LA37_0 == 106))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 94 || LA37_0 == 107))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 100 || LA37_0 == 112))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 142))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 154))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 169))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 135))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 128))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 172))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (synpred49_CPP_grammar_(ctx)) && (LA37_0 == 170))
            	                {
            	                    alt37=1;
            	                }
            	                else if ( (LA37_0 == LCURLY))
            	                {
            	                    {
            	                        int LA37_38 = LA(2);
            	                        if ( (synpred49_CPP_grammar_(ctx)))
            	                        {
            	                            alt37=1;
            	                        }
            	                    }
            	                }
            	            }
            	            switch (alt37)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:706:4: ( declaration )=> ( declaration )*
            	        	    {
            	        	        // CPP_grammar_.g:707:4: ( declaration )*

            	        	        for (;;)
            	        	        {
            	        	            int alt36=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	            case ID:
            	        	            case SCOPE:
            	        	            case 89:
            	        	            case 91:
            	        	            case 92:
            	        	            case 93:
            	        	            case 94:
            	        	            case 95:
            	        	            case 100:
            	        	            case 102:
            	        	            case 104:
            	        	            case 105:
            	        	            case 106:
            	        	            case 107:
            	        	            case 108:
            	        	            case 112:
            	        	            case 115:
            	        	            case 116:
            	        	            case 120:
            	        	            case 121:
            	        	            case 122:
            	        	            case 128:
            	        	            case 131:
            	        	            case 132:
            	        	            case 133:
            	        	            case 135:
            	        	            case 137:
            	        	            case 140:
            	        	            case 141:
            	        	            case 142:
            	        	            case 143:
            	        	            case 150:
            	        	            case 153:
            	        	            case 154:
            	        	            case 156:
            	        	            case 158:
            	        	            case 165:
            	        	            case 167:
            	        	            case 168:
            	        	            case 169:
            	        	            case 170:
            	        	            case 171:
            	        	            case 172:
            	        	            case 173:
            	        	            case 174:
            	        	            	{
            	        	            		alt36=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt36)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:707:5: declaration
            	        	        	    {
            	        	        	        if ( BACKTRACKING==0 )
            	        	        	        {
            	        	        	            lineNo = LT(1)->line;
            	        	        	        }


            	        	        	        FOLLOWPUSH(FOLLOW_declaration_in_function_definition2486);
            	        	        	        declaration(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulefunction_definitionEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop36;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop36: ; /* Jump out to here if this rule does not match */


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            in_parameter_list = FALSE;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_compound_statement_in_function_definition2503);
            	        compound_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_definitionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            if ( BACKTRACKING==0 )
            {
                endFunctionDefinition();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunction_definitionEx; /* Prevent compiler warnings */
    rulefunction_definitionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end function_definition */

/**
 * $ANTLR start declaration
 * CPP_grammar_.g:716:1: declaration : ( ( 'extern' StringLiteral )=> linkage_specification | simple_declaration | using_statement );
 */
static void
declaration(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:717:2: ( ( 'extern' StringLiteral )=> linkage_specification | simple_declaration | using_statement )

            ANTLR3_UINT32 alt39;

            alt39=3;

            switch ( LA(1) )
            {
            case 133:
            	{
            		{
            		    int LA39_1 = LA(2);
            		    if ( (synpred50_CPP_grammar_(ctx)) && (LA39_1 == StringLiteral))
            		    {
            		        alt39=1;
            		    }
            		    else if ( (LA39_1 == ID || LA39_1 == SCOPE || LA39_1 == 89 || ((LA39_1 >= 91) && (LA39_1 <= 95)) || LA39_1 == 100 || LA39_1 == 102 || ((LA39_1 >= 104) && (LA39_1 <= 108)) || LA39_1 == 112 || ((LA39_1 >= 115) && (LA39_1 <= 116)) || ((LA39_1 >= 120) && (LA39_1 <= 122)) || LA39_1 == 128 || ((LA39_1 >= 131) && (LA39_1 <= 133)) || LA39_1 == 135 || LA39_1 == 137 || ((LA39_1 >= 140) && (LA39_1 <= 143)) || LA39_1 == 150 || ((LA39_1 >= 153) && (LA39_1 <= 154)) || LA39_1 == 156 || LA39_1 == 158 || LA39_1 == 165 || ((LA39_1 >= 167) && (LA39_1 <= 169)) || ((LA39_1 >= 171) && (LA39_1 <= 174))))
            		    {
            		        alt39=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 39;
            		        EXCEPTION->state        = 1;


            		        goto ruledeclarationEx;

            		    }
            		}
            	}
                break;
            case ID:
            case SCOPE:
            case 89:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 100:
            case 102:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 112:
            case 115:
            case 116:
            case 120:
            case 121:
            case 122:
            case 128:
            case 131:
            case 132:
            case 135:
            case 137:
            case 140:
            case 141:
            case 142:
            case 143:
            case 150:
            case 153:
            case 154:
            case 156:
            case 158:
            case 165:
            case 167:
            case 168:
            case 169:
            case 171:
            case 172:
            case 173:
            case 174:
            	{
            		alt39=2;
            	}
                break;
            case 170:
            	{
            		alt39=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 39;
                EXCEPTION->state        = 0;


                goto ruledeclarationEx;

            }

            switch (alt39)
            {
        	case 1:
        	    // CPP_grammar_.g:718:3: ( 'extern' StringLiteral )=> linkage_specification
        	    {
        	        FOLLOWPUSH(FOLLOW_linkage_specification_in_declaration2533);
        	        linkage_specification(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclarationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:721:3: simple_declaration
        	    {
        	        FOLLOWPUSH(FOLLOW_simple_declaration_in_declaration2541);
        	        simple_declaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclarationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:723:3: using_statement
        	    {
        	        FOLLOWPUSH(FOLLOW_using_statement_in_declaration2549);
        	        using_statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclarationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledeclarationEx; /* Prevent compiler warnings */
    ruledeclarationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end declaration */

/**
 * $ANTLR start linkage_specification
 * CPP_grammar_.g:728:1: linkage_specification : 'extern' StringLiteral ( LCURLY ( external_declaration )* RCURLY | declaration ) ;
 */
static void
linkage_specification(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:729:2: ( 'extern' StringLiteral ( LCURLY ( external_declaration )* RCURLY | declaration ) )
        // CPP_grammar_.g:730:3: 'extern' StringLiteral ( LCURLY ( external_declaration )* RCURLY | declaration )
        {
             MATCHT(133, &FOLLOW_133_in_linkage_specification2565);
            if  (HASEXCEPTION())
            {
                goto rulelinkage_specificationEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_linkage_specification2569);
            if  (HASEXCEPTION())
            {
                goto rulelinkage_specificationEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:732:3: ( LCURLY ( external_declaration )* RCURLY | declaration )
            {
                int alt41=2;
                switch ( LA(1) )
                {
                case LCURLY:
                	{
                		alt41=1;
                	}
                    break;
                case ID:
                case SCOPE:
                case 89:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 100:
                case 102:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 112:
                case 115:
                case 116:
                case 120:
                case 121:
                case 122:
                case 128:
                case 131:
                case 132:
                case 133:
                case 135:
                case 137:
                case 140:
                case 141:
                case 142:
                case 143:
                case 150:
                case 153:
                case 154:
                case 156:
                case 158:
                case 165:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                	{
                		alt41=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 41;
                    EXCEPTION->state        = 0;


                    goto rulelinkage_specificationEx;

                }

                switch (alt41)
                {
            	case 1:
            	    // CPP_grammar_.g:732:4: LCURLY ( external_declaration )* RCURLY
            	    {
            	         MATCHT(LCURLY, &FOLLOW_LCURLY_in_linkage_specification2574);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelinkage_specificationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:732:11: ( external_declaration )*

            	        for (;;)
            	        {
            	            int alt40=2;
            	            switch ( LA(1) )
            	            {
            	            case AMPERSAND:
            	            case ID:
            	            case LPAREN:
            	            case OPERATOR:
            	            case SCOPE:
            	            case SEMICOLON:
            	            case STAR:
            	            case TILDE:
            	            case 88:
            	            case 89:
            	            case 90:
            	            case 91:
            	            case 92:
            	            case 93:
            	            case 94:
            	            case 95:
            	            case 96:
            	            case 97:
            	            case 98:
            	            case 99:
            	            case 100:
            	            case 101:
            	            case 102:
            	            case 103:
            	            case 104:
            	            case 105:
            	            case 106:
            	            case 107:
            	            case 108:
            	            case 109:
            	            case 110:
            	            case 111:
            	            case 112:
            	            case 113:
            	            case 114:
            	            case 115:
            	            case 116:
            	            case 120:
            	            case 121:
            	            case 122:
            	            case 128:
            	            case 131:
            	            case 132:
            	            case 133:
            	            case 135:
            	            case 137:
            	            case 140:
            	            case 141:
            	            case 142:
            	            case 143:
            	            case 144:
            	            case 146:
            	            case 150:
            	            case 153:
            	            case 154:
            	            case 156:
            	            case 158:
            	            case 160:
            	            case 165:
            	            case 167:
            	            case 168:
            	            case 169:
            	            case 170:
            	            case 171:
            	            case 172:
            	            case 173:
            	            case 174:
            	            	{
            	            		alt40=1;
            	            	}
            	                break;

            	            }

            	            switch (alt40)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:732:12: external_declaration
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_external_declaration_in_linkage_specification2577);
            	        	        external_declaration(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelinkage_specificationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop40;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop40: ; /* Jump out to here if this rule does not match */


            	         MATCHT(RCURLY, &FOLLOW_RCURLY_in_linkage_specification2581);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelinkage_specificationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:733:4: declaration
            	    {
            	        FOLLOWPUSH(FOLLOW_declaration_in_linkage_specification2586);
            	        declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelinkage_specificationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulelinkage_specificationEx; /* Prevent compiler warnings */
    rulelinkage_specificationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end linkage_specification */

/**
 * $ANTLR start class_head
 * CPP_grammar_.g:738:1: class_head : ( 'struct' | 'union' | 'class' ) ( ID ( LESSTHAN template_argument_list GREATERTHAN )? ( base_clause )? )? LCURLY ;
 */
static void
class_head(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:739:2: ( ( 'struct' | 'union' | 'class' ) ( ID ( LESSTHAN template_argument_list GREATERTHAN )? ( base_clause )? )? LCURLY )
        // CPP_grammar_.g:740:3: ( 'struct' | 'union' | 'class' ) ( ID ( LESSTHAN template_argument_list GREATERTHAN )? ( base_clause )? )? LCURLY
        {
            if ( LA(1) == 121 || LA(1) == 158 || LA(1) == 168 )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleclass_headEx;
            }


            // CPP_grammar_.g:744:3: ( ID ( LESSTHAN template_argument_list GREATERTHAN )? ( base_clause )? )?
            {
                int alt44=2;
                switch ( LA(1) )
                {
                    case ID:
                    	{
                    		alt44=1;
                    	}
                        break;
                }

                switch (alt44)
                {
            	case 1:
            	    // CPP_grammar_.g:744:4: ID ( LESSTHAN template_argument_list GREATERTHAN )? ( base_clause )?
            	    {
            	         MATCHT(ID, &FOLLOW_ID_in_class_head2627);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_headEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:745:4: ( LESSTHAN template_argument_list GREATERTHAN )?
            	        {
            	            int alt42=2;
            	            switch ( LA(1) )
            	            {
            	                case LESSTHAN:
            	                	{
            	                		alt42=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt42)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:745:5: LESSTHAN template_argument_list GREATERTHAN
            	        	    {
            	        	         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_class_head2634);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleclass_headEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_template_argument_list_in_class_head2636);
            	        	        template_argument_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleclass_headEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_class_head2638);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleclass_headEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // CPP_grammar_.g:746:4: ( base_clause )?
            	        {
            	            int alt43=2;
            	            switch ( LA(1) )
            	            {
            	                case COLON:
            	                	{
            	                		alt43=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt43)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:746:5: base_clause
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_base_clause_in_class_head2646);
            	        	        base_clause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleclass_headEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

             MATCHT(LCURLY, &FOLLOW_LCURLY_in_class_head2659);
            if  (HASEXCEPTION())
            {
                goto ruleclass_headEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleclass_headEx; /* Prevent compiler warnings */
    ruleclass_headEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end class_head */

/**
 * $ANTLR start declaration_specifiers
 * CPP_grammar_.g:752:1: declaration_specifiers : ( ( 'typedef' | 'friend' |sc1= storage_class_specifier |tq1= type_qualifier |fs1= function_specifier | ( '_declspec' | '__declspec' ) LPAREN ID RPAREN )* ts1= type_specifier (tq1= type_qualifier )* ) ;
 */
static void
declaration_specifiers(pCPP_grammar_Parser ctx)
{

    		StorageClass sc = scInvalid;	// auto,register,static,extern,mutable
    		TypeQualifier tq = tqInvalid;	// const,volatile	// aka cv_qualifier See type_qualifier
    		TypeSpecifier ts = tsInvalid;	// char,int,double, etc., class,struct,union
    		FunctionSpecifier fs = fsInvalid;	// inline,virtual,explicit
        
    StorageClass sc1;
    #undef	RETURN_TYPE_sc1
    #define	RETURN_TYPE_sc1 StorageClass

    TypeQualifier tq1;
    #undef	RETURN_TYPE_tq1
    #define	RETURN_TYPE_tq1 TypeQualifier

    FunctionSpecifier fs1;
    #undef	RETURN_TYPE_fs1
    #define	RETURN_TYPE_fs1 FunctionSpecifier

    TypeSpecifier ts1;
    #undef	RETURN_TYPE_ts1
    #define	RETURN_TYPE_ts1 TypeSpecifier

    /* Initialize rule variables
     */


    		// Locals
    		boolean td = FALSE;	// For typedef
    		boolean fd = FALSE;	// For friend

    		// Global flags to allow for nested declarations
    		_td = FALSE;		// For typedef
    		_fd = FALSE;		// For friend
    		_sc = scInvalid;	// For StorageClass		// auto,register,static,extern,mutable
    		_tq = tqInvalid;	// For TypeQualifier	// aka cv_qualifier See type_qualifier
    		_ts = tsInvalid;	// For TypeSpecifier
    		_fs = fsInvalid;	// For FunctionSpecifier	// inline,virtual,explicit
    	
    {
        // CPP_grammar_.g:772:2: ( ( ( 'typedef' | 'friend' |sc1= storage_class_specifier |tq1= type_qualifier |fs1= function_specifier | ( '_declspec' | '__declspec' ) LPAREN ID RPAREN )* ts1= type_specifier (tq1= type_qualifier )* ) )
        // CPP_grammar_.g:773:2: ( ( 'typedef' | 'friend' |sc1= storage_class_specifier |tq1= type_qualifier |fs1= function_specifier | ( '_declspec' | '__declspec' ) LPAREN ID RPAREN )* ts1= type_specifier (tq1= type_qualifier )* )
        {
            // CPP_grammar_.g:773:2: ( ( 'typedef' | 'friend' |sc1= storage_class_specifier |tq1= type_qualifier |fs1= function_specifier | ( '_declspec' | '__declspec' ) LPAREN ID RPAREN )* ts1= type_specifier (tq1= type_qualifier )* )
            // CPP_grammar_.g:774:3: ( 'typedef' | 'friend' |sc1= storage_class_specifier |tq1= type_qualifier |fs1= function_specifier | ( '_declspec' | '__declspec' ) LPAREN ID RPAREN )* ts1= type_specifier (tq1= type_qualifier )*
            {
                // CPP_grammar_.g:774:3: ( 'typedef' | 'friend' |sc1= storage_class_specifier |tq1= type_qualifier |fs1= function_specifier | ( '_declspec' | '__declspec' ) LPAREN ID RPAREN )*

                for (;;)
                {
                    int alt45=7;
                    switch ( LA(1) )
                    {
                    case 165:
                    	{
                    		alt45=1;
                    	}
                        break;
                    case 137:
                    	{
                    		alt45=2;
                    	}
                        break;
                    case 115:
                    case 133:
                    case 143:
                    case 150:
                    case 156:
                    	{
                    		alt45=3;
                    	}
                        break;
                    case 122:
                    case 173:
                    	{
                    		alt45=4;
                    	}
                        break;
                    case 91:
                    case 104:
                    case 132:
                    case 140:
                    case 171:
                    	{
                    		alt45=5;
                    	}
                        break;
                    case 89:
                    case 102:
                    	{
                    		alt45=6;
                    	}
                        break;

                    }

                    switch (alt45)
                    {
                	case 1:
                	    // CPP_grammar_.g:775:4: 'typedef'
                	    {
                	         MATCHT(165, &FOLLOW_165_in_declaration_specifiers2697);
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledeclaration_specifiersEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	        if ( BACKTRACKING==0 )
                	        {
                	            td=TRUE;
                	        }


                	    }
                	    break;
                	case 2:
                	    // CPP_grammar_.g:776:5: 'friend'
                	    {
                	         MATCHT(137, &FOLLOW_137_in_declaration_specifiers2708);
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledeclaration_specifiersEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	        if ( BACKTRACKING==0 )
                	        {
                	            fd=TRUE;
                	        }


                	    }
                	    break;
                	case 3:
                	    // CPP_grammar_.g:777:5: sc1= storage_class_specifier
                	    {
                	        FOLLOWPUSH(FOLLOW_storage_class_specifier_in_declaration_specifiers2720);
                	        sc1=storage_class_specifier(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledeclaration_specifiersEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	        if ( BACKTRACKING==0 )
                	        {
                	            sc = sc1
                	            ;
                	        }


                	    }
                	    break;
                	case 4:
                	    // CPP_grammar_.g:778:5: tq1= type_qualifier
                	    {
                	        FOLLOWPUSH(FOLLOW_type_qualifier_in_declaration_specifiers2733);
                	        tq1=type_qualifier(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledeclaration_specifiersEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	        if ( BACKTRACKING==0 )
                	        {
                	            tq = tq1
                	            ;
                	        }


                	    }
                	    break;
                	case 5:
                	    // CPP_grammar_.g:779:5: fs1= function_specifier
                	    {
                	        FOLLOWPUSH(FOLLOW_function_specifier_in_declaration_specifiers2755);
                	        fs1=function_specifier(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledeclaration_specifiersEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	        if ( BACKTRACKING==0 )
                	        {
                	            fs = fs1
                	            ;
                	        }


                	    }
                	    break;
                	case 6:
                	    // CPP_grammar_.g:780:5: ( '_declspec' | '__declspec' ) LPAREN ID RPAREN
                	    {
                	        if ( LA(1) == 89 || LA(1) == 102 )
                	        {
                	            CONSUME();
                	            PERRORRECOVERY=ANTLR3_FALSE;
                	            FAILEDFLAG=ANTLR3_FALSE;

                	        }
                	        else
                	        {
                	            if (BACKTRACKING>0)
                	            {
                	                FAILEDFLAG = ANTLR3_TRUE;
                	                return ;
                	            }

                	            CONSTRUCTEX();
                	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                	            EXCEPTION->expectingSet = NULL;

                	            goto ruledeclaration_specifiersEx;
                	        }


                	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_declaration_specifiers2775);
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledeclaration_specifiersEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	         MATCHT(ID, &FOLLOW_ID_in_declaration_specifiers2777);
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledeclaration_specifiersEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_declaration_specifiers2779);
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledeclaration_specifiersEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	    }
                	    break;

                	default:
                	    goto loop45;	/* break out of the loop */
                	    break;
                    }
                }
                loop45: ; /* Jump out to here if this rule does not match */


                FOLLOWPUSH(FOLLOW_type_specifier_in_declaration_specifiers2794);
                ts1=type_specifier(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruledeclaration_specifiersEx;
                }
                if (HASFAILED())
                {
                    return ;
                }


                if ( BACKTRACKING==0 )
                {
                    ts = ts1
                    ;
                }


                // CPP_grammar_.g:783:3: (tq1= type_qualifier )*

                for (;;)
                {
                    int alt46=2;
                    switch ( LA(1) )
                    {
                    case 122:
                    case 173:
                    	{
                    		alt46=1;
                    	}
                        break;

                    }

                    switch (alt46)
                    {
                	case 1:
                	    // CPP_grammar_.g:783:4: tq1= type_qualifier
                	    {
                	        FOLLOWPUSH(FOLLOW_type_qualifier_in_declaration_specifiers2808);
                	        tq1=type_qualifier(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruledeclaration_specifiersEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	        if ( BACKTRACKING==0 )
                	        {
                	            tq = tq1
                	            ;
                	        }


                	    }
                	    break;

                	default:
                	    goto loop46;	/* break out of the loop */
                	    break;
                    }
                }
                loop46: ; /* Jump out to here if this rule does not match */


            }


            if ( BACKTRACKING==0 )
            {
                _td=td; declarationSpecifier(td,fd,sc,tq,ts,fs);
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledeclaration_specifiersEx; /* Prevent compiler warnings */
    ruledeclaration_specifiersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end declaration_specifiers */

/**
 * $ANTLR start storage_class_specifier
 * CPP_grammar_.g:790:1: storage_class_specifier returns [StorageClass scReturn] : ( 'auto' | 'register' | 'static' | 'extern' | 'mutable' );
 */
static StorageClass
storage_class_specifier(pCPP_grammar_Parser ctx)
{
    StorageClass scReturn;


    /* Initialize rule variables
     */


    		scReturn= scInvalid;
     
        
    {
        {
            //  CPP_grammar_.g:794:2: ( 'auto' | 'register' | 'static' | 'extern' | 'mutable' )

            ANTLR3_UINT32 alt47;

            alt47=5;

            switch ( LA(1) )
            {
            case 115:
            	{
            		alt47=1;
            	}
                break;
            case 150:
            	{
            		alt47=2;
            	}
                break;
            case 156:
            	{
            		alt47=3;
            	}
                break;
            case 133:
            	{
            		alt47=4;
            	}
                break;
            case 143:
            	{
            		alt47=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return scReturn;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 47;
                EXCEPTION->state        = 0;


                goto rulestorage_class_specifierEx;

            }

            switch (alt47)
            {
        	case 1:
        	    // CPP_grammar_.g:794:4: 'auto'
        	    {
        	         MATCHT(115, &FOLLOW_115_in_storage_class_specifier2845);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestorage_class_specifierEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return scReturn;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            scReturn= scAUTO;

        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:795:4: 'register'
        	    {
        	         MATCHT(150, &FOLLOW_150_in_storage_class_specifier2853);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestorage_class_specifierEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return scReturn;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            scReturn= scREGISTER;

        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:796:4: 'static'
        	    {
        	         MATCHT(156, &FOLLOW_156_in_storage_class_specifier2860);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestorage_class_specifierEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return scReturn;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            scReturn= scSTATIC;

        	        }


        	    }
        	    break;
        	case 4:
        	    // CPP_grammar_.g:797:4: 'extern'
        	    {
        	         MATCHT(133, &FOLLOW_133_in_storage_class_specifier2867);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestorage_class_specifierEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return scReturn;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            scReturn= scEXTERN;

        	        }


        	    }
        	    break;
        	case 5:
        	    // CPP_grammar_.g:798:4: 'mutable'
        	    {
        	         MATCHT(143, &FOLLOW_143_in_storage_class_specifier2874);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestorage_class_specifierEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return scReturn;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            scReturn= scMUTABLE;

        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestorage_class_specifierEx; /* Prevent compiler warnings */
    rulestorage_class_specifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return scReturn;
}
/* $ANTLR end storage_class_specifier */

/**
 * $ANTLR start function_specifier
 * CPP_grammar_.g:803:1: function_specifier returns [FunctionSpecifier fsReturn] : ( ( 'inline' | '_inline' | '__inline' ) | 'virtual' | 'explicit' );
 */
static FunctionSpecifier
function_specifier(pCPP_grammar_Parser ctx)
{
    FunctionSpecifier fsReturn;


    /* Initialize rule variables
     */


    		fsReturn= fsInvalid;
     
    	
    {
        {
            //  CPP_grammar_.g:807:2: ( ( 'inline' | '_inline' | '__inline' ) | 'virtual' | 'explicit' )

            ANTLR3_UINT32 alt48;

            alt48=3;

            switch ( LA(1) )
            {
            case 91:
            case 104:
            case 140:
            	{
            		alt48=1;
            	}
                break;
            case 171:
            	{
            		alt48=2;
            	}
                break;
            case 132:
            	{
            		alt48=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return fsReturn;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 48;
                EXCEPTION->state        = 0;


                goto rulefunction_specifierEx;

            }

            switch (alt48)
            {
        	case 1:
        	    // CPP_grammar_.g:807:4: ( 'inline' | '_inline' | '__inline' )
        	    {
        	        if ( LA(1) == 91 || LA(1) == 104 || LA(1) == 140 )
        	        {
        	            CONSUME();
        	            PERRORRECOVERY=ANTLR3_FALSE;
        	            FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                return fsReturn;
        	            }

        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = NULL;

        	            goto rulefunction_specifierEx;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            fsReturn= fsINLINE;

        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:808:4: 'virtual'
        	    {
        	         MATCHT(171, &FOLLOW_171_in_function_specifier2912);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunction_specifierEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return fsReturn;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            fsReturn= fsVIRTUAL;

        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:809:4: 'explicit'
        	    {
        	         MATCHT(132, &FOLLOW_132_in_function_specifier2924);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunction_specifierEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return fsReturn;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            fsReturn= fsEXPLICIT;

        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulefunction_specifierEx; /* Prevent compiler warnings */
    rulefunction_specifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return fsReturn;
}
/* $ANTLR end function_specifier */

/**
 * $ANTLR start type_specifier
 * CPP_grammar_.g:813:1: type_specifier returns [TypeSpecifier tsReturn] : ts= simple_type_specifier ;
 */
static TypeSpecifier
type_specifier(pCPP_grammar_Parser ctx)
{
    TypeSpecifier tsReturn;


    TypeSpecifier ts;
    #undef	RETURN_TYPE_ts
    #define	RETURN_TYPE_ts TypeSpecifier

    /* Initialize rule variables
     */


    		TypeQualifier tq = tqInvalid;
    		tsReturn= tsInvalid;

    	
    {
        // CPP_grammar_.g:818:2: (ts= simple_type_specifier )
        // CPP_grammar_.g:819:3: ts= simple_type_specifier
        {
            FOLLOWPUSH(FOLLOW_simple_type_specifier_in_type_specifier2960);
            ts=simple_type_specifier(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletype_specifierEx;
            }
            if (HASFAILED())
            {
                return tsReturn;
            }


            if ( BACKTRACKING==0 )
            {
                tsReturn= 
                ts
                 ;

            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletype_specifierEx; /* Prevent compiler warnings */
    ruletype_specifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return tsReturn;
}
/* $ANTLR end type_specifier */

/**
 * $ANTLR start simple_type_specifier
 * CPP_grammar_.g:832:1: simple_type_specifier returns [TypeSpecifier tsReturn] : ({...}?s= qualified_type[bufQualifiedType] | ( 'typename' | 'enum' |lbl_ts= class_specifier ) s= qualified_type[bufQualifiedType] | ( 'char' | 'wchar_t' | 'bool' | 'short' | 'int' | ( '_int8' | '__int8' ) | ( '_int16' | '__int16' ) | ( '_int32' | '__int32' ) | ( '_int64' | '__int64' ) | ( '_w64' | '__w64' ) | 'long' | 'signed' | 'unsigned' | 'float' | 'double' | 'void' )+ ) ;
 */
static TypeSpecifier
simple_type_specifier(pCPP_grammar_Parser ctx)
{
    TypeSpecifier tsReturn;



    		char bufQualifiedType[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    char * s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s char *

    TypeSpecifier lbl_ts;
    #undef	RETURN_TYPE_lbl_ts
    #define	RETURN_TYPE_lbl_ts TypeSpecifier

    /* Initialize rule variables
     */


    		tsReturn= tsInvalid;
     
    	
    {
        // CPP_grammar_.g:839:2: ( ({...}?s= qualified_type[bufQualifiedType] | ( 'typename' | 'enum' |lbl_ts= class_specifier ) s= qualified_type[bufQualifiedType] | ( 'char' | 'wchar_t' | 'bool' | 'short' | 'int' | ( '_int8' | '__int8' ) | ( '_int16' | '__int16' ) | ( '_int32' | '__int32' ) | ( '_int64' | '__int64' ) | ( '_w64' | '__w64' ) | 'long' | 'signed' | 'unsigned' | 'float' | 'double' | 'void' )+ ) )
        // CPP_grammar_.g:840:3: ({...}?s= qualified_type[bufQualifiedType] | ( 'typename' | 'enum' |lbl_ts= class_specifier ) s= qualified_type[bufQualifiedType] | ( 'char' | 'wchar_t' | 'bool' | 'short' | 'int' | ( '_int8' | '__int8' ) | ( '_int16' | '__int16' ) | ( '_int32' | '__int32' ) | ( '_int64' | '__int64' ) | ( '_w64' | '__w64' ) | 'long' | 'signed' | 'unsigned' | 'float' | 'double' | 'void' )+ )
        {
            // CPP_grammar_.g:840:3: ({...}?s= qualified_type[bufQualifiedType] | ( 'typename' | 'enum' |lbl_ts= class_specifier ) s= qualified_type[bufQualifiedType] | ( 'char' | 'wchar_t' | 'bool' | 'short' | 'int' | ( '_int8' | '__int8' ) | ( '_int16' | '__int16' ) | ( '_int32' | '__int32' ) | ( '_int64' | '__int64' ) | ( '_w64' | '__w64' ) | 'long' | 'signed' | 'unsigned' | 'float' | 'double' | 'void' )+ )
            {
                int alt51=3;
                switch ( LA(1) )
                {
                case ID:
                case SCOPE:
                	{
                		alt51=1;
                	}
                    break;
                case 121:
                case 131:
                case 158:
                case 167:
                case 168:
                	{
                		alt51=2;
                	}
                    break;
                case 92:
                case 93:
                case 94:
                case 95:
                case 100:
                case 105:
                case 106:
                case 107:
                case 108:
                case 112:
                case 116:
                case 120:
                case 128:
                case 135:
                case 141:
                case 142:
                case 153:
                case 154:
                case 169:
                case 172:
                case 174:
                	{
                		alt51=3;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return tsReturn;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 51;
                    EXCEPTION->state        = 0;


                    goto rulesimple_type_specifierEx;

                }

                switch (alt51)
                {
            	case 1:
            	    // CPP_grammar_.g:841:4: {...}?s= qualified_type[bufQualifiedType]
            	    {
            	        if ( !((qualifiedItemIsOneOf(qiType|qiCtor,0))) )
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return tsReturn;
            	            }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
            	                EXCEPTION->message      = (void *)"qualifiedItemIsOneOf(qiType|qiCtor,0)";
            	                EXCEPTION->ruleName	 = (void *)"simple_type_specifier";


            	        }

            	        FOLLOWPUSH(FOLLOW_qualified_type_in_simple_type_specifier3017);
            	        s=qualified_type(ctx, bufQualifiedType);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesimple_type_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return tsReturn;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:845:4: ( 'typename' | 'enum' |lbl_ts= class_specifier ) s= qualified_type[bufQualifiedType]
            	    {
            	        // CPP_grammar_.g:845:4: ( 'typename' | 'enum' |lbl_ts= class_specifier )
            	        {
            	            int alt49=3;
            	            switch ( LA(1) )
            	            {
            	            case 167:
            	            	{
            	            		alt49=1;
            	            	}
            	                break;
            	            case 131:
            	            	{
            	            		alt49=2;
            	            	}
            	                break;
            	            case 121:
            	            case 158:
            	            case 168:
            	            	{
            	            		alt49=3;
            	            	}
            	                break;

            	            default:
            	                if (BACKTRACKING>0)
            	                {
            	                    FAILEDFLAG = ANTLR3_TRUE;
            	                    return tsReturn;
            	                }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 49;
            	                EXCEPTION->state        = 0;


            	                goto rulesimple_type_specifierEx;

            	            }

            	            switch (alt49)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:845:5: 'typename'
            	        	    {
            	        	         MATCHT(167, &FOLLOW_167_in_simple_type_specifier3031);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesimple_type_specifierEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return tsReturn;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:845:16: 'enum'
            	        	    {
            	        	         MATCHT(131, &FOLLOW_131_in_simple_type_specifier3033);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesimple_type_specifierEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return tsReturn;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // CPP_grammar_.g:845:24: lbl_ts= class_specifier
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_class_specifier_in_simple_type_specifier3040);
            	        	        lbl_ts=class_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesimple_type_specifierEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return tsReturn;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            tsReturn=lbl_ts;

            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_qualified_type_in_simple_type_specifier3054);
            	        s=qualified_type(ctx, bufQualifiedType);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesimple_type_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return tsReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            declaratorID(bufQualifiedType,qiType);
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:849:4: ( 'char' | 'wchar_t' | 'bool' | 'short' | 'int' | ( '_int8' | '__int8' ) | ( '_int16' | '__int16' ) | ( '_int32' | '__int32' ) | ( '_int64' | '__int64' ) | ( '_w64' | '__w64' ) | 'long' | 'signed' | 'unsigned' | 'float' | 'double' | 'void' )+
            	    {
            	        // CPP_grammar_.g:849:4: ( 'char' | 'wchar_t' | 'bool' | 'short' | 'int' | ( '_int8' | '__int8' ) | ( '_int16' | '__int16' ) | ( '_int32' | '__int32' ) | ( '_int64' | '__int64' ) | ( '_w64' | '__w64' ) | 'long' | 'signed' | 'unsigned' | 'float' | 'double' | 'void' )+
            	        {
            	            int cnt50=0;

            	            for (;;)
            	            {
            	                int alt50=17;
            	        	switch ( LA(1) )
            	        	{
            	        	case 120:
            	        		{
            	        			alt50=1;
            	        		}
            	        	    break;
            	        	case 174:
            	        		{
            	        			alt50=2;
            	        		}
            	        	    break;
            	        	case 116:
            	        		{
            	        			alt50=3;
            	        		}
            	        	    break;
            	        	case 153:
            	        		{
            	        			alt50=4;
            	        		}
            	        	    break;
            	        	case 141:
            	        		{
            	        			alt50=5;
            	        		}
            	        	    break;
            	        	case 95:
            	        	case 108:
            	        		{
            	        			alt50=6;
            	        		}
            	        	    break;
            	        	case 92:
            	        	case 105:
            	        		{
            	        			alt50=7;
            	        		}
            	        	    break;
            	        	case 93:
            	        	case 106:
            	        		{
            	        			alt50=8;
            	        		}
            	        	    break;
            	        	case 94:
            	        	case 107:
            	        		{
            	        			alt50=9;
            	        		}
            	        	    break;
            	        	case 100:
            	        	case 112:
            	        		{
            	        			alt50=10;
            	        		}
            	        	    break;
            	        	case 142:
            	        		{
            	        			alt50=11;
            	        		}
            	        	    break;
            	        	case 154:
            	        		{
            	        			alt50=12;
            	        		}
            	        	    break;
            	        	case 169:
            	        		{
            	        			alt50=13;
            	        		}
            	        	    break;
            	        	case 135:
            	        		{
            	        			alt50=14;
            	        		}
            	        	    break;
            	        	case 128:
            	        		{
            	        			alt50=15;
            	        		}
            	        	    break;
            	        	case 172:
            	        		{
            	        			alt50=16;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt50)
            	        	{
            	        	    case 1:
            	        	        // CPP_grammar_.g:849:6: 'char'
            	        	        {
            	        	             MATCHT(120, &FOLLOW_120_in_simple_type_specifier3073);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsCHAR;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 2:
            	        	        // CPP_grammar_.g:850:6: 'wchar_t'
            	        	        {
            	        	             MATCHT(174, &FOLLOW_174_in_simple_type_specifier3083);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsWCHAR_T;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 3:
            	        	        // CPP_grammar_.g:851:6: 'bool'
            	        	        {
            	        	             MATCHT(116, &FOLLOW_116_in_simple_type_specifier3092);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsBOOL;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 4:
            	        	        // CPP_grammar_.g:852:6: 'short'
            	        	        {
            	        	             MATCHT(153, &FOLLOW_153_in_simple_type_specifier3102);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsSHORT;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 5:
            	        	        // CPP_grammar_.g:853:6: 'int'
            	        	        {
            	        	             MATCHT(141, &FOLLOW_141_in_simple_type_specifier3112);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsINT;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 6:
            	        	        // CPP_grammar_.g:854:6: ( '_int8' | '__int8' )
            	        	        {
            	        	            if ( LA(1) == 95 || LA(1) == 108 )
            	        	            {
            	        	                CONSUME();
            	        	                PERRORRECOVERY=ANTLR3_FALSE;
            	        	                FAILEDFLAG=ANTLR3_FALSE;

            	        	            }
            	        	            else
            	        	            {
            	        	                if (BACKTRACKING>0)
            	        	                {
            	        	                    FAILEDFLAG = ANTLR3_TRUE;
            	        	                    return tsReturn;
            	        	                }

            	        	                CONSTRUCTEX();
            	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	        	                EXCEPTION->expectingSet = NULL;

            	        	                goto rulesimple_type_specifierEx;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsINT;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 7:
            	        	        // CPP_grammar_.g:855:6: ( '_int16' | '__int16' )
            	        	        {
            	        	            if ( LA(1) == 92 || LA(1) == 105 )
            	        	            {
            	        	                CONSUME();
            	        	                PERRORRECOVERY=ANTLR3_FALSE;
            	        	                FAILEDFLAG=ANTLR3_FALSE;

            	        	            }
            	        	            else
            	        	            {
            	        	                if (BACKTRACKING>0)
            	        	                {
            	        	                    FAILEDFLAG = ANTLR3_TRUE;
            	        	                    return tsReturn;
            	        	                }

            	        	                CONSTRUCTEX();
            	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	        	                EXCEPTION->expectingSet = NULL;

            	        	                goto rulesimple_type_specifierEx;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsINT;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 8:
            	        	        // CPP_grammar_.g:856:6: ( '_int32' | '__int32' )
            	        	        {
            	        	            if ( LA(1) == 93 || LA(1) == 106 )
            	        	            {
            	        	                CONSUME();
            	        	                PERRORRECOVERY=ANTLR3_FALSE;
            	        	                FAILEDFLAG=ANTLR3_FALSE;

            	        	            }
            	        	            else
            	        	            {
            	        	                if (BACKTRACKING>0)
            	        	                {
            	        	                    FAILEDFLAG = ANTLR3_TRUE;
            	        	                    return tsReturn;
            	        	                }

            	        	                CONSTRUCTEX();
            	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	        	                EXCEPTION->expectingSet = NULL;

            	        	                goto rulesimple_type_specifierEx;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsLONG;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 9:
            	        	        // CPP_grammar_.g:857:6: ( '_int64' | '__int64' )
            	        	        {
            	        	            if ( LA(1) == 94 || LA(1) == 107 )
            	        	            {
            	        	                CONSUME();
            	        	                PERRORRECOVERY=ANTLR3_FALSE;
            	        	                FAILEDFLAG=ANTLR3_FALSE;

            	        	            }
            	        	            else
            	        	            {
            	        	                if (BACKTRACKING>0)
            	        	                {
            	        	                    FAILEDFLAG = ANTLR3_TRUE;
            	        	                    return tsReturn;
            	        	                }

            	        	                CONSTRUCTEX();
            	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	        	                EXCEPTION->expectingSet = NULL;

            	        	                goto rulesimple_type_specifierEx;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsLONG;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 10:
            	        	        // CPP_grammar_.g:858:6: ( '_w64' | '__w64' )
            	        	        {
            	        	            if ( LA(1) == 100 || LA(1) == 112 )
            	        	            {
            	        	                CONSUME();
            	        	                PERRORRECOVERY=ANTLR3_FALSE;
            	        	                FAILEDFLAG=ANTLR3_FALSE;

            	        	            }
            	        	            else
            	        	            {
            	        	                if (BACKTRACKING>0)
            	        	                {
            	        	                    FAILEDFLAG = ANTLR3_TRUE;
            	        	                    return tsReturn;
            	        	                }

            	        	                CONSTRUCTEX();
            	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	        	                EXCEPTION->expectingSet = NULL;

            	        	                goto rulesimple_type_specifierEx;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsLONG;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 11:
            	        	        // CPP_grammar_.g:859:6: 'long'
            	        	        {
            	        	             MATCHT(142, &FOLLOW_142_in_simple_type_specifier3189);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsLONG;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 12:
            	        	        // CPP_grammar_.g:860:6: 'signed'
            	        	        {
            	        	             MATCHT(154, &FOLLOW_154_in_simple_type_specifier3199);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsSIGNED;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 13:
            	        	        // CPP_grammar_.g:861:6: 'unsigned'
            	        	        {
            	        	             MATCHT(169, &FOLLOW_169_in_simple_type_specifier3208);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsUNSIGNED;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 14:
            	        	        // CPP_grammar_.g:862:6: 'float'
            	        	        {
            	        	             MATCHT(135, &FOLLOW_135_in_simple_type_specifier3217);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsFLOAT;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 15:
            	        	        // CPP_grammar_.g:863:6: 'double'
            	        	        {
            	        	             MATCHT(128, &FOLLOW_128_in_simple_type_specifier3227);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsDOUBLE;
            	        	            }


            	        	        }
            	        	        break;
            	        	    case 16:
            	        	        // CPP_grammar_.g:864:6: 'void'
            	        	        {
            	        	             MATCHT(172, &FOLLOW_172_in_simple_type_specifier3236);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto rulesimple_type_specifierEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return tsReturn;
            	        	            }


            	        	            if ( BACKTRACKING==0 )
            	        	            {
            	        	                tsReturn
            	        	                 |= tsVOID;
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt50 >= 1 )
            	        		{
            	        		    goto loop50;
            	        		}
            	        		if (BACKTRACKING>0)
            	        		{
            	        		    FAILEDFLAG = ANTLR3_TRUE;
            	        		    return tsReturn;
            	        		}

            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto rulesimple_type_specifierEx;
            	        	}
            	        	cnt50++;
            	            }
            	            loop50: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulesimple_type_specifierEx; /* Prevent compiler warnings */
    rulesimple_type_specifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return tsReturn;
}
/* $ANTLR end simple_type_specifier */

/**
 * $ANTLR start qualified_type
 * CPP_grammar_.g:871:1: qualified_type[char *pQualifiedTypeBuf] returns [char *qtReturn] : so= scope_override[bufScopeOverrideScope] id= ID ( LESSTHAN template_argument_list GREATERTHAN )? ;
 */
static char *
qualified_type(pCPP_grammar_Parser ctx, char *pQualifiedTypeBuf)
{
    char * qtReturn;



    		char bufScopeOverrideScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    pANTLR3_COMMON_TOKEN    id;
    char * so;
    #undef	RETURN_TYPE_so
    #define	RETURN_TYPE_so char *

    /* Initialize rule variables
     */


    		//char* so = NULL;	// DW 10/11/10 I found this commented out - //char* so = NULL;
    		qtReturn= pQualifiedTypeBuf;
     
    	
    id       = NULL;

    {
        // CPP_grammar_.g:879:2: (so= scope_override[bufScopeOverrideScope] id= ID ( LESSTHAN template_argument_list GREATERTHAN )? )
        // CPP_grammar_.g:886:3: so= scope_override[bufScopeOverrideScope] id= ID ( LESSTHAN template_argument_list GREATERTHAN )?
        {
            FOLLOWPUSH(FOLLOW_scope_override_in_qualified_type3305);
            so=scope_override(ctx, bufScopeOverrideScope);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulequalified_typeEx;
            }
            if (HASFAILED())
            {
                return qtReturn;
            }


            if ( BACKTRACKING==0 )
            {

                		 strcpy(pQualifiedTypeBuf, reinterpret_cast<const char*>(so
                ));
                		
            }


            id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_qualified_type3318);
            if  (HASEXCEPTION())
            {
                goto rulequalified_typeEx;
            }
            if (HASFAILED())
            {
                return qtReturn;
            }


            if ( BACKTRACKING==0 )
            {

                		 strcat(pQualifiedTypeBuf, reinterpret_cast<const char*>((id->getText(id))->chars));
                		 
                qtReturn= pQualifiedTypeBuf;

                		
            }


            // CPP_grammar_.g:896:3: ( LESSTHAN template_argument_list GREATERTHAN )?
            {
                int alt52=2;
                switch ( LA(1) )
                {
                    case LESSTHAN:
                    	{
                    		alt52=1;
                    	}
                        break;
                }

                switch (alt52)
                {
            	case 1:
            	    // CPP_grammar_.g:898:4: LESSTHAN template_argument_list GREATERTHAN
            	    {
            	         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_qualified_type3336);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalified_typeEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return qtReturn;
            	        }


            	        FOLLOWPUSH(FOLLOW_template_argument_list_in_qualified_type3338);
            	        template_argument_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalified_typeEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return qtReturn;
            	        }


            	         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_qualified_type3340);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalified_typeEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return qtReturn;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulequalified_typeEx; /* Prevent compiler warnings */
    rulequalified_typeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return qtReturn;
}
/* $ANTLR end qualified_type */

/**
 * $ANTLR start class_specifier
 * CPP_grammar_.g:903:1: class_specifier returns [TypeSpecifier ts] : ( 'class' | 'struct' | 'union' ) ;
 */
static TypeSpecifier
class_specifier(pCPP_grammar_Parser ctx)
{
    TypeSpecifier ts;


    /* Initialize rule variables
     */


    		ts = tsInvalid;
    	
    {
        // CPP_grammar_.g:907:2: ( ( 'class' | 'struct' | 'union' ) )
        // CPP_grammar_.g:908:3: ( 'class' | 'struct' | 'union' )
        {
            // CPP_grammar_.g:908:3: ( 'class' | 'struct' | 'union' )
            {
                int alt53=3;
                switch ( LA(1) )
                {
                case 121:
                	{
                		alt53=1;
                	}
                    break;
                case 158:
                	{
                		alt53=2;
                	}
                    break;
                case 168:
                	{
                		alt53=3;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ts;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 53;
                    EXCEPTION->state        = 0;


                    goto ruleclass_specifierEx;

                }

                switch (alt53)
                {
            	case 1:
            	    // CPP_grammar_.g:908:4: 'class'
            	    {
            	         MATCHT(121, &FOLLOW_121_in_class_specifier3371);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ts;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            ts = tsCLASS;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:909:4: 'struct'
            	    {
            	         MATCHT(158, &FOLLOW_158_in_class_specifier3379);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ts;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            ts = tsSTRUCT;
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:910:4: 'union'
            	    {
            	         MATCHT(168, &FOLLOW_168_in_class_specifier3386);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ts;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            ts = tsUNION;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleclass_specifierEx; /* Prevent compiler warnings */
    ruleclass_specifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ts;
}
/* $ANTLR end class_specifier */

/**
 * $ANTLR start type_qualifier
 * CPP_grammar_.g:915:1: type_qualifier returns [TypeQualifier tqReturn] : ( 'const' | 'volatile' ) ;
 */
static TypeQualifier
type_qualifier(pCPP_grammar_Parser ctx)
{
    TypeQualifier tqReturn;


    /* Initialize rule variables
     */


    		tqReturn= tqInvalid;
     
    	
    {
        // CPP_grammar_.g:919:2: ( ( 'const' | 'volatile' ) )
        // CPP_grammar_.g:920:3: ( 'const' | 'volatile' )
        {
            // CPP_grammar_.g:920:3: ( 'const' | 'volatile' )
            {
                int alt54=2;
                switch ( LA(1) )
                {
                case 122:
                	{
                		alt54=1;
                	}
                    break;
                case 173:
                	{
                		alt54=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return tqReturn;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 54;
                    EXCEPTION->state        = 0;


                    goto ruletype_qualifierEx;

                }

                switch (alt54)
                {
            	case 1:
            	    // CPP_grammar_.g:920:4: 'const'
            	    {
            	         MATCHT(122, &FOLLOW_122_in_type_qualifier3420);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_qualifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return tqReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            tqReturn= tqCONST;

            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:921:4: 'volatile'
            	    {
            	         MATCHT(173, &FOLLOW_173_in_type_qualifier3428);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_qualifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return tqReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            tqReturn= tqVOLATILE;

            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruletype_qualifierEx; /* Prevent compiler warnings */
    ruletype_qualifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return tqReturn;
}
/* $ANTLR end type_qualifier */

/**
 * $ANTLR start class_decl_or_def
 * CPP_grammar_.g:927:1: class_decl_or_def[char *pClassDeclOrDefBuf, FunctionSpecifier fs] : ( 'class' | 'struct' | 'union' ) ( ( '_declspec' | '__declspec' ) LPAREN expression RPAREN )* (id= qualified_id[bufQualifiedIdScope] ( ( SEMICOLON | member_declarator )=>| ( base_clause )? LCURLY ( member_declaration )* RCURLY ) | LCURLY ( member_declaration )* RCURLY ) ;
 */
static void
class_decl_or_def(pCPP_grammar_Parser ctx, char *pClassDeclOrDefBuf, FunctionSpecifier fs)
{

    		TypeSpecifier ts = tsInvalid;	// Available for use
    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    CPP_grammar_Parser_qualified_id_return id;
    #undef	RETURN_TYPE_id
    #define	RETURN_TYPE_id CPP_grammar_Parser_qualified_id_return

    /* Initialize rule variables
     */


    		char *saveClass; 
    	
    {
        // CPP_grammar_.g:935:2: ( ( 'class' | 'struct' | 'union' ) ( ( '_declspec' | '__declspec' ) LPAREN expression RPAREN )* (id= qualified_id[bufQualifiedIdScope] ( ( SEMICOLON | member_declarator )=>| ( base_clause )? LCURLY ( member_declaration )* RCURLY ) | LCURLY ( member_declaration )* RCURLY ) )
        // CPP_grammar_.g:936:3: ( 'class' | 'struct' | 'union' ) ( ( '_declspec' | '__declspec' ) LPAREN expression RPAREN )* (id= qualified_id[bufQualifiedIdScope] ( ( SEMICOLON | member_declarator )=>| ( base_clause )? LCURLY ( member_declaration )* RCURLY ) | LCURLY ( member_declaration )* RCURLY )
        {
            // CPP_grammar_.g:936:3: ( 'class' | 'struct' | 'union' )
            {
                int alt55=3;
                switch ( LA(1) )
                {
                case 121:
                	{
                		alt55=1;
                	}
                    break;
                case 158:
                	{
                		alt55=2;
                	}
                    break;
                case 168:
                	{
                		alt55=3;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 55;
                    EXCEPTION->state        = 0;


                    goto ruleclass_decl_or_defEx;

                }

                switch (alt55)
                {
            	case 1:
            	    // CPP_grammar_.g:936:4: 'class'
            	    {
            	         MATCHT(121, &FOLLOW_121_in_class_decl_or_def3466);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            ts = tsCLASS;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:937:4: 'struct'
            	    {
            	         MATCHT(158, &FOLLOW_158_in_class_decl_or_def3474);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            ts = tsSTRUCT;
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:938:4: 'union'
            	    {
            	         MATCHT(168, &FOLLOW_168_in_class_decl_or_def3481);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            ts = tsUNION;
            	        }


            	    }
            	    break;

                }
            }

            // CPP_grammar_.g:940:3: ( ( '_declspec' | '__declspec' ) LPAREN expression RPAREN )*

            for (;;)
            {
                int alt56=2;
                switch ( LA(1) )
                {
                case 89:
                case 102:
                	{
                		alt56=1;
                	}
                    break;

                }

                switch (alt56)
                {
            	case 1:
            	    // CPP_grammar_.g:940:4: ( '_declspec' | '__declspec' ) LPAREN expression RPAREN
            	    {
            	        if ( LA(1) == 89 || LA(1) == 102 )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleclass_decl_or_defEx;
            	        }


            	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_class_decl_or_def3498);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_class_decl_or_def3500);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_class_decl_or_def3502);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */


            // CPP_grammar_.g:941:3: (id= qualified_id[bufQualifiedIdScope] ( ( SEMICOLON | member_declarator )=>| ( base_clause )? LCURLY ( member_declaration )* RCURLY ) | LCURLY ( member_declaration )* RCURLY )
            {
                int alt61=2;
                switch ( LA(1) )
                {
                case ID:
                case OPERATOR:
                case SCOPE:
                case TILDE:
                	{
                		alt61=1;
                	}
                    break;
                case LCURLY:
                	{
                		alt61=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 61;
                    EXCEPTION->state        = 0;


                    goto ruleclass_decl_or_defEx;

                }

                switch (alt61)
                {
            	case 1:
            	    // CPP_grammar_.g:941:5: id= qualified_id[bufQualifiedIdScope] ( ( SEMICOLON | member_declarator )=>| ( base_clause )? LCURLY ( member_declaration )* RCURLY )
            	    {
            	        FOLLOWPUSH(FOLLOW_qualified_id_in_class_decl_or_def3515);
            	        id=qualified_id(ctx, bufQualifiedIdScope);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcpy(pClassDeclOrDefBuf, reinterpret_cast<const char*>((STRSTREAM->toStringTT(STRSTREAM, id.start, id.stop))
            	            ->chars));
            	        }


            	        // CPP_grammar_.g:943:4: ( ( SEMICOLON | member_declarator )=>| ( base_clause )? LCURLY ( member_declaration )* RCURLY )
            	        {
            	            int alt59=2;
            	            {
            	                int LA59_0 = LA(1);
            	                if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == ID))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (LA59_0 == COLON))
            	                {
            	                    {
            	                        int LA59_2 = LA(2);
            	                        if ( (synpred51_CPP_grammar_(ctx)))
            	                        {
            	                            alt59=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt59=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 59;
            	                            EXCEPTION->state        = 2;


            	                            goto ruleclass_decl_or_defEx;

            	                        }
            	                    }
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == AMPERSAND))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == 88 || LA59_0 == 101))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == 97 || LA59_0 == 109))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == 90 || LA59_0 == 103))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == 96))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == 98 || LA59_0 == 110 || LA59_0 == 146))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == 99 || LA59_0 == 111))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == SCOPE))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == STAR))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == OPERATOR))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == TILDE))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == LPAREN))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (synpred51_CPP_grammar_(ctx)) && (LA59_0 == SEMICOLON))
            	                {
            	                    alt59=1;
            	                }
            	                else if ( (LA59_0 == LCURLY))
            	                {
            	                    alt59=2;
            	                }
            	                else
            	                {
            	                    if (BACKTRACKING>0)
            	                    {
            	                        FAILEDFLAG = ANTLR3_TRUE;
            	                        return ;
            	                    }


            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 59;
            	                    EXCEPTION->state        = 0;


            	                    goto ruleclass_decl_or_defEx;

            	                }
            	            }
            	            switch (alt59)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:944:5: ( SEMICOLON | member_declarator )=>
            	        	    {
            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            classForwardDeclaration(pClassDeclOrDefBuf, ts, fs);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:948:5: ( base_clause )? LCURLY ( member_declaration )* RCURLY
            	        	    {
            	        	        // CPP_grammar_.g:948:5: ( base_clause )?
            	        	        {
            	        	            int alt57=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case COLON:
            	        	                	{
            	        	                		alt57=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt57)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:948:6: base_clause
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_base_clause_in_class_decl_or_def3561);
            	        	        	        base_clause(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleclass_decl_or_defEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	         MATCHT(LCURLY, &FOLLOW_LCURLY_in_class_decl_or_def3569);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleclass_decl_or_defEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            saveClass = enclosingClass; enclosingClass = bufQualifiedIdScope; 
            	        	            				 beginClassDefinition(pClassDeclOrDefBuf, ts);
            	        	        }


            	        	        // CPP_grammar_.g:952:5: ( member_declaration )*

            	        	        for (;;)
            	        	        {
            	        	            int alt58=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	            case AMPERSAND:
            	        	            case ID:
            	        	            case LPAREN:
            	        	            case OPERATOR:
            	        	            case SCOPE:
            	        	            case SEMICOLON:
            	        	            case STAR:
            	        	            case TILDE:
            	        	            case 88:
            	        	            case 89:
            	        	            case 90:
            	        	            case 91:
            	        	            case 92:
            	        	            case 93:
            	        	            case 94:
            	        	            case 95:
            	        	            case 96:
            	        	            case 97:
            	        	            case 98:
            	        	            case 99:
            	        	            case 100:
            	        	            case 101:
            	        	            case 102:
            	        	            case 103:
            	        	            case 104:
            	        	            case 105:
            	        	            case 106:
            	        	            case 107:
            	        	            case 108:
            	        	            case 109:
            	        	            case 110:
            	        	            case 111:
            	        	            case 112:
            	        	            case 113:
            	        	            case 114:
            	        	            case 115:
            	        	            case 116:
            	        	            case 120:
            	        	            case 121:
            	        	            case 122:
            	        	            case 128:
            	        	            case 131:
            	        	            case 132:
            	        	            case 133:
            	        	            case 135:
            	        	            case 137:
            	        	            case 140:
            	        	            case 141:
            	        	            case 142:
            	        	            case 143:
            	        	            case 146:
            	        	            case 147:
            	        	            case 148:
            	        	            case 149:
            	        	            case 150:
            	        	            case 153:
            	        	            case 154:
            	        	            case 156:
            	        	            case 158:
            	        	            case 160:
            	        	            case 165:
            	        	            case 167:
            	        	            case 168:
            	        	            case 169:
            	        	            case 170:
            	        	            case 171:
            	        	            case 172:
            	        	            case 173:
            	        	            case 174:
            	        	            	{
            	        	            		alt58=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt58)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:952:6: member_declaration
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_member_declaration_in_class_decl_or_def3583);
            	        	        	        member_declaration(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleclass_decl_or_defEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop58;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop58: ; /* Jump out to here if this rule does not match */


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            endClassDefinition();
            	        	        }


            	        	         MATCHT(RCURLY, &FOLLOW_RCURLY_in_class_decl_or_def3597);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleclass_decl_or_defEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            enclosingClass = saveClass;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:958:4: LCURLY ( member_declaration )* RCURLY
            	    {
            	         MATCHT(LCURLY, &FOLLOW_LCURLY_in_class_decl_or_def3617);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            saveClass = enclosingClass; enclosingClass = "__anonymous";
            	            			 beginClassDefinition("anonymous", ts);
            	        }


            	        // CPP_grammar_.g:961:4: ( member_declaration )*

            	        for (;;)
            	        {
            	            int alt60=2;
            	            switch ( LA(1) )
            	            {
            	            case AMPERSAND:
            	            case ID:
            	            case LPAREN:
            	            case OPERATOR:
            	            case SCOPE:
            	            case SEMICOLON:
            	            case STAR:
            	            case TILDE:
            	            case 88:
            	            case 89:
            	            case 90:
            	            case 91:
            	            case 92:
            	            case 93:
            	            case 94:
            	            case 95:
            	            case 96:
            	            case 97:
            	            case 98:
            	            case 99:
            	            case 100:
            	            case 101:
            	            case 102:
            	            case 103:
            	            case 104:
            	            case 105:
            	            case 106:
            	            case 107:
            	            case 108:
            	            case 109:
            	            case 110:
            	            case 111:
            	            case 112:
            	            case 113:
            	            case 114:
            	            case 115:
            	            case 116:
            	            case 120:
            	            case 121:
            	            case 122:
            	            case 128:
            	            case 131:
            	            case 132:
            	            case 133:
            	            case 135:
            	            case 137:
            	            case 140:
            	            case 141:
            	            case 142:
            	            case 143:
            	            case 146:
            	            case 147:
            	            case 148:
            	            case 149:
            	            case 150:
            	            case 153:
            	            case 154:
            	            case 156:
            	            case 158:
            	            case 160:
            	            case 165:
            	            case 167:
            	            case 168:
            	            case 169:
            	            case 170:
            	            case 171:
            	            case 172:
            	            case 173:
            	            case 174:
            	            	{
            	            		alt60=1;
            	            	}
            	                break;

            	            }

            	            switch (alt60)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:961:5: member_declaration
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_member_declaration_in_class_decl_or_def3629);
            	        	        member_declaration(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleclass_decl_or_defEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop60;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop60: ; /* Jump out to here if this rule does not match */


            	        if ( BACKTRACKING==0 )
            	        {
            	            endClassDefinition();
            	        }


            	         MATCHT(RCURLY, &FOLLOW_RCURLY_in_class_decl_or_def3641);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclass_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            enclosingClass = saveClass;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleclass_decl_or_defEx; /* Prevent compiler warnings */
    ruleclass_decl_or_defEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end class_decl_or_def */

/**
 * $ANTLR start base_clause
 * CPP_grammar_.g:969:1: base_clause : COLON base_specifier ( COMMA base_specifier )* ;
 */
static void
base_clause(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:970:2: ( COLON base_specifier ( COMMA base_specifier )* )
        // CPP_grammar_.g:971:3: COLON base_specifier ( COMMA base_specifier )*
        {
             MATCHT(COLON, &FOLLOW_COLON_in_base_clause3665);
            if  (HASEXCEPTION())
            {
                goto rulebase_clauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_base_specifier_in_base_clause3667);
            base_specifier(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebase_clauseEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:971:24: ( COMMA base_specifier )*

            for (;;)
            {
                int alt62=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt62=1;
                	}
                    break;

                }

                switch (alt62)
                {
            	case 1:
            	    // CPP_grammar_.g:971:25: COMMA base_specifier
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_base_clause3670);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebase_clauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_base_specifier_in_base_clause3672);
            	        base_specifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebase_clauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop62;	/* break out of the loop */
            	    break;
                }
            }
            loop62: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulebase_clauseEx; /* Prevent compiler warnings */
    rulebase_clauseEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end base_clause */

/**
 * $ANTLR start base_specifier
 * CPP_grammar_.g:975:1: base_specifier : ( 'virtual' ( access_specifier )? qt1= qualified_type[bufQualifiedType] | access_specifier ( 'virtual' )? qt2= qualified_type[bufQualifiedType] |qt3= qualified_type[bufQualifiedType] ) ;
 */
static void
base_specifier(pCPP_grammar_Parser ctx)
{

    	    char *qt = NULL; //FIXME: what it is used for?
    		char bufQualifiedType[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    char * qt1;
    #undef	RETURN_TYPE_qt1
    #define	RETURN_TYPE_qt1 char *

    char * qt2;
    #undef	RETURN_TYPE_qt2
    #define	RETURN_TYPE_qt2 char *

    char * qt3;
    #undef	RETURN_TYPE_qt3
    #define	RETURN_TYPE_qt3 char *

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:980:2: ( ( 'virtual' ( access_specifier )? qt1= qualified_type[bufQualifiedType] | access_specifier ( 'virtual' )? qt2= qualified_type[bufQualifiedType] |qt3= qualified_type[bufQualifiedType] ) )
        // CPP_grammar_.g:981:3: ( 'virtual' ( access_specifier )? qt1= qualified_type[bufQualifiedType] | access_specifier ( 'virtual' )? qt2= qualified_type[bufQualifiedType] |qt3= qualified_type[bufQualifiedType] )
        {
            // CPP_grammar_.g:981:3: ( 'virtual' ( access_specifier )? qt1= qualified_type[bufQualifiedType] | access_specifier ( 'virtual' )? qt2= qualified_type[bufQualifiedType] |qt3= qualified_type[bufQualifiedType] )
            {
                int alt65=3;
                switch ( LA(1) )
                {
                case 171:
                	{
                		alt65=1;
                	}
                    break;
                case 147:
                case 148:
                case 149:
                	{
                		alt65=2;
                	}
                    break;
                case ID:
                case SCOPE:
                	{
                		alt65=3;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 65;
                    EXCEPTION->state        = 0;


                    goto rulebase_specifierEx;

                }

                switch (alt65)
                {
            	case 1:
            	    // CPP_grammar_.g:981:5: 'virtual' ( access_specifier )? qt1= qualified_type[bufQualifiedType]
            	    {
            	         MATCHT(171, &FOLLOW_171_in_base_specifier3697);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebase_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:981:15: ( access_specifier )?
            	        {
            	            int alt63=2;
            	            switch ( LA(1) )
            	            {
            	                case 147:
            	                case 148:
            	                case 149:
            	                	{
            	                		alt63=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt63)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:981:16: access_specifier
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_access_specifier_in_base_specifier3700);
            	        	        access_specifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebase_specifierEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_qualified_type_in_base_specifier3708);
            	        qt1=qualified_type(ctx, bufQualifiedType);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebase_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            qt = qt1
            	            ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:982:5: access_specifier ( 'virtual' )? qt2= qualified_type[bufQualifiedType]
            	    {
            	        FOLLOWPUSH(FOLLOW_access_specifier_in_base_specifier3717);
            	        access_specifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebase_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:982:22: ( 'virtual' )?
            	        {
            	            int alt64=2;
            	            switch ( LA(1) )
            	            {
            	                case 171:
            	                	{
            	                		alt64=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt64)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:982:23: 'virtual'
            	        	    {
            	        	         MATCHT(171, &FOLLOW_171_in_base_specifier3720);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebase_specifierEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_qualified_type_in_base_specifier3728);
            	        qt2=qualified_type(ctx, bufQualifiedType);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebase_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            qt = qt2
            	            ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:983:5: qt3= qualified_type[bufQualifiedType]
            	    {
            	        FOLLOWPUSH(FOLLOW_qualified_type_in_base_specifier3741);
            	        qt3=qualified_type(ctx, bufQualifiedType);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebase_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            qt = qt3
            	            ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulebase_specifierEx; /* Prevent compiler warnings */
    rulebase_specifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end base_specifier */

/**
 * $ANTLR start access_specifier
 * CPP_grammar_.g:988:1: access_specifier : ( 'public' | 'protected' | 'private' ) ;
 */
static void
access_specifier(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:989:2: ( ( 'public' | 'protected' | 'private' ) )
        // CPP_grammar_.g:
        {
            if ( ((LA(1) >= 147) && (LA(1) <= 149)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleaccess_specifierEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleaccess_specifierEx; /* Prevent compiler warnings */
    ruleaccess_specifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end access_specifier */

/**
 * $ANTLR start enum_specifier
 * CPP_grammar_.g:997:1: enum_specifier : 'enum' ( LCURLY enumerator_list RCURLY |id1= qualified_id[bufQualifiedIdScope] ( LCURLY enumerator_list RCURLY )? ) ;
 */
static void
enum_specifier(pCPP_grammar_Parser ctx)
{

    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    CPP_grammar_Parser_qualified_id_return id1;
    #undef	RETURN_TYPE_id1
    #define	RETURN_TYPE_id1 CPP_grammar_Parser_qualified_id_return

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1001:2: ( 'enum' ( LCURLY enumerator_list RCURLY |id1= qualified_id[bufQualifiedIdScope] ( LCURLY enumerator_list RCURLY )? ) )
        // CPP_grammar_.g:1002:3: 'enum' ( LCURLY enumerator_list RCURLY |id1= qualified_id[bufQualifiedIdScope] ( LCURLY enumerator_list RCURLY )? )
        {
             MATCHT(131, &FOLLOW_131_in_enum_specifier3803);
            if  (HASEXCEPTION())
            {
                goto ruleenum_specifierEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1003:3: ( LCURLY enumerator_list RCURLY |id1= qualified_id[bufQualifiedIdScope] ( LCURLY enumerator_list RCURLY )? )
            {
                int alt67=2;
                switch ( LA(1) )
                {
                case LCURLY:
                	{
                		alt67=1;
                	}
                    break;
                case ID:
                case OPERATOR:
                case SCOPE:
                case TILDE:
                	{
                		alt67=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 67;
                    EXCEPTION->state        = 0;


                    goto ruleenum_specifierEx;

                }

                switch (alt67)
                {
            	case 1:
            	    // CPP_grammar_.g:1004:4: LCURLY enumerator_list RCURLY
            	    {
            	         MATCHT(LCURLY, &FOLLOW_LCURLY_in_enum_specifier3813);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenum_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_enumerator_list_in_enum_specifier3815);
            	        enumerator_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenum_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(RCURLY, &FOLLOW_RCURLY_in_enum_specifier3817);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenum_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1006:4: id1= qualified_id[bufQualifiedIdScope] ( LCURLY enumerator_list RCURLY )?
            	    {
            	        FOLLOWPUSH(FOLLOW_qualified_id_in_enum_specifier3831);
            	        id1=qualified_id(ctx, bufQualifiedIdScope);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenum_specifierEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            beginEnumDefinition((char*)(STRSTREAM->toStringTT(STRSTREAM, id1.start, id1.stop))
            	            ->chars);
            	        }


            	        // CPP_grammar_.g:1008:4: ( LCURLY enumerator_list RCURLY )?
            	        {
            	            int alt66=2;
            	            switch ( LA(1) )
            	            {
            	                case LCURLY:
            	                	{
            	                		alt66=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt66)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1008:5: LCURLY enumerator_list RCURLY
            	        	    {
            	        	         MATCHT(LCURLY, &FOLLOW_LCURLY_in_enum_specifier3844);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleenum_specifierEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_enumerator_list_in_enum_specifier3846);
            	        	        enumerator_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleenum_specifierEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	         MATCHT(RCURLY, &FOLLOW_RCURLY_in_enum_specifier3848);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleenum_specifierEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        if ( BACKTRACKING==0 )
            	        {
            	            endEnumDefinition();
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleenum_specifierEx; /* Prevent compiler warnings */
    ruleenum_specifierEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end enum_specifier */

/**
 * $ANTLR start enumerator_list
 * CPP_grammar_.g:1014:1: enumerator_list : enumerator ( COMMA ( enumerator )? )* ;
 */
static void
enumerator_list(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1015:2: ( enumerator ( COMMA ( enumerator )? )* )
        // CPP_grammar_.g:1016:3: enumerator ( COMMA ( enumerator )? )*
        {
            FOLLOWPUSH(FOLLOW_enumerator_in_enumerator_list3874);
            enumerator(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleenumerator_listEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1016:14: ( COMMA ( enumerator )? )*

            for (;;)
            {
                int alt69=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt69=1;
                	}
                    break;

                }

                switch (alt69)
                {
            	case 1:
            	    // CPP_grammar_.g:1016:15: COMMA ( enumerator )?
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_enumerator_list3877);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenumerator_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:1016:21: ( enumerator )?
            	        {
            	            int alt68=2;
            	            switch ( LA(1) )
            	            {
            	                case ID:
            	                	{
            	                		alt68=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt68)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1016:22: enumerator
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_enumerator_in_enumerator_list3880);
            	        	        enumerator(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleenumerator_listEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop69;	/* break out of the loop */
            	    break;
                }
            }
            loop69: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleenumerator_listEx; /* Prevent compiler warnings */
    ruleenumerator_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end enumerator_list */

/**
 * $ANTLR start enumerator
 * CPP_grammar_.g:1020:1: enumerator : id= ID ( ASSIGNEQUAL constant_expression )? ;
 */
static void
enumerator(pCPP_grammar_Parser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // CPP_grammar_.g:1021:2: (id= ID ( ASSIGNEQUAL constant_expression )? )
        // CPP_grammar_.g:1022:3: id= ID ( ASSIGNEQUAL constant_expression )?
        {
            id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_enumerator3903);
            if  (HASEXCEPTION())
            {
                goto ruleenumeratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1022:9: ( ASSIGNEQUAL constant_expression )?
            {
                int alt70=2;
                switch ( LA(1) )
                {
                    case ASSIGNEQUAL:
                    	{
                    		alt70=1;
                    	}
                        break;
                }

                switch (alt70)
                {
            	case 1:
            	    // CPP_grammar_.g:1022:10: ASSIGNEQUAL constant_expression
            	    {
            	         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_enumerator3906);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenumeratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_constant_expression_in_enumerator3908);
            	        constant_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenumeratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            if ( BACKTRACKING==0 )
            {
                enumElement((char*)((id->getText(id))->chars));
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleenumeratorEx; /* Prevent compiler warnings */
    ruleenumeratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end enumerator */

/**
 * $ANTLR start qualified_id
 * CPP_grammar_.g:1037:1: qualified_id[char *pScopeReturnBuf] returns [char *qiReturn] : so= scope_override[bufScopeOverrideScope] (id= ID ( ( LESSTHAN template_argument_list GREATERTHAN )=> LESSTHAN template_argument_list GREATERTHAN )? | OPERATOR op1= optor[bufOptorScope] | TILDE id_expression ) ;
 */
static CPP_grammar_Parser_qualified_id_return
qualified_id(pCPP_grammar_Parser ctx, char *pScopeReturnBuf)
{
    CPP_grammar_Parser_qualified_id_return retval;



    		char bufOptorScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    		char bufScopeOverrideScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    pANTLR3_COMMON_TOKEN    id;
    char * so;
    #undef	RETURN_TYPE_so
    #define	RETURN_TYPE_so char *

    char* op1;
    #undef	RETURN_TYPE_op1
    #define	RETURN_TYPE_op1 char*

    /* Initialize rule variables
     */


    		retval.qiReturn= pScopeReturnBuf;
     
    	
    id       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    {
        // CPP_grammar_.g:1045:2: (so= scope_override[bufScopeOverrideScope] (id= ID ( ( LESSTHAN template_argument_list GREATERTHAN )=> LESSTHAN template_argument_list GREATERTHAN )? | OPERATOR op1= optor[bufOptorScope] | TILDE id_expression ) )
        // CPP_grammar_.g:1046:3: so= scope_override[bufScopeOverrideScope] (id= ID ( ( LESSTHAN template_argument_list GREATERTHAN )=> LESSTHAN template_argument_list GREATERTHAN )? | OPERATOR op1= optor[bufOptorScope] | TILDE id_expression )
        {
            FOLLOWPUSH(FOLLOW_scope_override_in_qualified_id3968);
            so=scope_override(ctx, bufScopeOverrideScope);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulequalified_idEx;
            }
            if (HASFAILED())
            {
                return retval;
            }


            if ( BACKTRACKING==0 )
            {
                 
                		strcpy(pScopeReturnBuf, reinterpret_cast<const char*>(so
                ));
                		
            }


            // CPP_grammar_.g:1050:3: (id= ID ( ( LESSTHAN template_argument_list GREATERTHAN )=> LESSTHAN template_argument_list GREATERTHAN )? | OPERATOR op1= optor[bufOptorScope] | TILDE id_expression )
            {
                int alt72=3;
                switch ( LA(1) )
                {
                case ID:
                	{
                		alt72=1;
                	}
                    break;
                case OPERATOR:
                	{
                		alt72=2;
                	}
                    break;
                case TILDE:
                	{
                		alt72=3;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 72;
                    EXCEPTION->state        = 0;


                    goto rulequalified_idEx;

                }

                switch (alt72)
                {
            	case 1:
            	    // CPP_grammar_.g:1050:5: id= ID ( ( LESSTHAN template_argument_list GREATERTHAN )=> LESSTHAN template_argument_list GREATERTHAN )?
            	    {
            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_qualified_id3982);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalified_idEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pScopeReturnBuf, reinterpret_cast<const char*>((id->getText(id))->chars));
            	        }


            	        // CPP_grammar_.g:1051:4: ( ( LESSTHAN template_argument_list GREATERTHAN )=> LESSTHAN template_argument_list GREATERTHAN )?
            	        {
            	            int alt71=2;
            	            switch ( LA(1) )
            	            {
            	                case LESSTHAN:
            	                	{
            	                		{
            	                		    int LA71_1 = LA(2);
            	                		    if ( (synpred52_CPP_grammar_(ctx)))
            	                		    {
            	                		        alt71=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt71)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1051:5: ( LESSTHAN template_argument_list GREATERTHAN )=> LESSTHAN template_argument_list GREATERTHAN
            	        	    {
            	        	         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_qualified_id4004);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulequalified_idEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_template_argument_list_in_qualified_id4006);
            	        	        template_argument_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulequalified_idEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_qualified_id4008);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulequalified_idEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1054:4: OPERATOR op1= optor[bufOptorScope]
            	    {
            	         MATCHT(OPERATOR, &FOLLOW_OPERATOR_in_qualified_id4022);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalified_idEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }


            	        FOLLOWPUSH(FOLLOW_optor_in_qualified_id4026);
            	        op1=optor(ctx, bufOptorScope);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalified_idEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pScopeReturnBuf,"operator"); strcat(pScopeReturnBuf, reinterpret_cast<const char*>(op1
            	            ));
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:1057:4: TILDE id_expression
            	    {
            	         MATCHT(TILDE, &FOLLOW_TILDE_in_qualified_id4041);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalified_idEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }


            	        FOLLOWPUSH(FOLLOW_id_expression_in_qualified_id4043);
            	        id_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalified_idEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

            if ( BACKTRACKING==0 )
            {

                		retval.qiReturn= pScopeReturnBuf;

                		
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulequalified_idEx; /* Prevent compiler warnings */
    rulequalified_idEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end qualified_id */

/**
 * $ANTLR start typeID
 * CPP_grammar_.g:1070:1: typeID :{...}? ID ;
 */
static void
typeID(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1071:2: ({...}? ID )
        // CPP_grammar_.g:1072:3: {...}? ID
        {
            if ( !((isTypeName((char*)LT(1)->getText(LT(1))->chars))) )
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                    EXCEPTION->message      = (void *)"isTypeName((char*)LT(1)->getText(LT(1))->chars)";
                    EXCEPTION->ruleName	 = (void *)"typeID";


            }

             MATCHT(ID, &FOLLOW_ID_in_typeID4077);
            if  (HASEXCEPTION())
            {
                goto ruletypeIDEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletypeIDEx; /* Prevent compiler warnings */
    ruletypeIDEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end typeID */

/**
 * $ANTLR start init_declarator_list
 * CPP_grammar_.g:1077:1: init_declarator_list : member_declarator ( COMMA member_declarator )* ;
 */
static void
init_declarator_list(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1078:2: ( member_declarator ( COMMA member_declarator )* )
        // CPP_grammar_.g:1079:3: member_declarator ( COMMA member_declarator )*
        {
            FOLLOWPUSH(FOLLOW_member_declarator_in_init_declarator_list4092);
            member_declarator(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinit_declarator_listEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1079:21: ( COMMA member_declarator )*

            for (;;)
            {
                int alt73=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt73=1;
                	}
                    break;

                }

                switch (alt73)
                {
            	case 1:
            	    // CPP_grammar_.g:1079:22: COMMA member_declarator
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_init_declarator_list4095);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinit_declarator_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_member_declarator_in_init_declarator_list4097);
            	        member_declarator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinit_declarator_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop73;	/* break out of the loop */
            	    break;
                }
            }
            loop73: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinit_declarator_listEx; /* Prevent compiler warnings */
    ruleinit_declarator_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end init_declarator_list */

/**
 * $ANTLR start member_declarator
 * CPP_grammar_.g:1083:1: member_declarator : ( ( ( ID )? COLON constant_expression )=> ( ID )? COLON constant_expression | declarator ( ( ASSIGNEQUAL OCTALINT SEMICOLON )=> ASSIGNEQUAL OCTALINT | ASSIGNEQUAL initializer | LPAREN expression_list RPAREN )? );
 */
static void
member_declarator(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1084:2: ( ( ( ID )? COLON constant_expression )=> ( ID )? COLON constant_expression | declarator ( ( ASSIGNEQUAL OCTALINT SEMICOLON )=> ASSIGNEQUAL OCTALINT | ASSIGNEQUAL initializer | LPAREN expression_list RPAREN )? )

            ANTLR3_UINT32 alt76;

            alt76=2;

            {
                int LA76_0 = LA(1);
                if ( (LA76_0 == ID))
                {
                    {
                        int LA76_1 = LA(2);
                        if ( (synpred53_CPP_grammar_(ctx)) && (LA76_1 == COLON))
                        {
                            alt76=1;
                        }
                        else if ( (LA76_1 == EOF || LA76_1 == ASSIGNEQUAL || LA76_1 == COMMA || LA76_1 == LESSTHAN || ((LA76_1 >= LPAREN) && (LA76_1 <= LSQUARE)) || ((LA76_1 >= SCOPE) && (LA76_1 <= SEMICOLON))))
                        {
                            alt76=2;
                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }


                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 76;
                            EXCEPTION->state        = 1;


                            goto rulemember_declaratorEx;

                        }
                    }
                }
                else if ( (synpred53_CPP_grammar_(ctx)) && (LA76_0 == COLON))
                {
                    alt76=1;
                }
                else if ( (LA76_0 == AMPERSAND || LA76_0 == LPAREN || LA76_0 == OPERATOR || LA76_0 == SCOPE || LA76_0 == STAR || LA76_0 == TILDE || LA76_0 == 88 || LA76_0 == 90 || ((LA76_0 >= 96) && (LA76_0 <= 99)) || LA76_0 == 101 || LA76_0 == 103 || ((LA76_0 >= 109) && (LA76_0 <= 111)) || LA76_0 == 146))
                {
                    alt76=2;
                }
                else
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }


                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 76;
                    EXCEPTION->state        = 0;


                    goto rulemember_declaratorEx;

                }
            }
            switch (alt76)
            {
        	case 1:
        	    // CPP_grammar_.g:1085:3: ( ( ID )? COLON constant_expression )=> ( ID )? COLON constant_expression
        	    {
        	        // CPP_grammar_.g:1085:38: ( ID )?
        	        {
        	            int alt74=2;
        	            switch ( LA(1) )
        	            {
        	                case ID:
        	                	{
        	                		alt74=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt74)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1085:39: ID
        	        	    {
        	        	         MATCHT(ID, &FOLLOW_ID_in_member_declarator4126);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemember_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(COLON, &FOLLOW_COLON_in_member_declarator4130);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemember_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_constant_expression_in_member_declarator4132);
        	        constant_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemember_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1087:3: declarator ( ( ASSIGNEQUAL OCTALINT SEMICOLON )=> ASSIGNEQUAL OCTALINT | ASSIGNEQUAL initializer | LPAREN expression_list RPAREN )?
        	    {
        	        FOLLOWPUSH(FOLLOW_declarator_in_member_declarator4141);
        	        declarator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemember_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:1088:3: ( ( ASSIGNEQUAL OCTALINT SEMICOLON )=> ASSIGNEQUAL OCTALINT | ASSIGNEQUAL initializer | LPAREN expression_list RPAREN )?
        	        {
        	            int alt75=4;
        	            switch ( LA(1) )
        	            {
        	                case ASSIGNEQUAL:
        	                	{
        	                		switch ( LA(2) )
        	                		{
        	                		    case OCTALINT:
        	                		    	{
        	                		    		{
        	                		    		    int LA75_4 = LA(3);
        	                		    		    if ( (synpred54_CPP_grammar_(ctx)))
        	                		    		    {
        	                		    		        alt75=1;
        	                		    		    }
        	                		    		    else if ( (ANTLR3_TRUE))
        	                		    		    {
        	                		    		        alt75=2;
        	                		    		    }
        	                		    		}
        	                		    	}
        	                		        break;
        	                		    case AMPERSAND:
        	                		    case CharLiteral:
        	                		    case DECIMALINT:
        	                		    case FLOATONE:
        	                		    case FLOATTWO:
        	                		    case HEXADECIMALINT:
        	                		    case ID:
        	                		    case LCURLY:
        	                		    case LPAREN:
        	                		    case MINUS:
        	                		    case MINUSMINUS:
        	                		    case NOT:
        	                		    case OPERATOR:
        	                		    case PLUS:
        	                		    case PLUSPLUS:
        	                		    case SCOPE:
        	                		    case STAR:
        	                		    case StringLiteral:
        	                		    case TILDE:
        	                		    case WCharLiteral:
        	                		    case WStringLiteral:
        	                		    case 87:
        	                		    case 92:
        	                		    case 93:
        	                		    case 94:
        	                		    case 95:
        	                		    case 100:
        	                		    case 105:
        	                		    case 106:
        	                		    case 107:
        	                		    case 108:
        	                		    case 112:
        	                		    case 116:
        	                		    case 120:
        	                		    case 121:
        	                		    case 123:
        	                		    case 126:
        	                		    case 128:
        	                		    case 129:
        	                		    case 131:
        	                		    case 134:
        	                		    case 135:
        	                		    case 141:
        	                		    case 142:
        	                		    case 145:
        	                		    case 151:
        	                		    case 153:
        	                		    case 154:
        	                		    case 155:
        	                		    case 157:
        	                		    case 158:
        	                		    case 161:
        	                		    case 163:
        	                		    case 166:
        	                		    case 167:
        	                		    case 168:
        	                		    case 169:
        	                		    case 172:
        	                		    case 174:
        	                		    	{
        	                		    		alt75=2;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case LPAREN:
        	                	{
        	                		alt75=3;
        	                	}
        	                    break;
        	            }

        	            switch (alt75)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1089:4: ( ASSIGNEQUAL OCTALINT SEMICOLON )=> ASSIGNEQUAL OCTALINT
        	        	    {
        	        	         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_member_declarator4159);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemember_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	         MATCHT(OCTALINT, &FOLLOW_OCTALINT_in_member_declarator4161);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemember_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CPP_grammar_.g:1091:4: ASSIGNEQUAL initializer
        	        	    {
        	        	         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_member_declarator4172);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemember_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_initializer_in_member_declarator4178);
        	        	        initializer(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemember_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // CPP_grammar_.g:1094:4: LPAREN expression_list RPAREN
        	        	    {
        	        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_member_declarator4188);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemember_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_expression_list_in_member_declarator4190);
        	        	        expression_list(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemember_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_member_declarator4192);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemember_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulemember_declaratorEx; /* Prevent compiler warnings */
    rulemember_declaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end member_declarator */

/**
 * $ANTLR start initializer
 * CPP_grammar_.g:1099:1: initializer : ( remainder_expression | LCURLY initializer ( COMMA ( initializer )? )* RCURLY );
 */
static void
initializer(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1100:2: ( remainder_expression | LCURLY initializer ( COMMA ( initializer )? )* RCURLY )

            ANTLR3_UINT32 alt79;

            alt79=2;

            switch ( LA(1) )
            {
            case AMPERSAND:
            case CharLiteral:
            case DECIMALINT:
            case FLOATONE:
            case FLOATTWO:
            case HEXADECIMALINT:
            case ID:
            case LPAREN:
            case MINUS:
            case MINUSMINUS:
            case NOT:
            case OCTALINT:
            case OPERATOR:
            case PLUS:
            case PLUSPLUS:
            case SCOPE:
            case STAR:
            case StringLiteral:
            case TILDE:
            case WCharLiteral:
            case WStringLiteral:
            case 87:
            case 92:
            case 93:
            case 94:
            case 95:
            case 100:
            case 105:
            case 106:
            case 107:
            case 108:
            case 112:
            case 116:
            case 120:
            case 121:
            case 123:
            case 126:
            case 128:
            case 129:
            case 131:
            case 134:
            case 135:
            case 141:
            case 142:
            case 145:
            case 151:
            case 153:
            case 154:
            case 155:
            case 157:
            case 158:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 172:
            case 174:
            	{
            		alt79=1;
            	}
                break;
            case LCURLY:
            	{
            		alt79=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 79;
                EXCEPTION->state        = 0;


                goto ruleinitializerEx;

            }

            switch (alt79)
            {
        	case 1:
        	    // CPP_grammar_.g:1101:3: remainder_expression
        	    {
        	        FOLLOWPUSH(FOLLOW_remainder_expression_in_initializer4213);
        	        remainder_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitializerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1103:3: LCURLY initializer ( COMMA ( initializer )? )* RCURLY
        	    {
        	         MATCHT(LCURLY, &FOLLOW_LCURLY_in_initializer4222);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitializerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_initializer_in_initializer4224);
        	        initializer(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitializerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:1103:22: ( COMMA ( initializer )? )*

        	        for (;;)
        	        {
        	            int alt78=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt78=1;
        	            	}
        	                break;

        	            }

        	            switch (alt78)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1103:23: COMMA ( initializer )?
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_initializer4227);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleinitializerEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        // CPP_grammar_.g:1103:29: ( initializer )?
        	        	        {
        	        	            int alt77=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case AMPERSAND:
        	        	                case CharLiteral:
        	        	                case DECIMALINT:
        	        	                case FLOATONE:
        	        	                case FLOATTWO:
        	        	                case HEXADECIMALINT:
        	        	                case ID:
        	        	                case LCURLY:
        	        	                case LPAREN:
        	        	                case MINUS:
        	        	                case MINUSMINUS:
        	        	                case NOT:
        	        	                case OCTALINT:
        	        	                case OPERATOR:
        	        	                case PLUS:
        	        	                case PLUSPLUS:
        	        	                case SCOPE:
        	        	                case STAR:
        	        	                case StringLiteral:
        	        	                case TILDE:
        	        	                case WCharLiteral:
        	        	                case WStringLiteral:
        	        	                case 87:
        	        	                case 92:
        	        	                case 93:
        	        	                case 94:
        	        	                case 95:
        	        	                case 100:
        	        	                case 105:
        	        	                case 106:
        	        	                case 107:
        	        	                case 108:
        	        	                case 112:
        	        	                case 116:
        	        	                case 120:
        	        	                case 121:
        	        	                case 123:
        	        	                case 126:
        	        	                case 128:
        	        	                case 129:
        	        	                case 131:
        	        	                case 134:
        	        	                case 135:
        	        	                case 141:
        	        	                case 142:
        	        	                case 145:
        	        	                case 151:
        	        	                case 153:
        	        	                case 154:
        	        	                case 155:
        	        	                case 157:
        	        	                case 158:
        	        	                case 161:
        	        	                case 163:
        	        	                case 166:
        	        	                case 167:
        	        	                case 168:
        	        	                case 169:
        	        	                case 172:
        	        	                case 174:
        	        	                	{
        	        	                		alt77=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt77)
        	        	            {
        	        	        	case 1:
        	        	        	    // CPP_grammar_.g:1103:30: initializer
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_initializer_in_initializer4230);
        	        	        	        initializer(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleinitializerEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return ;
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop78;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop78: ; /* Jump out to here if this rule does not match */


        	         MATCHT(RCURLY, &FOLLOW_RCURLY_in_initializer4237);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitializerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleinitializerEx; /* Prevent compiler warnings */
    ruleinitializerEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end initializer */

/**
 * $ANTLR start declarator
 * CPP_grammar_.g:1107:1: declarator : ( ( ptr_operator )=> ptr_operator declarator | direct_declarator );
 */
static void
declarator(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1108:2: ( ( ptr_operator )=> ptr_operator declarator | direct_declarator )

            ANTLR3_UINT32 alt80;

            alt80=2;

            {
                int LA80_0 = LA(1);
                if ( (synpred55_CPP_grammar_(ctx)) && (LA80_0 == AMPERSAND))
                {
                    alt80=1;
                }
                else if ( (synpred55_CPP_grammar_(ctx)) && (LA80_0 == 88 || LA80_0 == 101))
                {
                    alt80=1;
                }
                else if ( (synpred55_CPP_grammar_(ctx)) && (LA80_0 == 97 || LA80_0 == 109))
                {
                    alt80=1;
                }
                else if ( (synpred55_CPP_grammar_(ctx)) && (LA80_0 == 90 || LA80_0 == 103))
                {
                    alt80=1;
                }
                else if ( (synpred55_CPP_grammar_(ctx)) && (LA80_0 == 96))
                {
                    alt80=1;
                }
                else if ( (synpred55_CPP_grammar_(ctx)) && (LA80_0 == 98 || LA80_0 == 110 || LA80_0 == 146))
                {
                    alt80=1;
                }
                else if ( (synpred55_CPP_grammar_(ctx)) && (LA80_0 == 99 || LA80_0 == 111))
                {
                    alt80=1;
                }
                else if ( (LA80_0 == SCOPE))
                {
                    {
                        int LA80_8 = LA(2);
                        if ( (synpred55_CPP_grammar_(ctx)))
                        {
                            alt80=1;
                        }
                        else if ( (ANTLR3_TRUE))
                        {
                            alt80=2;
                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }


                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 80;
                            EXCEPTION->state        = 8;


                            goto ruledeclaratorEx;

                        }
                    }
                }
                else if ( (LA80_0 == ID))
                {
                    {
                        int LA80_9 = LA(2);
                        if ( (synpred55_CPP_grammar_(ctx)))
                        {
                            alt80=1;
                        }
                        else if ( (ANTLR3_TRUE))
                        {
                            alt80=2;
                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }


                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 80;
                            EXCEPTION->state        = 9;


                            goto ruledeclaratorEx;

                        }
                    }
                }
                else if ( (synpred55_CPP_grammar_(ctx)) && (LA80_0 == STAR))
                {
                    alt80=1;
                }
                else if ( (LA80_0 == LPAREN || LA80_0 == OPERATOR || LA80_0 == TILDE))
                {
                    alt80=2;
                }
                else
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }


                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 80;
                    EXCEPTION->state        = 0;


                    goto ruledeclaratorEx;

                }
            }
            switch (alt80)
            {
        	case 1:
        	    // CPP_grammar_.g:1109:3: ( ptr_operator )=> ptr_operator declarator
        	    {
        	        FOLLOWPUSH(FOLLOW_ptr_operator_in_declarator4257);
        	        ptr_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_declarator_in_declarator4262);
        	        declarator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1112:3: direct_declarator
        	    {
        	        FOLLOWPUSH(FOLLOW_direct_declarator_in_declarator4270);
        	        direct_declarator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledeclaratorEx; /* Prevent compiler warnings */
    ruledeclaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end declarator */

/**
 * $ANTLR start direct_declarator
 * CPP_grammar_.g:1116:1: direct_declarator : ( ( qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN ( RPAREN | declaration_specifiers ) )=>id1= qualified_id[bufQualifiedIdScope] LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )? | ( qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN qualified_id[$direct_declarator::pQualifiedIdBuf] )=>id2= qualified_id[bufQualifiedIdScope] LPAREN expression_list RPAREN | ( qualified_id[$direct_declarator::pQualifiedIdBuf] LSQUARE )=>id3= qualified_id[bufQualifiedIdScope] ( LSQUARE ( constant_expression )? RSQUARE )+ | ( qualified_id[$direct_declarator::pQualifiedIdBuf] RPAREN LPAREN )=>id4= qualified_id[bufQualifiedIdScope] |id5= qualified_id[bufQualifiedIdScope] | LPAREN declarator RPAREN ( declarator_suffix )? );
 */
static void
direct_declarator(pCPP_grammar_Parser ctx)
{

    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    CPP_grammar_Parser_qualified_id_return id1;
    #undef	RETURN_TYPE_id1
    #define	RETURN_TYPE_id1 CPP_grammar_Parser_qualified_id_return

    TypeQualifier tq;
    #undef	RETURN_TYPE_tq
    #define	RETURN_TYPE_tq TypeQualifier

    CPP_grammar_Parser_qualified_id_return id2;
    #undef	RETURN_TYPE_id2
    #define	RETURN_TYPE_id2 CPP_grammar_Parser_qualified_id_return

    CPP_grammar_Parser_qualified_id_return id3;
    #undef	RETURN_TYPE_id3
    #define	RETURN_TYPE_id3 CPP_grammar_Parser_qualified_id_return

    CPP_grammar_Parser_qualified_id_return id4;
    #undef	RETURN_TYPE_id4
    #define	RETURN_TYPE_id4 CPP_grammar_Parser_qualified_id_return

    CPP_grammar_Parser_qualified_id_return id5;
    #undef	RETURN_TYPE_id5
    #define	RETURN_TYPE_id5 CPP_grammar_Parser_qualified_id_return

    /* Initialize rule variables
     */
    ctx->pCPP_grammar_Parser_direct_declaratorTop = pCPP_grammar_Parser_direct_declaratorPush(ctx);

    		(SCOPE_TOP(direct_declarator))->pQualifiedIdBuf= bufQualifiedIdScope; 
    	
    {
        {
            //  CPP_grammar_.g:1126:2: ( ( qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN ( RPAREN | declaration_specifiers ) )=>id1= qualified_id[bufQualifiedIdScope] LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )? | ( qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN qualified_id[$direct_declarator::pQualifiedIdBuf] )=>id2= qualified_id[bufQualifiedIdScope] LPAREN expression_list RPAREN | ( qualified_id[$direct_declarator::pQualifiedIdBuf] LSQUARE )=>id3= qualified_id[bufQualifiedIdScope] ( LSQUARE ( constant_expression )? RSQUARE )+ | ( qualified_id[$direct_declarator::pQualifiedIdBuf] RPAREN LPAREN )=>id4= qualified_id[bufQualifiedIdScope] |id5= qualified_id[bufQualifiedIdScope] | LPAREN declarator RPAREN ( declarator_suffix )? )

            ANTLR3_UINT32 alt87;

            alt87=6;

            switch ( LA(1) )
            {
            case SCOPE:
            	{
            		{
            		    int LA87_1 = LA(2);
            		    if ( (synpred56_CPP_grammar_(ctx)))
            		    {
            		        alt87=1;
            		    }
            		    else if ( (synpred57_CPP_grammar_(ctx)))
            		    {
            		        alt87=2;
            		    }
            		    else if ( (synpred58_CPP_grammar_(ctx)))
            		    {
            		        alt87=3;
            		    }
            		    else if ( (synpred59_CPP_grammar_(ctx)))
            		    {
            		        alt87=4;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt87=5;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            pCPP_grammar_Parser_direct_declaratorPop(ctx);

            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 87;
            		        EXCEPTION->state        = 1;


            		        goto ruledirect_declaratorEx;

            		    }
            		}
            	}
                break;
            case ID:
            	{
            		{
            		    int LA87_2 = LA(2);
            		    if ( (synpred56_CPP_grammar_(ctx)))
            		    {
            		        alt87=1;
            		    }
            		    else if ( (synpred57_CPP_grammar_(ctx)))
            		    {
            		        alt87=2;
            		    }
            		    else if ( (synpred58_CPP_grammar_(ctx)))
            		    {
            		        alt87=3;
            		    }
            		    else if ( (synpred59_CPP_grammar_(ctx)))
            		    {
            		        alt87=4;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt87=5;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            pCPP_grammar_Parser_direct_declaratorPop(ctx);

            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 87;
            		        EXCEPTION->state        = 2;


            		        goto ruledirect_declaratorEx;

            		    }
            		}
            	}
                break;
            case OPERATOR:
            	{
            		{
            		    int LA87_3 = LA(2);
            		    if ( (synpred56_CPP_grammar_(ctx)))
            		    {
            		        alt87=1;
            		    }
            		    else if ( (synpred57_CPP_grammar_(ctx)))
            		    {
            		        alt87=2;
            		    }
            		    else if ( (synpred58_CPP_grammar_(ctx)))
            		    {
            		        alt87=3;
            		    }
            		    else if ( (synpred59_CPP_grammar_(ctx)))
            		    {
            		        alt87=4;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt87=5;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            pCPP_grammar_Parser_direct_declaratorPop(ctx);

            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 87;
            		        EXCEPTION->state        = 3;


            		        goto ruledirect_declaratorEx;

            		    }
            		}
            	}
                break;
            case TILDE:
            	{
            		{
            		    int LA87_4 = LA(2);
            		    if ( (synpred56_CPP_grammar_(ctx)))
            		    {
            		        alt87=1;
            		    }
            		    else if ( (synpred57_CPP_grammar_(ctx)))
            		    {
            		        alt87=2;
            		    }
            		    else if ( (synpred58_CPP_grammar_(ctx)))
            		    {
            		        alt87=3;
            		    }
            		    else if ( (synpred59_CPP_grammar_(ctx)))
            		    {
            		        alt87=4;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt87=5;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            pCPP_grammar_Parser_direct_declaratorPop(ctx);

            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 87;
            		        EXCEPTION->state        = 4;


            		        goto ruledirect_declaratorEx;

            		    }
            		}
            	}
                break;
            case LPAREN:
            	{
            		alt87=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    pCPP_grammar_Parser_direct_declaratorPop(ctx);

                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 87;
                EXCEPTION->state        = 0;


                goto ruledirect_declaratorEx;

            }

            switch (alt87)
            {
        	case 1:
        	    // CPP_grammar_.g:1127:3: ( qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN ( RPAREN | declaration_specifiers ) )=>id1= qualified_id[bufQualifiedIdScope] LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )?
        	    {
        	        FOLLOWPUSH(FOLLOW_qualified_id_in_direct_declarator4324);
        	        id1=qualified_id(ctx, bufQualifiedIdScope);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            if (_td==TRUE)       // This statement is a typedef   
        	            			declaratorID(id1.qiReturn
        	            ,qiType);
        	            		 else
        	            			declaratorID(id1.qiReturn
        	            ,qiFun);
        	            		
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_direct_declarator4333);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            declaratorParameterList(0);
        	        }


        	        // CPP_grammar_.g:1135:3: ( parameter_list )?
        	        {
        	            int alt81=2;
        	            switch ( LA(1) )
        	            {
        	                case AMPERSAND:
        	                case ELLIPSIS:
        	                case ID:
        	                case LPAREN:
        	                case OPERATOR:
        	                case SCOPE:
        	                case STAR:
        	                case TILDE:
        	                case 88:
        	                case 89:
        	                case 90:
        	                case 91:
        	                case 92:
        	                case 93:
        	                case 94:
        	                case 95:
        	                case 96:
        	                case 97:
        	                case 98:
        	                case 99:
        	                case 100:
        	                case 101:
        	                case 102:
        	                case 103:
        	                case 104:
        	                case 105:
        	                case 106:
        	                case 107:
        	                case 108:
        	                case 109:
        	                case 110:
        	                case 111:
        	                case 112:
        	                case 115:
        	                case 116:
        	                case 120:
        	                case 121:
        	                case 122:
        	                case 128:
        	                case 131:
        	                case 132:
        	                case 133:
        	                case 135:
        	                case 137:
        	                case 140:
        	                case 141:
        	                case 142:
        	                case 143:
        	                case 146:
        	                case 150:
        	                case 153:
        	                case 154:
        	                case 156:
        	                case 158:
        	                case 165:
        	                case 167:
        	                case 168:
        	                case 169:
        	                case 171:
        	                case 172:
        	                case 173:
        	                case 174:
        	                	{
        	                		alt81=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt81)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1135:4: parameter_list
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_parameter_list_in_direct_declarator4340);
        	        	        parameter_list(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruledirect_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_direct_declarator4346);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            declaratorEndParameterList(0);
        	        }


        	        // CPP_grammar_.g:1137:3: (tq= type_qualifier )*

        	        for (;;)
        	        {
        	            int alt82=2;
        	            switch ( LA(1) )
        	            {
        	            case 122:
        	            case 173:
        	            	{
        	            		alt82=1;
        	            	}
        	                break;

        	            }

        	            switch (alt82)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1137:4: tq= type_qualifier
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_type_qualifier_in_direct_declarator4357);
        	        	        tq=type_qualifier(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruledirect_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop82;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop82: ; /* Jump out to here if this rule does not match */


        	        // CPP_grammar_.g:1138:3: ( exception_specification )?
        	        {
        	            int alt83=2;
        	            switch ( LA(1) )
        	            {
        	                case 162:
        	                	{
        	                		alt83=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt83)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1138:4: exception_specification
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_exception_specification_in_direct_declarator4364);
        	        	        exception_specification(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruledirect_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1140:3: ( qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN qualified_id[$direct_declarator::pQualifiedIdBuf] )=>id2= qualified_id[bufQualifiedIdScope] LPAREN expression_list RPAREN
        	    {
        	        FOLLOWPUSH(FOLLOW_qualified_id_in_direct_declarator4392);
        	        id2=qualified_id(ctx, bufQualifiedIdScope);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            declaratorID(id2.qiReturn
        	            ,qiVar);
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_direct_declarator4401);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_list_in_direct_declarator4405);
        	        expression_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_direct_declarator4409);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:1147:3: ( qualified_id[$direct_declarator::pQualifiedIdBuf] LSQUARE )=>id3= qualified_id[bufQualifiedIdScope] ( LSQUARE ( constant_expression )? RSQUARE )+
        	    {
        	        FOLLOWPUSH(FOLLOW_qualified_id_in_direct_declarator4431);
        	        id3=qualified_id(ctx, bufQualifiedIdScope);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            //printf("02\n");
        	            		if (_td==TRUE)       // This statement is a typedef   
        	            			declaratorID(id3.qiReturn
        	            ,qiType);	// This statement is a typedef
        	            		 else 
        	            			declaratorID(id3.qiReturn
        	            ,qiVar);
        	            		 is_address = FALSE; is_pointer = FALSE;
        	            		
        	        }


        	        // CPP_grammar_.g:1156:3: ( LSQUARE ( constant_expression )? RSQUARE )+
        	        {
        	            int cnt85=0;

        	            for (;;)
        	            {
        	                int alt85=2;
        	        	switch ( LA(1) )
        	        	{
        	        	case LSQUARE:
        	        		{
        	        			alt85=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt85)
        	        	{
        	        	    case 1:
        	        	        // CPP_grammar_.g:1157:4: LSQUARE ( constant_expression )? RSQUARE
        	        	        {
        	        	             MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_direct_declarator4445);
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruledirect_declaratorEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	        	                return ;
        	        	            }


        	        	            // CPP_grammar_.g:1157:12: ( constant_expression )?
        	        	            {
        	        	                int alt84=2;
        	        	                switch ( LA(1) )
        	        	                {
        	        	                    case AMPERSAND:
        	        	                    case CharLiteral:
        	        	                    case DECIMALINT:
        	        	                    case FLOATONE:
        	        	                    case FLOATTWO:
        	        	                    case HEXADECIMALINT:
        	        	                    case ID:
        	        	                    case LPAREN:
        	        	                    case MINUS:
        	        	                    case MINUSMINUS:
        	        	                    case NOT:
        	        	                    case OCTALINT:
        	        	                    case OPERATOR:
        	        	                    case PLUS:
        	        	                    case PLUSPLUS:
        	        	                    case SCOPE:
        	        	                    case STAR:
        	        	                    case StringLiteral:
        	        	                    case TILDE:
        	        	                    case WCharLiteral:
        	        	                    case WStringLiteral:
        	        	                    case 87:
        	        	                    case 92:
        	        	                    case 93:
        	        	                    case 94:
        	        	                    case 95:
        	        	                    case 100:
        	        	                    case 105:
        	        	                    case 106:
        	        	                    case 107:
        	        	                    case 108:
        	        	                    case 112:
        	        	                    case 116:
        	        	                    case 120:
        	        	                    case 121:
        	        	                    case 123:
        	        	                    case 126:
        	        	                    case 128:
        	        	                    case 129:
        	        	                    case 131:
        	        	                    case 134:
        	        	                    case 135:
        	        	                    case 141:
        	        	                    case 142:
        	        	                    case 145:
        	        	                    case 151:
        	        	                    case 153:
        	        	                    case 154:
        	        	                    case 155:
        	        	                    case 157:
        	        	                    case 158:
        	        	                    case 161:
        	        	                    case 163:
        	        	                    case 166:
        	        	                    case 167:
        	        	                    case 168:
        	        	                    case 169:
        	        	                    case 172:
        	        	                    case 174:
        	        	                    	{
        	        	                    		alt84=1;
        	        	                    	}
        	        	                        break;
        	        	                }

        	        	                switch (alt84)
        	        	                {
        	        	            	case 1:
        	        	            	    // CPP_grammar_.g:1157:13: constant_expression
        	        	            	    {
        	        	            	        FOLLOWPUSH(FOLLOW_constant_expression_in_direct_declarator4448);
        	        	            	        constant_expression(ctx);

        	        	            	        FOLLOWPOP();
        	        	            	        if  (HASEXCEPTION())
        	        	            	        {
        	        	            	            goto ruledirect_declaratorEx;
        	        	            	        }
        	        	            	        if (HASFAILED())
        	        	            	        {
        	        	            	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	        	            	            return ;
        	        	            	        }


        	        	            	    }
        	        	            	    break;

        	        	                }
        	        	            }

        	        	             MATCHT(RSQUARE, &FOLLOW_RSQUARE_in_direct_declarator4452);
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruledirect_declaratorEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	        	                return ;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt85 >= 1 )
        	        		{
        	        		    goto loop85;
        	        		}
        	        		if (BACKTRACKING>0)
        	        		{
        	        		    FAILEDFLAG = ANTLR3_TRUE;
        	        		    pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	        		    return ;
        	        		}

        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto ruledirect_declaratorEx;
        	        	}
        	        	cnt85++;
        	            }
        	            loop85: ;	/* Jump to here if this rule does not match */
        	        }

        	        if ( BACKTRACKING==0 )
        	        {
        	            declaratorArray();
        	        }


        	    }
        	    break;
        	case 4:
        	    // CPP_grammar_.g:1160:3: ( qualified_id[$direct_declarator::pQualifiedIdBuf] RPAREN LPAREN )=>id4= qualified_id[bufQualifiedIdScope]
        	    {
        	        FOLLOWPUSH(FOLLOW_qualified_id_in_direct_declarator4482);
        	        id4=qualified_id(ctx, bufQualifiedIdScope);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {

        	            		if (_td==TRUE)       // This statement is a typedef   
        	            			declaratorID(id4.qiReturn
        	            ,qiType);	// This statement is a typedef
        	            		 else
        	            			declaratorID(id4.qiReturn
        	            ,qiFun);
        	            		 is_address = FALSE; is_pointer = FALSE;
        	            		
        	        }


        	    }
        	    break;
        	case 5:
        	    // CPP_grammar_.g:1170:3: id5= qualified_id[bufQualifiedIdScope]
        	    {
        	        FOLLOWPUSH(FOLLOW_qualified_id_in_direct_declarator4498);
        	        id5=qualified_id(ctx, bufQualifiedIdScope);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {

        	            		if (_td==TRUE)
        	            			{
        	            			declaratorID(id5.qiReturn
        	            ,qiType);	// This statement is a typedef
        	            			}
        	            		 else
        	            			declaratorID(id5.qiReturn
        	            ,qiVar);
        	            		 is_address = FALSE; is_pointer = FALSE;
        	            		
        	        }


        	    }
        	    break;
        	case 6:
        	    // CPP_grammar_.g:1181:3: LPAREN declarator RPAREN ( declarator_suffix )?
        	    {
        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_direct_declarator4511);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_declarator_in_direct_declarator4513);
        	        declarator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_direct_declarator4515);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledirect_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	            return ;
        	        }


        	        // CPP_grammar_.g:1182:3: ( declarator_suffix )?
        	        {
        	            int alt86=2;
        	            switch ( LA(1) )
        	            {
        	                case LSQUARE:
        	                	{
        	                		alt86=1;
        	                	}
        	                    break;
        	                case LPAREN:
        	                	{
        	                		{
        	                		    int LA86_2 = LA(2);
        	                		    if ( (((!((LA(1)==LPAREN)&&(LA(2)==ID))||(qualifiedItemIsOneOf(qiType|qiCtor,1))))))
        	                		    {
        	                		        alt86=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt86)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1183:4: declarator_suffix
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_declarator_suffix_in_direct_declarator4525);
        	        	        declarator_suffix(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruledirect_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            pCPP_grammar_Parser_direct_declaratorPop(ctx);

        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledirect_declaratorEx; /* Prevent compiler warnings */
    ruledirect_declaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    pCPP_grammar_Parser_direct_declaratorPop(ctx);

    return ;
}
/* $ANTLR end direct_declarator */

/**
 * $ANTLR start declarator_suffix
 * CPP_grammar_.g:1187:1: declarator_suffix : ( ( LSQUARE ( constant_expression )? RSQUARE )+ |{...}? LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )? ) ;
 */
static void
declarator_suffix(pCPP_grammar_Parser ctx)
{
    TypeQualifier tq;
    #undef	RETURN_TYPE_tq
    #define	RETURN_TYPE_tq TypeQualifier

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1189:2: ( ( ( LSQUARE ( constant_expression )? RSQUARE )+ |{...}? LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )? ) )
        // CPP_grammar_.g:1190:2: ( ( LSQUARE ( constant_expression )? RSQUARE )+ |{...}? LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )? )
        {
            // CPP_grammar_.g:1190:2: ( ( LSQUARE ( constant_expression )? RSQUARE )+ |{...}? LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )? )
            {
                int alt93=2;
                switch ( LA(1) )
                {
                case LSQUARE:
                	{
                		alt93=1;
                	}
                    break;
                case LPAREN:
                	{
                		alt93=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 93;
                    EXCEPTION->state        = 0;


                    goto ruledeclarator_suffixEx;

                }

                switch (alt93)
                {
            	case 1:
            	    // CPP_grammar_.g:1192:3: ( LSQUARE ( constant_expression )? RSQUARE )+
            	    {
            	        // CPP_grammar_.g:1192:3: ( LSQUARE ( constant_expression )? RSQUARE )+
            	        {
            	            int cnt89=0;

            	            for (;;)
            	            {
            	                int alt89=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case LSQUARE:
            	        		{
            	        			alt89=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt89)
            	        	{
            	        	    case 1:
            	        	        // CPP_grammar_.g:1192:4: LSQUARE ( constant_expression )? RSQUARE
            	        	        {
            	        	             MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_declarator_suffix4559);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruledeclarator_suffixEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return ;
            	        	            }


            	        	            // CPP_grammar_.g:1192:12: ( constant_expression )?
            	        	            {
            	        	                int alt88=2;
            	        	                switch ( LA(1) )
            	        	                {
            	        	                    case AMPERSAND:
            	        	                    case CharLiteral:
            	        	                    case DECIMALINT:
            	        	                    case FLOATONE:
            	        	                    case FLOATTWO:
            	        	                    case HEXADECIMALINT:
            	        	                    case ID:
            	        	                    case LPAREN:
            	        	                    case MINUS:
            	        	                    case MINUSMINUS:
            	        	                    case NOT:
            	        	                    case OCTALINT:
            	        	                    case OPERATOR:
            	        	                    case PLUS:
            	        	                    case PLUSPLUS:
            	        	                    case SCOPE:
            	        	                    case STAR:
            	        	                    case StringLiteral:
            	        	                    case TILDE:
            	        	                    case WCharLiteral:
            	        	                    case WStringLiteral:
            	        	                    case 87:
            	        	                    case 92:
            	        	                    case 93:
            	        	                    case 94:
            	        	                    case 95:
            	        	                    case 100:
            	        	                    case 105:
            	        	                    case 106:
            	        	                    case 107:
            	        	                    case 108:
            	        	                    case 112:
            	        	                    case 116:
            	        	                    case 120:
            	        	                    case 121:
            	        	                    case 123:
            	        	                    case 126:
            	        	                    case 128:
            	        	                    case 129:
            	        	                    case 131:
            	        	                    case 134:
            	        	                    case 135:
            	        	                    case 141:
            	        	                    case 142:
            	        	                    case 145:
            	        	                    case 151:
            	        	                    case 153:
            	        	                    case 154:
            	        	                    case 155:
            	        	                    case 157:
            	        	                    case 158:
            	        	                    case 161:
            	        	                    case 163:
            	        	                    case 166:
            	        	                    case 167:
            	        	                    case 168:
            	        	                    case 169:
            	        	                    case 172:
            	        	                    case 174:
            	        	                    	{
            	        	                    		alt88=1;
            	        	                    	}
            	        	                        break;
            	        	                }

            	        	                switch (alt88)
            	        	                {
            	        	            	case 1:
            	        	            	    // CPP_grammar_.g:1192:13: constant_expression
            	        	            	    {
            	        	            	        FOLLOWPUSH(FOLLOW_constant_expression_in_declarator_suffix4562);
            	        	            	        constant_expression(ctx);

            	        	            	        FOLLOWPOP();
            	        	            	        if  (HASEXCEPTION())
            	        	            	        {
            	        	            	            goto ruledeclarator_suffixEx;
            	        	            	        }
            	        	            	        if (HASFAILED())
            	        	            	        {
            	        	            	            return ;
            	        	            	        }


            	        	            	    }
            	        	            	    break;

            	        	                }
            	        	            }

            	        	             MATCHT(RSQUARE, &FOLLOW_RSQUARE_in_declarator_suffix4566);
            	        	            if  (HASEXCEPTION())
            	        	            {
            	        	                goto ruledeclarator_suffixEx;
            	        	            }
            	        	            if (HASFAILED())
            	        	            {
            	        	                return ;
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt89 >= 1 )
            	        		{
            	        		    goto loop89;
            	        		}
            	        		if (BACKTRACKING>0)
            	        		{
            	        		    FAILEDFLAG = ANTLR3_TRUE;
            	        		    return ;
            	        		}

            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruledeclarator_suffixEx;
            	        	}
            	        	cnt89++;
            	            }
            	            loop89: ;	/* Jump to here if this rule does not match */
            	        }

            	        if ( BACKTRACKING==0 )
            	        {
            	            declaratorArray();
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1195:3: {...}? LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )?
            	    {
            	        if ( !(((!((LA(1)==LPAREN)&&(LA(2)==ID))||(qualifiedItemIsOneOf(qiType|qiCtor,1))))) )
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
            	                EXCEPTION->message      = (void *)"(!((LA(1)==LPAREN)&&(LA(2)==ID))||(qualifiedItemIsOneOf(qiType|qiCtor,1)))";
            	                EXCEPTION->ruleName	 = (void *)"declarator_suffix";


            	        }

            	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_declarator_suffix4584);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledeclarator_suffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            declaratorParameterList(0);
            	        }


            	        // CPP_grammar_.g:1197:3: ( parameter_list )?
            	        {
            	            int alt90=2;
            	            switch ( LA(1) )
            	            {
            	                case AMPERSAND:
            	                case ELLIPSIS:
            	                case ID:
            	                case LPAREN:
            	                case OPERATOR:
            	                case SCOPE:
            	                case STAR:
            	                case TILDE:
            	                case 88:
            	                case 89:
            	                case 90:
            	                case 91:
            	                case 92:
            	                case 93:
            	                case 94:
            	                case 95:
            	                case 96:
            	                case 97:
            	                case 98:
            	                case 99:
            	                case 100:
            	                case 101:
            	                case 102:
            	                case 103:
            	                case 104:
            	                case 105:
            	                case 106:
            	                case 107:
            	                case 108:
            	                case 109:
            	                case 110:
            	                case 111:
            	                case 112:
            	                case 115:
            	                case 116:
            	                case 120:
            	                case 121:
            	                case 122:
            	                case 128:
            	                case 131:
            	                case 132:
            	                case 133:
            	                case 135:
            	                case 137:
            	                case 140:
            	                case 141:
            	                case 142:
            	                case 143:
            	                case 146:
            	                case 150:
            	                case 153:
            	                case 154:
            	                case 156:
            	                case 158:
            	                case 165:
            	                case 167:
            	                case 168:
            	                case 169:
            	                case 171:
            	                case 172:
            	                case 173:
            	                case 174:
            	                	{
            	                		alt90=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt90)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1197:4: parameter_list
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_parameter_list_in_declarator_suffix4591);
            	        	        parameter_list(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruledeclarator_suffixEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_declarator_suffix4599);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledeclarator_suffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            declaratorEndParameterList(0);
            	        }


            	        // CPP_grammar_.g:1199:3: (tq= type_qualifier )*

            	        for (;;)
            	        {
            	            int alt91=2;
            	            switch ( LA(1) )
            	            {
            	            case 122:
            	            case 173:
            	            	{
            	            		alt91=1;
            	            	}
            	                break;

            	            }

            	            switch (alt91)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1199:4: tq= type_qualifier
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_type_qualifier_in_declarator_suffix4610);
            	        	        tq=type_qualifier(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruledeclarator_suffixEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop91;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop91: ; /* Jump out to here if this rule does not match */


            	        // CPP_grammar_.g:1200:3: ( exception_specification )?
            	        {
            	            int alt92=2;
            	            switch ( LA(1) )
            	            {
            	                case 162:
            	                	{
            	                		alt92=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt92)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1200:4: exception_specification
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_exception_specification_in_declarator_suffix4617);
            	        	        exception_specification(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruledeclarator_suffixEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruledeclarator_suffixEx; /* Prevent compiler warnings */
    ruledeclarator_suffixEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end declarator_suffix */

/**
 * $ANTLR start conversion_function_decl_or_def
 * CPP_grammar_.g:1207:1: conversion_function_decl_or_def : OPERATOR declaration_specifiers ( STAR | AMPERSAND )? ( LESSTHAN template_parameter_list GREATERTHAN )? LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )? ( compound_statement | SEMICOLON ) ;
 */
static void
conversion_function_decl_or_def(pCPP_grammar_Parser ctx)
{
    TypeQualifier tq;
    #undef	RETURN_TYPE_tq
    #define	RETURN_TYPE_tq TypeQualifier

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1208:2: ( OPERATOR declaration_specifiers ( STAR | AMPERSAND )? ( LESSTHAN template_parameter_list GREATERTHAN )? LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )? ( compound_statement | SEMICOLON ) )
        // CPP_grammar_.g:1209:3: OPERATOR declaration_specifiers ( STAR | AMPERSAND )? ( LESSTHAN template_parameter_list GREATERTHAN )? LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( exception_specification )? ( compound_statement | SEMICOLON )
        {
             MATCHT(OPERATOR, &FOLLOW_OPERATOR_in_conversion_function_decl_or_def4638);
            if  (HASEXCEPTION())
            {
                goto ruleconversion_function_decl_or_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_declaration_specifiers_in_conversion_function_decl_or_def4640);
            declaration_specifiers(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconversion_function_decl_or_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1209:35: ( STAR | AMPERSAND )?
            {
                int alt94=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    case STAR:
                    	{
                    		alt94=1;
                    	}
                        break;
                }

                switch (alt94)
                {
            	case 1:
            	    // CPP_grammar_.g:
            	    {
            	        if ( LA(1) == AMPERSAND || LA(1) == STAR )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleconversion_function_decl_or_defEx;
            	        }


            	    }
            	    break;

                }
            }

            // CPP_grammar_.g:1210:3: ( LESSTHAN template_parameter_list GREATERTHAN )?
            {
                int alt95=2;
                switch ( LA(1) )
                {
                    case LESSTHAN:
                    	{
                    		alt95=1;
                    	}
                        break;
                }

                switch (alt95)
                {
            	case 1:
            	    // CPP_grammar_.g:1210:5: LESSTHAN template_parameter_list GREATERTHAN
            	    {
            	         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_conversion_function_decl_or_def4656);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconversion_function_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_template_parameter_list_in_conversion_function_decl_or_def4658);
            	        template_parameter_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconversion_function_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_conversion_function_decl_or_def4660);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconversion_function_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(LPAREN, &FOLLOW_LPAREN_in_conversion_function_decl_or_def4669);
            if  (HASEXCEPTION())
            {
                goto ruleconversion_function_decl_or_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1211:10: ( parameter_list )?
            {
                int alt96=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    case ELLIPSIS:
                    case ID:
                    case LPAREN:
                    case OPERATOR:
                    case SCOPE:
                    case STAR:
                    case TILDE:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 115:
                    case 116:
                    case 120:
                    case 121:
                    case 122:
                    case 128:
                    case 131:
                    case 132:
                    case 133:
                    case 135:
                    case 137:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 146:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 158:
                    case 165:
                    case 167:
                    case 168:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    	{
                    		alt96=1;
                    	}
                        break;
                }

                switch (alt96)
                {
            	case 1:
            	    // CPP_grammar_.g:1211:11: parameter_list
            	    {
            	        FOLLOWPUSH(FOLLOW_parameter_list_in_conversion_function_decl_or_def4672);
            	        parameter_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconversion_function_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(RPAREN, &FOLLOW_RPAREN_in_conversion_function_decl_or_def4676);
            if  (HASEXCEPTION())
            {
                goto ruleconversion_function_decl_or_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1212:3: (tq= type_qualifier )*

            for (;;)
            {
                int alt97=2;
                switch ( LA(1) )
                {
                case 122:
                case 173:
                	{
                		alt97=1;
                	}
                    break;

                }

                switch (alt97)
                {
            	case 1:
            	    // CPP_grammar_.g:1212:4: tq= type_qualifier
            	    {
            	        FOLLOWPUSH(FOLLOW_type_qualifier_in_conversion_function_decl_or_def4685);
            	        tq=type_qualifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconversion_function_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop97;	/* break out of the loop */
            	    break;
                }
            }
            loop97: ; /* Jump out to here if this rule does not match */


            // CPP_grammar_.g:1213:3: ( exception_specification )?
            {
                int alt98=2;
                switch ( LA(1) )
                {
                    case 162:
                    	{
                    		alt98=1;
                    	}
                        break;
                }

                switch (alt98)
                {
            	case 1:
            	    // CPP_grammar_.g:1213:4: exception_specification
            	    {
            	        FOLLOWPUSH(FOLLOW_exception_specification_in_conversion_function_decl_or_def4693);
            	        exception_specification(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconversion_function_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // CPP_grammar_.g:1214:3: ( compound_statement | SEMICOLON )
            {
                int alt99=2;
                switch ( LA(1) )
                {
                case LCURLY:
                	{
                		alt99=1;
                	}
                    break;
                case SEMICOLON:
                	{
                		alt99=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 99;
                    EXCEPTION->state        = 0;


                    goto ruleconversion_function_decl_or_defEx;

                }

                switch (alt99)
                {
            	case 1:
            	    // CPP_grammar_.g:1214:5: compound_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_compound_statement_in_conversion_function_decl_or_def4701);
            	        compound_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconversion_function_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1215:5: SEMICOLON
            	    {
            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_conversion_function_decl_or_def4707);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconversion_function_decl_or_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleconversion_function_decl_or_defEx; /* Prevent compiler warnings */
    ruleconversion_function_decl_or_defEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end conversion_function_decl_or_def */

/**
 * $ANTLR start function_declarator
 * CPP_grammar_.g:1220:1: function_declarator[int definition] : ( ( ptr_operator )=> ptr_operator function_declarator[definition] | function_direct_declarator[definition] );
 */
static void
function_declarator(pCPP_grammar_Parser ctx, int definition)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1221:2: ( ( ptr_operator )=> ptr_operator function_declarator[definition] | function_direct_declarator[definition] )

            ANTLR3_UINT32 alt100;

            alt100=2;

            {
                int LA100_0 = LA(1);
                if ( (synpred60_CPP_grammar_(ctx)) && (LA100_0 == AMPERSAND))
                {
                    alt100=1;
                }
                else if ( (synpred60_CPP_grammar_(ctx)) && (LA100_0 == 88 || LA100_0 == 101))
                {
                    alt100=1;
                }
                else if ( (synpred60_CPP_grammar_(ctx)) && (LA100_0 == 97 || LA100_0 == 109))
                {
                    alt100=1;
                }
                else if ( (synpred60_CPP_grammar_(ctx)) && (LA100_0 == 90 || LA100_0 == 103))
                {
                    alt100=1;
                }
                else if ( (synpred60_CPP_grammar_(ctx)) && (LA100_0 == 96))
                {
                    alt100=1;
                }
                else if ( (synpred60_CPP_grammar_(ctx)) && (LA100_0 == 98 || LA100_0 == 110 || LA100_0 == 146))
                {
                    alt100=1;
                }
                else if ( (synpred60_CPP_grammar_(ctx)) && (LA100_0 == 99 || LA100_0 == 111))
                {
                    alt100=1;
                }
                else if ( (LA100_0 == SCOPE))
                {
                    {
                        int LA100_8 = LA(2);
                        if ( (synpred60_CPP_grammar_(ctx)))
                        {
                            alt100=1;
                        }
                        else if ( (ANTLR3_TRUE))
                        {
                            alt100=2;
                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }


                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 100;
                            EXCEPTION->state        = 8;


                            goto rulefunction_declaratorEx;

                        }
                    }
                }
                else if ( (LA100_0 == ID))
                {
                    {
                        int LA100_9 = LA(2);
                        if ( (synpred60_CPP_grammar_(ctx)))
                        {
                            alt100=1;
                        }
                        else if ( (ANTLR3_TRUE))
                        {
                            alt100=2;
                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }


                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 100;
                            EXCEPTION->state        = 9;


                            goto rulefunction_declaratorEx;

                        }
                    }
                }
                else if ( (synpred60_CPP_grammar_(ctx)) && (LA100_0 == STAR))
                {
                    alt100=1;
                }
                else if ( (LA100_0 == LPAREN || LA100_0 == OPERATOR || LA100_0 == TILDE))
                {
                    alt100=2;
                }
                else
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }


                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 100;
                    EXCEPTION->state        = 0;


                    goto rulefunction_declaratorEx;

                }
            }
            switch (alt100)
            {
        	case 1:
        	    // CPP_grammar_.g:1222:3: ( ptr_operator )=> ptr_operator function_declarator[definition]
        	    {
        	        FOLLOWPUSH(FOLLOW_ptr_operator_in_function_declarator4736);
        	        ptr_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunction_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_function_declarator_in_function_declarator4738);
        	        function_declarator(ctx, definition);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunction_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1224:3: function_direct_declarator[definition]
        	    {
        	        FOLLOWPUSH(FOLLOW_function_direct_declarator_in_function_declarator4747);
        	        function_direct_declarator(ctx, definition);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunction_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulefunction_declaratorEx; /* Prevent compiler warnings */
    rulefunction_declaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end function_declarator */

/**
 * $ANTLR start function_direct_declarator
 * CPP_grammar_.g:1228:1: function_direct_declarator[int definition] : ( LPAREN declarator RPAREN |q1= qualified_id[bufQualifiedIdScope] ) LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( ASSIGNEQUAL OCTALINT )? ( exception_specification )? ;
 */
static void
function_direct_declarator(pCPP_grammar_Parser ctx, int definition)
{

    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    CPP_grammar_Parser_qualified_id_return q1;
    #undef	RETURN_TYPE_q1
    #define	RETURN_TYPE_q1 CPP_grammar_Parser_qualified_id_return

    TypeQualifier tq;
    #undef	RETURN_TYPE_tq
    #define	RETURN_TYPE_tq TypeQualifier

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1232:2: ( ( LPAREN declarator RPAREN |q1= qualified_id[bufQualifiedIdScope] ) LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( ASSIGNEQUAL OCTALINT )? ( exception_specification )? )
        // CPP_grammar_.g:1233:3: ( LPAREN declarator RPAREN |q1= qualified_id[bufQualifiedIdScope] ) LPAREN ( parameter_list )? RPAREN (tq= type_qualifier )* ( ASSIGNEQUAL OCTALINT )? ( exception_specification )?
        {
            // CPP_grammar_.g:1233:3: ( LPAREN declarator RPAREN |q1= qualified_id[bufQualifiedIdScope] )
            {
                int alt101=2;
                switch ( LA(1) )
                {
                case LPAREN:
                	{
                		alt101=1;
                	}
                    break;
                case ID:
                case OPERATOR:
                case SCOPE:
                case TILDE:
                	{
                		alt101=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 101;
                    EXCEPTION->state        = 0;


                    goto rulefunction_direct_declaratorEx;

                }

                switch (alt101)
                {
            	case 1:
            	    // CPP_grammar_.g:1234:4: LPAREN declarator RPAREN
            	    {
            	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_function_direct_declarator4777);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_direct_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_declarator_in_function_direct_declarator4783);
            	        declarator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_direct_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_function_direct_declarator4788);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_direct_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1238:4: q1= qualified_id[bufQualifiedIdScope]
            	    {
            	        FOLLOWPUSH(FOLLOW_qualified_id_in_function_direct_declarator4801);
            	        q1=qualified_id(ctx, bufQualifiedIdScope);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_direct_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {

            	            			declaratorID(q1.qiReturn
            	            ,qiFun);
            	            			
            	        }


            	    }
            	    break;

                }
            }

            if ( BACKTRACKING==0 )
            {
                		
                		#ifdef MYCODE
                		if (definition)
                			myCode_function_direct_declarator(q);
                		#endif MYCODE
                		
            }


             MATCHT(LPAREN, &FOLLOW_LPAREN_in_function_direct_declarator4821);
            if  (HASEXCEPTION())
            {
                goto rulefunction_direct_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {

                		functionParameterList();
                		if (K_and_R == TRUE)
                			in_parameter_list = FALSE;
                		else
                			in_parameter_list = TRUE;
                		
            }


            // CPP_grammar_.g:1259:3: ( parameter_list )?
            {
                int alt102=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    case ELLIPSIS:
                    case ID:
                    case LPAREN:
                    case OPERATOR:
                    case SCOPE:
                    case STAR:
                    case TILDE:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 115:
                    case 116:
                    case 120:
                    case 121:
                    case 122:
                    case 128:
                    case 131:
                    case 132:
                    case 133:
                    case 135:
                    case 137:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 146:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 158:
                    case 165:
                    case 167:
                    case 168:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    	{
                    		alt102=1;
                    	}
                        break;
                }

                switch (alt102)
                {
            	case 1:
            	    // CPP_grammar_.g:1259:4: parameter_list
            	    {
            	        FOLLOWPUSH(FOLLOW_parameter_list_in_function_direct_declarator4831);
            	        parameter_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_direct_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            if ( BACKTRACKING==0 )
            {

                		if (K_and_R == TRUE)
                	  		in_parameter_list = TRUE;
                		else
                			in_parameter_list = FALSE;
                		
            }


             MATCHT(RPAREN, &FOLLOW_RPAREN_in_function_direct_declarator4842);
            if  (HASEXCEPTION())
            {
                goto rulefunction_direct_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1267:3: (tq= type_qualifier )*

            for (;;)
            {
                int alt103=2;
                switch ( LA(1) )
                {
                case 122:
                	{
                		alt103=1;
                	}
                    break;
                case 173:
                	{
                		alt103=1;
                	}
                    break;

                }

                switch (alt103)
                {
            	case 1:
            	    // CPP_grammar_.g:1268:4: tq= type_qualifier
            	    {
            	        FOLLOWPUSH(FOLLOW_type_qualifier_in_function_direct_declarator4855);
            	        tq=type_qualifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_direct_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop103;	/* break out of the loop */
            	    break;
                }
            }
            loop103: ; /* Jump out to here if this rule does not match */


            // CPP_grammar_.g:1269:3: ( ASSIGNEQUAL OCTALINT )?
            {
                int alt104=2;
                switch ( LA(1) )
                {
                    case ASSIGNEQUAL:
                    	{
                    		alt104=1;
                    	}
                        break;
                }

                switch (alt104)
                {
            	case 1:
            	    // CPP_grammar_.g:1269:4: ASSIGNEQUAL OCTALINT
            	    {
            	         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_function_direct_declarator4862);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_direct_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(OCTALINT, &FOLLOW_OCTALINT_in_function_direct_declarator4864);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_direct_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            if ( BACKTRACKING==0 )
            {
                functionEndParameterList(definition);
            }


            // CPP_grammar_.g:1271:3: ( exception_specification )?
            {
                int alt105=2;
                switch ( LA(1) )
                {
                    case 162:
                    	{
                    		alt105=1;
                    	}
                        break;
                }

                switch (alt105)
                {
            	case 1:
            	    // CPP_grammar_.g:1271:4: exception_specification
            	    {
            	        FOLLOWPUSH(FOLLOW_exception_specification_in_function_direct_declarator4876);
            	        exception_specification(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_direct_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunction_direct_declaratorEx; /* Prevent compiler warnings */
    rulefunction_direct_declaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end function_direct_declarator */

/**
 * $ANTLR start ctor_definition
 * CPP_grammar_.g:1284:1: ctor_definition : ctor_head ctor_body ;
 */
static void
ctor_definition(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1285:2: ( ctor_head ctor_body )
        // CPP_grammar_.g:1286:3: ctor_head ctor_body
        {
            FOLLOWPUSH(FOLLOW_ctor_head_in_ctor_definition4902);
            ctor_head(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulector_definitionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_ctor_body_in_ctor_definition4906);
            ctor_body(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulector_definitionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                endConstructorDefinition();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulector_definitionEx; /* Prevent compiler warnings */
    rulector_definitionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ctor_definition */

/**
 * $ANTLR start ctor_head
 * CPP_grammar_.g:1292:1: ctor_head : ctor_decl_spec ctor_declarator[1] ;
 */
static void
ctor_head(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1293:2: ( ctor_decl_spec ctor_declarator[1] )
        // CPP_grammar_.g:1294:3: ctor_decl_spec ctor_declarator[1]
        {
            FOLLOWPUSH(FOLLOW_ctor_decl_spec_in_ctor_head4925);
            ctor_decl_spec(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulector_headEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_ctor_declarator_in_ctor_head4929);
            ctor_declarator(ctx, 1);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulector_headEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulector_headEx; /* Prevent compiler warnings */
    rulector_headEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ctor_head */

/**
 * $ANTLR start ctor_decl_spec
 * CPP_grammar_.g:1299:1: ctor_decl_spec : ( ( 'inline' | '_inline' | '__inline' ) | 'explicit' )* ;
 */
static void
ctor_decl_spec(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1300:2: ( ( ( 'inline' | '_inline' | '__inline' ) | 'explicit' )* )
        // CPP_grammar_.g:1301:3: ( ( 'inline' | '_inline' | '__inline' ) | 'explicit' )*
        {
            // CPP_grammar_.g:1301:3: ( ( 'inline' | '_inline' | '__inline' ) | 'explicit' )*

            for (;;)
            {
                int alt106=2;
                switch ( LA(1) )
                {
                case 91:
                case 104:
                case 132:
                case 140:
                	{
                		alt106=1;
                	}
                    break;

                }

                switch (alt106)
                {
            	case 1:
            	    // CPP_grammar_.g:
            	    {
            	        if ( LA(1) == 91 || LA(1) == 104 || LA(1) == 132 || LA(1) == 140 )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto rulector_decl_specEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulector_decl_specEx; /* Prevent compiler warnings */
    rulector_decl_specEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ctor_decl_spec */

/**
 * $ANTLR start ctor_declarator
 * CPP_grammar_.g:1305:1: ctor_declarator[int definition] : q1= qualified_ctor_id[bufQualifiedCtorIdScope] LPAREN ( parameter_list )? RPAREN ( exception_specification )? ;
 */
static void
ctor_declarator(pCPP_grammar_Parser ctx, int definition)
{

    		char bufQualifiedCtorIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    char * q1;
    #undef	RETURN_TYPE_q1
    #define	RETURN_TYPE_q1 char *

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1309:2: (q1= qualified_ctor_id[bufQualifiedCtorIdScope] LPAREN ( parameter_list )? RPAREN ( exception_specification )? )
        // CPP_grammar_.g:1310:3: q1= qualified_ctor_id[bufQualifiedCtorIdScope] LPAREN ( parameter_list )? RPAREN ( exception_specification )?
        {
            FOLLOWPUSH(FOLLOW_qualified_ctor_id_in_ctor_declarator4981);
            q1=qualified_ctor_id(ctx, bufQualifiedCtorIdScope);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulector_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                declaratorParameterList(definition);
            }


             MATCHT(LPAREN, &FOLLOW_LPAREN_in_ctor_declarator4990);
            if  (HASEXCEPTION())
            {
                goto rulector_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1312:10: ( parameter_list )?
            {
                int alt107=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    case ELLIPSIS:
                    case ID:
                    case LPAREN:
                    case OPERATOR:
                    case SCOPE:
                    case STAR:
                    case TILDE:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 115:
                    case 116:
                    case 120:
                    case 121:
                    case 122:
                    case 128:
                    case 131:
                    case 132:
                    case 133:
                    case 135:
                    case 137:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 146:
                    case 150:
                    case 153:
                    case 154:
                    case 156:
                    case 158:
                    case 165:
                    case 167:
                    case 168:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    	{
                    		alt107=1;
                    	}
                        break;
                }

                switch (alt107)
                {
            	case 1:
            	    // CPP_grammar_.g:1312:11: parameter_list
            	    {
            	        FOLLOWPUSH(FOLLOW_parameter_list_in_ctor_declarator4993);
            	        parameter_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulector_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(RPAREN, &FOLLOW_RPAREN_in_ctor_declarator4997);
            if  (HASEXCEPTION())
            {
                goto rulector_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                declaratorEndParameterList(definition);
            }


            // CPP_grammar_.g:1314:3: ( exception_specification )?
            {
                int alt108=2;
                switch ( LA(1) )
                {
                    case 162:
                    	{
                    		alt108=1;
                    	}
                        break;
                }

                switch (alt108)
                {
            	case 1:
            	    // CPP_grammar_.g:1314:4: exception_specification
            	    {
            	        FOLLOWPUSH(FOLLOW_exception_specification_in_ctor_declarator5006);
            	        exception_specification(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulector_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulector_declaratorEx; /* Prevent compiler warnings */
    rulector_declaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ctor_declarator */

/**
 * $ANTLR start qualified_ctor_id
 * CPP_grammar_.g:1320:1: qualified_ctor_id[char *pQualifiedCtorIdBuf] returns [char *qcReturn] : so1= scope_override[bufScopeOverrideScope] id= ID ;
 */
static char *
qualified_ctor_id(pCPP_grammar_Parser ctx, char *pQualifiedCtorIdBuf)
{
    char * qcReturn;



    		char *so = NULL;
    		char bufScopeOverrideScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    pANTLR3_COMMON_TOKEN    id;
    char * so1;
    #undef	RETURN_TYPE_so1
    #define	RETURN_TYPE_so1 char *

    /* Initialize rule variables
     */


    		//if (pQualifiedCtorIdBuf) *pQualifiedCtorIdBuf = '\0';
    		qcReturn= pQualifiedCtorIdBuf;
     
    	
    id       = NULL;

    {
        // CPP_grammar_.g:1329:2: (so1= scope_override[bufScopeOverrideScope] id= ID )
        // CPP_grammar_.g:1330:3: so1= scope_override[bufScopeOverrideScope] id= ID
        {
            FOLLOWPUSH(FOLLOW_scope_override_in_qualified_ctor_id5047);
            so1=scope_override(ctx, bufScopeOverrideScope);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulequalified_ctor_idEx;
            }
            if (HASFAILED())
            {
                return qcReturn;
            }


            if ( BACKTRACKING==0 )
            {
                strcpy(pQualifiedCtorIdBuf, reinterpret_cast<const char*>(so1
                ));
            }


            id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_qualified_ctor_id5058);
            if  (HASEXCEPTION())
            {
                goto rulequalified_ctor_idEx;
            }
            if (HASFAILED())
            {
                return qcReturn;
            }


            if ( BACKTRACKING==0 )
            {
                strcat(pQualifiedCtorIdBuf, reinterpret_cast<const char*>((id->getText(id))->chars));
                		
                qcReturn= pQualifiedCtorIdBuf;

                		//printf("CPP_parser.g qualified_ctor_id q %s\n",qcReturn
                //);
                		
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulequalified_ctor_idEx; /* Prevent compiler warnings */
    rulequalified_ctor_idEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return qcReturn;
}
/* $ANTLR end qualified_ctor_id */

/**
 * $ANTLR start ctor_body
 * CPP_grammar_.g:1340:1: ctor_body : ( ctor_initializer )? compound_statement ;
 */
static void
ctor_body(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1341:2: ( ( ctor_initializer )? compound_statement )
        // CPP_grammar_.g:1342:3: ( ctor_initializer )? compound_statement
        {
            // CPP_grammar_.g:1342:3: ( ctor_initializer )?
            {
                int alt109=2;
                switch ( LA(1) )
                {
                    case COLON:
                    	{
                    		alt109=1;
                    	}
                        break;
                }

                switch (alt109)
                {
            	case 1:
            	    // CPP_grammar_.g:1342:4: ctor_initializer
            	    {
            	        FOLLOWPUSH(FOLLOW_ctor_initializer_in_ctor_body5079);
            	        ctor_initializer(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulector_bodyEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_compound_statement_in_ctor_body5085);
            compound_statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulector_bodyEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulector_bodyEx; /* Prevent compiler warnings */
    rulector_bodyEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ctor_body */

/**
 * $ANTLR start ctor_initializer
 * CPP_grammar_.g:1347:1: ctor_initializer : COLON superclass_init ( COMMA superclass_init )* ;
 */
static void
ctor_initializer(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1348:2: ( COLON superclass_init ( COMMA superclass_init )* )
        // CPP_grammar_.g:1349:3: COLON superclass_init ( COMMA superclass_init )*
        {
             MATCHT(COLON, &FOLLOW_COLON_in_ctor_initializer5099);
            if  (HASEXCEPTION())
            {
                goto rulector_initializerEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_superclass_init_in_ctor_initializer5101);
            superclass_init(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulector_initializerEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1349:25: ( COMMA superclass_init )*

            for (;;)
            {
                int alt110=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt110=1;
                	}
                    break;

                }

                switch (alt110)
                {
            	case 1:
            	    // CPP_grammar_.g:1349:26: COMMA superclass_init
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_ctor_initializer5104);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulector_initializerEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_superclass_init_in_ctor_initializer5106);
            	        superclass_init(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulector_initializerEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop110;	/* break out of the loop */
            	    break;
                }
            }
            loop110: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulector_initializerEx; /* Prevent compiler warnings */
    rulector_initializerEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ctor_initializer */

/**
 * $ANTLR start superclass_init
 * CPP_grammar_.g:1353:1: superclass_init : q1= qualified_id[bufQualifiedIdScope] LPAREN ( expression_list )? RPAREN ;
 */
static void
superclass_init(pCPP_grammar_Parser ctx)
{

    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    CPP_grammar_Parser_qualified_id_return q1;
    #undef	RETURN_TYPE_q1
    #define	RETURN_TYPE_q1 CPP_grammar_Parser_qualified_id_return

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1357:2: (q1= qualified_id[bufQualifiedIdScope] LPAREN ( expression_list )? RPAREN )
        // CPP_grammar_.g:1358:3: q1= qualified_id[bufQualifiedIdScope] LPAREN ( expression_list )? RPAREN
        {
            FOLLOWPUSH(FOLLOW_qualified_id_in_superclass_init5134);
            q1=qualified_id(ctx, bufQualifiedIdScope);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesuperclass_initEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(LPAREN, &FOLLOW_LPAREN_in_superclass_init5137);
            if  (HASEXCEPTION())
            {
                goto rulesuperclass_initEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1358:49: ( expression_list )?
            {
                int alt111=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    case CharLiteral:
                    case DECIMALINT:
                    case FLOATONE:
                    case FLOATTWO:
                    case HEXADECIMALINT:
                    case ID:
                    case LPAREN:
                    case MINUS:
                    case MINUSMINUS:
                    case NOT:
                    case OCTALINT:
                    case OPERATOR:
                    case PLUS:
                    case PLUSPLUS:
                    case SCOPE:
                    case STAR:
                    case StringLiteral:
                    case TILDE:
                    case WCharLiteral:
                    case WStringLiteral:
                    case 87:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 100:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 112:
                    case 116:
                    case 120:
                    case 121:
                    case 123:
                    case 126:
                    case 128:
                    case 129:
                    case 131:
                    case 134:
                    case 135:
                    case 141:
                    case 142:
                    case 145:
                    case 151:
                    case 153:
                    case 154:
                    case 155:
                    case 157:
                    case 158:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 172:
                    case 174:
                    	{
                    		alt111=1;
                    	}
                        break;
                }

                switch (alt111)
                {
            	case 1:
            	    // CPP_grammar_.g:1358:50: expression_list
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_list_in_superclass_init5140);
            	        expression_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesuperclass_initEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(RPAREN, &FOLLOW_RPAREN_in_superclass_init5144);
            if  (HASEXCEPTION())
            {
                goto rulesuperclass_initEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesuperclass_initEx; /* Prevent compiler warnings */
    rulesuperclass_initEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end superclass_init */

/**
 * $ANTLR start dtor_head
 * CPP_grammar_.g:1362:1: dtor_head[int definition] : dtor_decl_spec dtor_declarator[definition] ;
 */
static void
dtor_head(pCPP_grammar_Parser ctx, int definition)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1363:2: ( dtor_decl_spec dtor_declarator[definition] )
        // CPP_grammar_.g:1364:3: dtor_decl_spec dtor_declarator[definition]
        {
            FOLLOWPUSH(FOLLOW_dtor_decl_spec_in_dtor_head5159);
            dtor_decl_spec(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledtor_headEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_dtor_declarator_in_dtor_head5163);
            dtor_declarator(ctx, definition);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledtor_headEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledtor_headEx; /* Prevent compiler warnings */
    ruledtor_headEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end dtor_head */

/**
 * $ANTLR start dtor_decl_spec
 * CPP_grammar_.g:1369:1: dtor_decl_spec : ( ( 'inline' | '_inline' | '__inline' | 'virtual' )* ) ;
 */
static void
dtor_decl_spec(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1370:2: ( ( ( 'inline' | '_inline' | '__inline' | 'virtual' )* ) )
        // CPP_grammar_.g:1371:3: ( ( 'inline' | '_inline' | '__inline' | 'virtual' )* )
        {
            // CPP_grammar_.g:1371:3: ( ( 'inline' | '_inline' | '__inline' | 'virtual' )* )
            // CPP_grammar_.g:1371:4: ( 'inline' | '_inline' | '__inline' | 'virtual' )*
            {
                // CPP_grammar_.g:1371:4: ( 'inline' | '_inline' | '__inline' | 'virtual' )*

                for (;;)
                {
                    int alt112=2;
                    switch ( LA(1) )
                    {
                    case 91:
                    case 104:
                    case 140:
                    case 171:
                    	{
                    		alt112=1;
                    	}
                        break;

                    }

                    switch (alt112)
                    {
                	case 1:
                	    // CPP_grammar_.g:
                	    {
                	        if ( LA(1) == 91 || LA(1) == 104 || LA(1) == 140 || LA(1) == 171 )
                	        {
                	            CONSUME();
                	            PERRORRECOVERY=ANTLR3_FALSE;
                	            FAILEDFLAG=ANTLR3_FALSE;

                	        }
                	        else
                	        {
                	            if (BACKTRACKING>0)
                	            {
                	                FAILEDFLAG = ANTLR3_TRUE;
                	                return ;
                	            }

                	            CONSTRUCTEX();
                	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                	            EXCEPTION->expectingSet = NULL;

                	            goto ruledtor_decl_specEx;
                	        }


                	    }
                	    break;

                	default:
                	    goto loop112;	/* break out of the loop */
                	    break;
                    }
                }
                loop112: ; /* Jump out to here if this rule does not match */


            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledtor_decl_specEx; /* Prevent compiler warnings */
    ruledtor_decl_specEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end dtor_decl_spec */

/**
 * $ANTLR start dtor_declarator
 * CPP_grammar_.g:1375:1: dtor_declarator[int definition] : s1= scope_override[bufScopeOverrideScope] TILDE ID LPAREN ( 'void' )? RPAREN ( exception_specification )? ;
 */
static void
dtor_declarator(pCPP_grammar_Parser ctx, int definition)
{

    		char bufScopeOverrideScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    char * s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 char *

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1379:2: (s1= scope_override[bufScopeOverrideScope] TILDE ID LPAREN ( 'void' )? RPAREN ( exception_specification )? )
        // CPP_grammar_.g:1380:3: s1= scope_override[bufScopeOverrideScope] TILDE ID LPAREN ( 'void' )? RPAREN ( exception_specification )?
        {
            FOLLOWPUSH(FOLLOW_scope_override_in_dtor_declarator5216);
            s1=scope_override(ctx, bufScopeOverrideScope);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledtor_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(TILDE, &FOLLOW_TILDE_in_dtor_declarator5221);
            if  (HASEXCEPTION())
            {
                goto ruledtor_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(ID, &FOLLOW_ID_in_dtor_declarator5223);
            if  (HASEXCEPTION())
            {
                goto ruledtor_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                declaratorParameterList(definition);
            }


             MATCHT(LPAREN, &FOLLOW_LPAREN_in_dtor_declarator5231);
            if  (HASEXCEPTION())
            {
                goto ruledtor_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1383:10: ( 'void' )?
            {
                int alt113=2;
                switch ( LA(1) )
                {
                    case 172:
                    	{
                    		alt113=1;
                    	}
                        break;
                }

                switch (alt113)
                {
            	case 1:
            	    // CPP_grammar_.g:1383:11: 'void'
            	    {
            	         MATCHT(172, &FOLLOW_172_in_dtor_declarator5234);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledtor_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(RPAREN, &FOLLOW_RPAREN_in_dtor_declarator5238);
            if  (HASEXCEPTION())
            {
                goto ruledtor_declaratorEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                declaratorEndParameterList(definition);
            }


            // CPP_grammar_.g:1385:3: ( exception_specification )?
            {
                int alt114=2;
                switch ( LA(1) )
                {
                    case 162:
                    	{
                    		alt114=1;
                    	}
                        break;
                }

                switch (alt114)
                {
            	case 1:
            	    // CPP_grammar_.g:1385:4: exception_specification
            	    {
            	        FOLLOWPUSH(FOLLOW_exception_specification_in_dtor_declarator5247);
            	        exception_specification(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledtor_declaratorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruledtor_declaratorEx; /* Prevent compiler warnings */
    ruledtor_declaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end dtor_declarator */

/**
 * $ANTLR start dtor_body
 * CPP_grammar_.g:1389:1: dtor_body : compound_statement ;
 */
static void
dtor_body(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1390:2: ( compound_statement )
        // CPP_grammar_.g:1391:3: compound_statement
        {
            FOLLOWPUSH(FOLLOW_compound_statement_in_dtor_body5263);
            compound_statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledtor_bodyEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                endDestructorDefinition();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledtor_bodyEx; /* Prevent compiler warnings */
    ruledtor_bodyEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end dtor_body */

/**
 * $ANTLR start parameter_list
 * CPP_grammar_.g:1396:1: parameter_list : parameter_declaration_list ( ELLIPSIS )? ;
 */
static void
parameter_list(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1397:2: ( parameter_declaration_list ( ELLIPSIS )? )
        // CPP_grammar_.g:1398:3: parameter_declaration_list ( ELLIPSIS )?
        {
            FOLLOWPUSH(FOLLOW_parameter_declaration_list_in_parameter_list5282);
            parameter_declaration_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparameter_listEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1398:30: ( ELLIPSIS )?
            {
                int alt115=2;
                switch ( LA(1) )
                {
                    case ELLIPSIS:
                    	{
                    		alt115=1;
                    	}
                        break;
                }

                switch (alt115)
                {
            	case 1:
            	    // CPP_grammar_.g:1398:31: ELLIPSIS
            	    {
            	         MATCHT(ELLIPSIS, &FOLLOW_ELLIPSIS_in_parameter_list5285);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparameter_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleparameter_listEx; /* Prevent compiler warnings */
    ruleparameter_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end parameter_list */

/**
 * $ANTLR start parameter_declaration_list
 * CPP_grammar_.g:1402:1: parameter_declaration_list : ( parameter_declaration ( COMMA parameter_declaration )* ) ;
 */
static void
parameter_declaration_list(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1403:2: ( ( parameter_declaration ( COMMA parameter_declaration )* ) )
        // CPP_grammar_.g:1404:3: ( parameter_declaration ( COMMA parameter_declaration )* )
        {
            // CPP_grammar_.g:1404:3: ( parameter_declaration ( COMMA parameter_declaration )* )
            // CPP_grammar_.g:1404:4: parameter_declaration ( COMMA parameter_declaration )*
            {
                FOLLOWPUSH(FOLLOW_parameter_declaration_in_parameter_declaration_list5303);
                parameter_declaration(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleparameter_declaration_listEx;
                }
                if (HASFAILED())
                {
                    return ;
                }


                // CPP_grammar_.g:1404:26: ( COMMA parameter_declaration )*

                for (;;)
                {
                    int alt116=2;
                    switch ( LA(1) )
                    {
                    case COMMA:
                    	{
                    		alt116=1;
                    	}
                        break;

                    }

                    switch (alt116)
                    {
                	case 1:
                	    // CPP_grammar_.g:1404:27: COMMA parameter_declaration
                	    {
                	         MATCHT(COMMA, &FOLLOW_COMMA_in_parameter_declaration_list5306);
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleparameter_declaration_listEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	        FOLLOWPUSH(FOLLOW_parameter_declaration_in_parameter_declaration_list5308);
                	        parameter_declaration(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleparameter_declaration_listEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	    }
                	    break;

                	default:
                	    goto loop116;	/* break out of the loop */
                	    break;
                    }
                }
                loop116: ; /* Jump out to here if this rule does not match */


            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleparameter_declaration_listEx; /* Prevent compiler warnings */
    ruleparameter_declaration_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end parameter_declaration_list */

/**
 * $ANTLR start parameter_declaration
 * CPP_grammar_.g:1408:1: parameter_declaration : ({...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator ) | ( declarator )=> declarator | ELLIPSIS ) ( ASSIGNEQUAL remainder_expression )? ;
 */
static void
parameter_declaration(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1409:2: ( ({...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator ) | ( declarator )=> declarator | ELLIPSIS ) ( ASSIGNEQUAL remainder_expression )? )
        // CPP_grammar_.g:1410:3: ({...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator ) | ( declarator )=> declarator | ELLIPSIS ) ( ASSIGNEQUAL remainder_expression )?
        {
            if ( BACKTRACKING==0 )
            {
                beginParameterDeclaration();
            }


            // CPP_grammar_.g:1411:3: ({...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator ) | ( declarator )=> declarator | ELLIPSIS )
            {
                int alt118=3;
                {
                    int LA118_0 = LA(1);
                    if ( (LA118_0 == 89 || ((LA118_0 >= 91) && (LA118_0 <= 95)) || LA118_0 == 100 || LA118_0 == 102 || ((LA118_0 >= 104) && (LA118_0 <= 108)) || LA118_0 == 112 || ((LA118_0 >= 115) && (LA118_0 <= 116)) || ((LA118_0 >= 120) && (LA118_0 <= 122)) || LA118_0 == 128 || ((LA118_0 >= 131) && (LA118_0 <= 133)) || LA118_0 == 135 || LA118_0 == 137 || ((LA118_0 >= 140) && (LA118_0 <= 143)) || LA118_0 == 150 || ((LA118_0 >= 153) && (LA118_0 <= 154)) || LA118_0 == 156 || LA118_0 == 158 || LA118_0 == 165 || ((LA118_0 >= 167) && (LA118_0 <= 169)) || ((LA118_0 >= 171) && (LA118_0 <= 174))))
                    {
                        alt118=1;
                    }
                    else if ( (LA118_0 == SCOPE))
                    {
                        {
                            int LA118_2 = LA(2);
                            if ( (LA118_2 == ID))
                            {
                                {
                                    int LA118_3 = LA(3);
                                    if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && ((!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==OPERATOR)) &&
                                    			 (!(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )))
                                    {
                                        alt118=1;
                                    }
                                    else if ( (synpred62_CPP_grammar_(ctx)))
                                    {
                                        alt118=2;
                                    }
                                    else
                                    {
                                        if (BACKTRACKING>0)
                                        {
                                            FAILEDFLAG = ANTLR3_TRUE;
                                            return ;
                                        }


                                        CONSTRUCTEX();
                                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                        EXCEPTION->message      = (void *)"";
                                        EXCEPTION->decisionNum  = 118;
                                        EXCEPTION->state        = 3;


                                        goto ruleparameter_declarationEx;

                                    }
                                }
                            }
                            else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_2 == STAR))
                            {
                                alt118=2;
                            }
                            else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_2 == OPERATOR))
                            {
                                alt118=2;
                            }
                            else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_2 == TILDE))
                            {
                                alt118=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 118;
                                EXCEPTION->state        = 2;


                                goto ruleparameter_declarationEx;

                            }
                        }
                    }
                    else if ( (LA118_0 == ID))
                    {
                        {
                            int LA118_3 = LA(2);
                            if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && ((!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==OPERATOR)) &&
                            			 (!(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )))
                            {
                                alt118=1;
                            }
                            else if ( (synpred62_CPP_grammar_(ctx)))
                            {
                                alt118=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 118;
                                EXCEPTION->state        = 3;


                                goto ruleparameter_declarationEx;

                            }
                        }
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == AMPERSAND))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == 88 || LA118_0 == 101))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == 97 || LA118_0 == 109))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == 90 || LA118_0 == 103))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == 96))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == 98 || LA118_0 == 110 || LA118_0 == 146))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == 99 || LA118_0 == 111))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == STAR))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == OPERATOR))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == TILDE))
                    {
                        alt118=2;
                    }
                    else if ( (synpred62_CPP_grammar_(ctx)) && (LA118_0 == LPAREN))
                    {
                        alt118=2;
                    }
                    else if ( (LA118_0 == ELLIPSIS))
                    {
                        alt118=3;
                    }
                    else
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }


                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 118;
                        EXCEPTION->state        = 0;


                        goto ruleparameter_declarationEx;

                    }
                }
                switch (alt118)
                {
            	case 1:
            	    // CPP_grammar_.g:1412:4: {...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator )
            	    {
            	        if ( !((!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==OPERATOR)) &&
            	        			 (!(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
            	                EXCEPTION->message      = (void *)"!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==OPERATOR)) &&\r\n\t\t\t (!(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) )";
            	                EXCEPTION->ruleName	 = (void *)"parameter_declaration";


            	        }

            	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_parameter_declaration5345);
            	        declaration_specifiers(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:1416:4: ( ( declarator )=> declarator | abstract_declarator )
            	        {
            	            int alt117=2;
            	            {
            	                int LA117_0 = LA(1);
            	                if ( (LA117_0 == AMPERSAND))
            	                {
            	                    {
            	                        int LA117_1 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 1;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == 88 || LA117_0 == 101))
            	                {
            	                    {
            	                        int LA117_2 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 2;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == 97 || LA117_0 == 109))
            	                {
            	                    {
            	                        int LA117_3 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 3;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == 90 || LA117_0 == 103))
            	                {
            	                    {
            	                        int LA117_4 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 4;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == 96))
            	                {
            	                    {
            	                        int LA117_5 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 5;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == 98 || LA117_0 == 110 || LA117_0 == 146))
            	                {
            	                    {
            	                        int LA117_6 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 6;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == 99 || LA117_0 == 111))
            	                {
            	                    {
            	                        int LA117_7 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 7;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == SCOPE))
            	                {
            	                    {
            	                        int LA117_8 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 8;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == ID))
            	                {
            	                    {
            	                        int LA117_9 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 9;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == STAR))
            	                {
            	                    {
            	                        int LA117_10 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 10;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (synpred61_CPP_grammar_(ctx)) && (LA117_0 == OPERATOR))
            	                {
            	                    alt117=1;
            	                }
            	                else if ( (synpred61_CPP_grammar_(ctx)) && (LA117_0 == TILDE))
            	                {
            	                    alt117=1;
            	                }
            	                else if ( (LA117_0 == LPAREN))
            	                {
            	                    {
            	                        int LA117_13 = LA(2);
            	                        if ( (synpred61_CPP_grammar_(ctx)))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 117;
            	                            EXCEPTION->state        = 13;


            	                            goto ruleparameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA117_0 == EOF || LA117_0 == ASSIGNEQUAL || LA117_0 == COMMA || LA117_0 == ELLIPSIS || LA117_0 == GREATERTHAN || LA117_0 == LSQUARE || LA117_0 == RPAREN))
            	                {
            	                    alt117=2;
            	                }
            	                else
            	                {
            	                    if (BACKTRACKING>0)
            	                    {
            	                        FAILEDFLAG = ANTLR3_TRUE;
            	                        return ;
            	                    }


            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 117;
            	                    EXCEPTION->state        = 0;


            	                    goto ruleparameter_declarationEx;

            	                }
            	            }
            	            switch (alt117)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1417:5: ( declarator )=> declarator
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_declarator_in_parameter_declaration5364);
            	        	        declarator(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleparameter_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:1419:5: abstract_declarator
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_abstract_declarator_in_parameter_declaration5384);
            	        	        abstract_declarator(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleparameter_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1422:6: ( declarator )=> declarator
            	    {
            	        FOLLOWPUSH(FOLLOW_declarator_in_parameter_declaration5410);
            	        declarator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:1424:4: ELLIPSIS
            	    {
            	         MATCHT(ELLIPSIS, &FOLLOW_ELLIPSIS_in_parameter_declaration5422);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // CPP_grammar_.g:1426:3: ( ASSIGNEQUAL remainder_expression )?
            {
                int alt119=2;
                switch ( LA(1) )
                {
                    case ASSIGNEQUAL:
                    	{
                    		alt119=1;
                    	}
                        break;
                }

                switch (alt119)
                {
            	case 1:
            	    // CPP_grammar_.g:1426:4: ASSIGNEQUAL remainder_expression
            	    {
            	         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_parameter_declaration5431);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_remainder_expression_in_parameter_declaration5437);
            	        remainder_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleparameter_declarationEx; /* Prevent compiler warnings */
    ruleparameter_declarationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end parameter_declaration */

/**
 * $ANTLR start type_id
 * CPP_grammar_.g:1432:1: type_id : declaration_specifiers abstract_declarator ;
 */
static void
type_id(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1433:2: ( declaration_specifiers abstract_declarator )
        // CPP_grammar_.g:1434:3: declaration_specifiers abstract_declarator
        {
            FOLLOWPUSH(FOLLOW_declaration_specifiers_in_type_id5457);
            declaration_specifiers(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletype_idEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_abstract_declarator_in_type_id5459);
            abstract_declarator(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletype_idEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletype_idEx; /* Prevent compiler warnings */
    ruletype_idEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end type_id */

/**
 * $ANTLR start abstract_declarator
 * CPP_grammar_.g:1447:1: abstract_declarator : ( ptr_operator abstract_declarator | ( LPAREN abstract_declarator RPAREN ( LSQUARE | LPAREN ) )=> LPAREN abstract_declarator RPAREN ( abstract_declarator_suffix ) | ( abstract_declarator_suffix )? );
 */
static void
abstract_declarator(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1448:2: ( ptr_operator abstract_declarator | ( LPAREN abstract_declarator RPAREN ( LSQUARE | LPAREN ) )=> LPAREN abstract_declarator RPAREN ( abstract_declarator_suffix ) | ( abstract_declarator_suffix )? )

            ANTLR3_UINT32 alt121;

            alt121=3;

            switch ( LA(1) )
            {
            case AMPERSAND:
            case ID:
            case SCOPE:
            case STAR:
            case 88:
            case 90:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 109:
            case 110:
            case 111:
            case 146:
            	{
            		alt121=1;
            	}
                break;
            case LPAREN:
            	{
            		{
            		    int LA121_11 = LA(2);
            		    if ( (synpred63_CPP_grammar_(ctx)))
            		    {
            		        alt121=2;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt121=3;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 121;
            		        EXCEPTION->state        = 11;


            		        goto ruleabstract_declaratorEx;

            		    }
            		}
            	}
                break;
            case EOF:
            case ASSIGNEQUAL:
            case COMMA:
            case ELLIPSIS:
            case GREATERTHAN:
            case LSQUARE:
            case RPAREN:
            	{
            		alt121=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 121;
                EXCEPTION->state        = 0;


                goto ruleabstract_declaratorEx;

            }

            switch (alt121)
            {
        	case 1:
        	    // CPP_grammar_.g:1449:3: ptr_operator abstract_declarator
        	    {
        	        FOLLOWPUSH(FOLLOW_ptr_operator_in_abstract_declarator5484);
        	        ptr_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleabstract_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_abstract_declarator_in_abstract_declarator5486);
        	        abstract_declarator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleabstract_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1451:3: ( LPAREN abstract_declarator RPAREN ( LSQUARE | LPAREN ) )=> LPAREN abstract_declarator RPAREN ( abstract_declarator_suffix )
        	    {
        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_abstract_declarator5511);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleabstract_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_abstract_declarator_in_abstract_declarator5513);
        	        abstract_declarator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleabstract_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_abstract_declarator5515);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleabstract_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:1452:3: ( abstract_declarator_suffix )
        	        // CPP_grammar_.g:1453:3: abstract_declarator_suffix
        	        {
        	            FOLLOWPUSH(FOLLOW_abstract_declarator_suffix_in_abstract_declarator5523);
        	            abstract_declarator_suffix(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleabstract_declaratorEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }


        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:1455:3: ( abstract_declarator_suffix )?
        	    {
        	        // CPP_grammar_.g:1455:3: ( abstract_declarator_suffix )?
        	        {
        	            int alt120=2;
        	            switch ( LA(1) )
        	            {
        	                case LPAREN:
        	                case LSQUARE:
        	                	{
        	                		alt120=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt120)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1456:3: abstract_declarator_suffix
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_abstract_declarator_suffix_in_abstract_declarator5536);
        	        	        abstract_declarator_suffix(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleabstract_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleabstract_declaratorEx; /* Prevent compiler warnings */
    ruleabstract_declaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end abstract_declarator */

/**
 * $ANTLR start abstract_declarator_suffix
 * CPP_grammar_.g:1460:1: abstract_declarator_suffix : ( ( LSQUARE ( constant_expression )? RSQUARE )+ | LPAREN ( parameter_list )? RPAREN cv_qualifier_seq ( exception_specification )? );
 */
static void
abstract_declarator_suffix(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1461:2: ( ( LSQUARE ( constant_expression )? RSQUARE )+ | LPAREN ( parameter_list )? RPAREN cv_qualifier_seq ( exception_specification )? )

            ANTLR3_UINT32 alt126;

            alt126=2;

            switch ( LA(1) )
            {
            case LSQUARE:
            	{
            		alt126=1;
            	}
                break;
            case LPAREN:
            	{
            		alt126=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 126;
                EXCEPTION->state        = 0;


                goto ruleabstract_declarator_suffixEx;

            }

            switch (alt126)
            {
        	case 1:
        	    // CPP_grammar_.g:1462:3: ( LSQUARE ( constant_expression )? RSQUARE )+
        	    {
        	        // CPP_grammar_.g:1462:3: ( LSQUARE ( constant_expression )? RSQUARE )+
        	        {
        	            int cnt123=0;

        	            for (;;)
        	            {
        	                int alt123=2;
        	        	switch ( LA(1) )
        	        	{
        	        	case LSQUARE:
        	        		{
        	        			alt123=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt123)
        	        	{
        	        	    case 1:
        	        	        // CPP_grammar_.g:1462:4: LSQUARE ( constant_expression )? RSQUARE
        	        	        {
        	        	             MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_abstract_declarator_suffix5554);
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruleabstract_declarator_suffixEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return ;
        	        	            }


        	        	            // CPP_grammar_.g:1462:12: ( constant_expression )?
        	        	            {
        	        	                int alt122=2;
        	        	                switch ( LA(1) )
        	        	                {
        	        	                    case AMPERSAND:
        	        	                    case CharLiteral:
        	        	                    case DECIMALINT:
        	        	                    case FLOATONE:
        	        	                    case FLOATTWO:
        	        	                    case HEXADECIMALINT:
        	        	                    case ID:
        	        	                    case LPAREN:
        	        	                    case MINUS:
        	        	                    case MINUSMINUS:
        	        	                    case NOT:
        	        	                    case OCTALINT:
        	        	                    case OPERATOR:
        	        	                    case PLUS:
        	        	                    case PLUSPLUS:
        	        	                    case SCOPE:
        	        	                    case STAR:
        	        	                    case StringLiteral:
        	        	                    case TILDE:
        	        	                    case WCharLiteral:
        	        	                    case WStringLiteral:
        	        	                    case 87:
        	        	                    case 92:
        	        	                    case 93:
        	        	                    case 94:
        	        	                    case 95:
        	        	                    case 100:
        	        	                    case 105:
        	        	                    case 106:
        	        	                    case 107:
        	        	                    case 108:
        	        	                    case 112:
        	        	                    case 116:
        	        	                    case 120:
        	        	                    case 121:
        	        	                    case 123:
        	        	                    case 126:
        	        	                    case 128:
        	        	                    case 129:
        	        	                    case 131:
        	        	                    case 134:
        	        	                    case 135:
        	        	                    case 141:
        	        	                    case 142:
        	        	                    case 145:
        	        	                    case 151:
        	        	                    case 153:
        	        	                    case 154:
        	        	                    case 155:
        	        	                    case 157:
        	        	                    case 158:
        	        	                    case 161:
        	        	                    case 163:
        	        	                    case 166:
        	        	                    case 167:
        	        	                    case 168:
        	        	                    case 169:
        	        	                    case 172:
        	        	                    case 174:
        	        	                    	{
        	        	                    		alt122=1;
        	        	                    	}
        	        	                        break;
        	        	                }

        	        	                switch (alt122)
        	        	                {
        	        	            	case 1:
        	        	            	    // CPP_grammar_.g:1462:13: constant_expression
        	        	            	    {
        	        	            	        FOLLOWPUSH(FOLLOW_constant_expression_in_abstract_declarator_suffix5557);
        	        	            	        constant_expression(ctx);

        	        	            	        FOLLOWPOP();
        	        	            	        if  (HASEXCEPTION())
        	        	            	        {
        	        	            	            goto ruleabstract_declarator_suffixEx;
        	        	            	        }
        	        	            	        if (HASFAILED())
        	        	            	        {
        	        	            	            return ;
        	        	            	        }


        	        	            	    }
        	        	            	    break;

        	        	                }
        	        	            }

        	        	             MATCHT(RSQUARE, &FOLLOW_RSQUARE_in_abstract_declarator_suffix5561);
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruleabstract_declarator_suffixEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return ;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt123 >= 1 )
        	        		{
        	        		    goto loop123;
        	        		}
        	        		if (BACKTRACKING>0)
        	        		{
        	        		    FAILEDFLAG = ANTLR3_TRUE;
        	        		    return ;
        	        		}

        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto ruleabstract_declarator_suffixEx;
        	        	}
        	        	cnt123++;
        	            }
        	            loop123: ;	/* Jump to here if this rule does not match */
        	        }

        	        if ( BACKTRACKING==0 )
        	        {
        	            declaratorArray();
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1465:3: LPAREN ( parameter_list )? RPAREN cv_qualifier_seq ( exception_specification )?
        	    {
        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_abstract_declarator_suffix5574);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleabstract_declarator_suffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            declaratorParameterList(0);
        	        }


        	        // CPP_grammar_.g:1467:3: ( parameter_list )?
        	        {
        	            int alt124=2;
        	            switch ( LA(1) )
        	            {
        	                case AMPERSAND:
        	                case ELLIPSIS:
        	                case ID:
        	                case LPAREN:
        	                case OPERATOR:
        	                case SCOPE:
        	                case STAR:
        	                case TILDE:
        	                case 88:
        	                case 89:
        	                case 90:
        	                case 91:
        	                case 92:
        	                case 93:
        	                case 94:
        	                case 95:
        	                case 96:
        	                case 97:
        	                case 98:
        	                case 99:
        	                case 100:
        	                case 101:
        	                case 102:
        	                case 103:
        	                case 104:
        	                case 105:
        	                case 106:
        	                case 107:
        	                case 108:
        	                case 109:
        	                case 110:
        	                case 111:
        	                case 112:
        	                case 115:
        	                case 116:
        	                case 120:
        	                case 121:
        	                case 122:
        	                case 128:
        	                case 131:
        	                case 132:
        	                case 133:
        	                case 135:
        	                case 137:
        	                case 140:
        	                case 141:
        	                case 142:
        	                case 143:
        	                case 146:
        	                case 150:
        	                case 153:
        	                case 154:
        	                case 156:
        	                case 158:
        	                case 165:
        	                case 167:
        	                case 168:
        	                case 169:
        	                case 171:
        	                case 172:
        	                case 173:
        	                case 174:
        	                	{
        	                		alt124=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt124)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1467:4: parameter_list
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_parameter_list_in_abstract_declarator_suffix5583);
        	        	        parameter_list(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleabstract_declarator_suffixEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_abstract_declarator_suffix5589);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleabstract_declarator_suffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            declaratorEndParameterList(0);
        	        }


        	        FOLLOWPUSH(FOLLOW_cv_qualifier_seq_in_abstract_declarator_suffix5597);
        	        cv_qualifier_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleabstract_declarator_suffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:1471:3: ( exception_specification )?
        	        {
        	            int alt125=2;
        	            switch ( LA(1) )
        	            {
        	                case 162:
        	                	{
        	                		alt125=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt125)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1471:4: exception_specification
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_exception_specification_in_abstract_declarator_suffix5602);
        	        	        exception_specification(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleabstract_declarator_suffixEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleabstract_declarator_suffixEx; /* Prevent compiler warnings */
    ruleabstract_declarator_suffixEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end abstract_declarator_suffix */

/**
 * $ANTLR start exception_specification
 * CPP_grammar_.g:1475:1: exception_specification : 'throw' LPAREN ( (so1= scope_override[bufScopeOverrideScope] ID ( COMMA so2= scope_override[bufScopeOverrideScope] ID )* )? | ELLIPSIS ) RPAREN ;
 */
static void
exception_specification(pCPP_grammar_Parser ctx)
{

    		char bufScopeOverrideScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    char * so1;
    #undef	RETURN_TYPE_so1
    #define	RETURN_TYPE_so1 char *

    char * so2;
    #undef	RETURN_TYPE_so2
    #define	RETURN_TYPE_so2 char *

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1479:2: ( 'throw' LPAREN ( (so1= scope_override[bufScopeOverrideScope] ID ( COMMA so2= scope_override[bufScopeOverrideScope] ID )* )? | ELLIPSIS ) RPAREN )
        // CPP_grammar_.g:1480:3: 'throw' LPAREN ( (so1= scope_override[bufScopeOverrideScope] ID ( COMMA so2= scope_override[bufScopeOverrideScope] ID )* )? | ELLIPSIS ) RPAREN
        {
             MATCHT(162, &FOLLOW_162_in_exception_specification5625);
            if  (HASEXCEPTION())
            {
                goto ruleexception_specificationEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(LPAREN, &FOLLOW_LPAREN_in_exception_specification5629);
            if  (HASEXCEPTION())
            {
                goto ruleexception_specificationEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1482:3: ( (so1= scope_override[bufScopeOverrideScope] ID ( COMMA so2= scope_override[bufScopeOverrideScope] ID )* )? | ELLIPSIS )
            {
                int alt129=2;
                switch ( LA(1) )
                {
                case ID:
                case RPAREN:
                case SCOPE:
                	{
                		alt129=1;
                	}
                    break;
                case ELLIPSIS:
                	{
                		alt129=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 129;
                    EXCEPTION->state        = 0;


                    goto ruleexception_specificationEx;

                }

                switch (alt129)
                {
            	case 1:
            	    // CPP_grammar_.g:1482:5: (so1= scope_override[bufScopeOverrideScope] ID ( COMMA so2= scope_override[bufScopeOverrideScope] ID )* )?
            	    {
            	        // CPP_grammar_.g:1482:5: (so1= scope_override[bufScopeOverrideScope] ID ( COMMA so2= scope_override[bufScopeOverrideScope] ID )* )?
            	        {
            	            int alt128=2;
            	            switch ( LA(1) )
            	            {
            	                case ID:
            	                case SCOPE:
            	                	{
            	                		alt128=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt128)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1482:6: so1= scope_override[bufScopeOverrideScope] ID ( COMMA so2= scope_override[bufScopeOverrideScope] ID )*
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_scope_override_in_exception_specification5641);
            	        	        so1=scope_override(ctx, bufScopeOverrideScope);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexception_specificationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	         MATCHT(ID, &FOLLOW_ID_in_exception_specification5644);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexception_specificationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        // CPP_grammar_.g:1482:53: ( COMMA so2= scope_override[bufScopeOverrideScope] ID )*

            	        	        for (;;)
            	        	        {
            	        	            int alt127=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	            case COMMA:
            	        	            	{
            	        	            		alt127=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt127)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:1482:54: COMMA so2= scope_override[bufScopeOverrideScope] ID
            	        	        	    {
            	        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_exception_specification5647);
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleexception_specificationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	        FOLLOWPUSH(FOLLOW_scope_override_in_exception_specification5653);
            	        	        	        so2=scope_override(ctx, bufScopeOverrideScope);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleexception_specificationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	         MATCHT(ID, &FOLLOW_ID_in_exception_specification5656);
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleexception_specificationEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop127;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop127: ; /* Jump out to here if this rule does not match */


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1483:5: ELLIPSIS
            	    {
            	         MATCHT(ELLIPSIS, &FOLLOW_ELLIPSIS_in_exception_specification5668);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexception_specificationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(RPAREN, &FOLLOW_RPAREN_in_exception_specification5676);
            if  (HASEXCEPTION())
            {
                goto ruleexception_specificationEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexception_specificationEx; /* Prevent compiler warnings */
    ruleexception_specificationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end exception_specification */

/**
 * $ANTLR start template_head
 * CPP_grammar_.g:1489:1: template_head : 'template' LESSTHAN template_parameter_list GREATERTHAN ;
 */
static void
template_head(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1490:2: ( 'template' LESSTHAN template_parameter_list GREATERTHAN )
        // CPP_grammar_.g:1491:3: 'template' LESSTHAN template_parameter_list GREATERTHAN
        {
             MATCHT(160, &FOLLOW_160_in_template_head5691);
            if  (HASEXCEPTION())
            {
                goto ruletemplate_headEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_template_head5695);
            if  (HASEXCEPTION())
            {
                goto ruletemplate_headEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_template_parameter_list_in_template_head5697);
            template_parameter_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletemplate_headEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_template_head5699);
            if  (HASEXCEPTION())
            {
                goto ruletemplate_headEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletemplate_headEx; /* Prevent compiler warnings */
    ruletemplate_headEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end template_head */

/**
 * $ANTLR start template_parameter_list
 * CPP_grammar_.g:1496:1: template_parameter_list : template_parameter ( COMMA template_parameter )* ;
 */
static void
template_parameter_list(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1497:2: ( template_parameter ( COMMA template_parameter )* )
        // CPP_grammar_.g:1498:3: template_parameter ( COMMA template_parameter )*
        {
            if ( BACKTRACKING==0 )
            {
                 //wasInTemplate=TRUE;
                		beginTemplateParameterList();
            }


            FOLLOWPUSH(FOLLOW_template_parameter_in_template_parameter_list5718);
            template_parameter(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletemplate_parameter_listEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1500:22: ( COMMA template_parameter )*

            for (;;)
            {
                int alt130=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt130=1;
                	}
                    break;

                }

                switch (alt130)
                {
            	case 1:
            	    // CPP_grammar_.g:1500:23: COMMA template_parameter
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_template_parameter_list5721);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameter_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_template_parameter_in_template_parameter_list5723);
            	        template_parameter(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameter_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop130;	/* break out of the loop */
            	    break;
                }
            }
            loop130: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING==0 )
            {
                endTemplateParameterList();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletemplate_parameter_listEx; /* Prevent compiler warnings */
    ruletemplate_parameter_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end template_parameter_list */

/**
 * $ANTLR start template_parameter
 * CPP_grammar_.g:1513:1: template_parameter : ( type_parameter | ( parameter_declaration )=> parameter_declaration | template_parameter_declaration ) ;
 */
static void
template_parameter(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1514:2: ( ( type_parameter | ( parameter_declaration )=> parameter_declaration | template_parameter_declaration ) )
        // CPP_grammar_.g:1515:3: ( type_parameter | ( parameter_declaration )=> parameter_declaration | template_parameter_declaration )
        {
            // CPP_grammar_.g:1515:3: ( type_parameter | ( parameter_declaration )=> parameter_declaration | template_parameter_declaration )
            {
                int alt131=3;
                switch ( LA(1) )
                {
                case 167:
                	{
                		alt131=1;
                	}
                    break;
                case 160:
                	{
                		alt131=1;
                	}
                    break;
                case 165:
                	{
                		{
                		    int LA131_3 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 3;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 137:
                	{
                		{
                		    int LA131_4 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 4;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 115:
                	{
                		{
                		    int LA131_5 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 5;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 150:
                	{
                		{
                		    int LA131_6 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 6;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 156:
                	{
                		{
                		    int LA131_7 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 7;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 133:
                	{
                		{
                		    int LA131_8 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 8;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 143:
                	{
                		{
                		    int LA131_9 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 9;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 122:
                	{
                		{
                		    int LA131_10 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 10;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 173:
                	{
                		{
                		    int LA131_11 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 11;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 91:
                case 104:
                case 140:
                	{
                		{
                		    int LA131_12 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 12;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 171:
                	{
                		{
                		    int LA131_13 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 13;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 132:
                	{
                		{
                		    int LA131_14 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 14;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 89:
                case 102:
                	{
                		{
                		    int LA131_15 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 15;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case SCOPE:
                	{
                		{
                		    int LA131_16 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 16;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case ID:
                	{
                		{
                		    int LA131_17 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 17;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 121:
                	{
                		alt131=1;
                	}
                    break;
                case 131:
                	{
                		{
                		    int LA131_19 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 19;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 158:
                	{
                		{
                		    int LA131_20 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 20;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 168:
                	{
                		{
                		    int LA131_21 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 21;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 120:
                	{
                		{
                		    int LA131_22 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 22;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 174:
                	{
                		{
                		    int LA131_23 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 23;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 116:
                	{
                		{
                		    int LA131_24 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 24;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 153:
                	{
                		{
                		    int LA131_25 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 25;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 141:
                	{
                		{
                		    int LA131_26 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 26;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 95:
                case 108:
                	{
                		{
                		    int LA131_27 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 27;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 92:
                case 105:
                	{
                		{
                		    int LA131_28 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 28;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 93:
                case 106:
                	{
                		{
                		    int LA131_29 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 29;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 94:
                case 107:
                	{
                		{
                		    int LA131_30 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 30;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 100:
                case 112:
                	{
                		{
                		    int LA131_31 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 31;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 142:
                	{
                		{
                		    int LA131_32 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 32;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 154:
                	{
                		{
                		    int LA131_33 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 33;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 169:
                	{
                		{
                		    int LA131_34 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 34;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 135:
                	{
                		{
                		    int LA131_35 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 35;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 128:
                	{
                		{
                		    int LA131_36 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 36;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 172:
                	{
                		{
                		    int LA131_37 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 37;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case AMPERSAND:
                	{
                		{
                		    int LA131_38 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 38;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 88:
                case 101:
                	{
                		{
                		    int LA131_39 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 39;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 97:
                case 109:
                	{
                		{
                		    int LA131_40 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 40;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 90:
                case 103:
                	{
                		{
                		    int LA131_41 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 41;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 96:
                	{
                		{
                		    int LA131_42 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 42;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 98:
                case 110:
                case 146:
                	{
                		{
                		    int LA131_43 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 43;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case 99:
                case 111:
                	{
                		{
                		    int LA131_44 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 44;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case STAR:
                	{
                		{
                		    int LA131_45 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 45;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case OPERATOR:
                	{
                		{
                		    int LA131_46 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 46;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case TILDE:
                	{
                		{
                		    int LA131_47 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 47;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case LPAREN:
                	{
                		{
                		    int LA131_48 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 48;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;
                case ELLIPSIS:
                	{
                		{
                		    int LA131_49 = LA(2);
                		    if ( (synpred64_CPP_grammar_(ctx)))
                		    {
                		        alt131=2;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt131=3;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 131;
                		        EXCEPTION->state        = 49;


                		        goto ruletemplate_parameterEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 131;
                    EXCEPTION->state        = 0;


                    goto ruletemplate_parameterEx;

                }

                switch (alt131)
                {
            	case 1:
            	    // CPP_grammar_.g:1516:4: type_parameter
            	    {
            	        FOLLOWPUSH(FOLLOW_type_parameter_in_template_parameter5758);
            	        type_parameter(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameterEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1518:4: ( parameter_declaration )=> parameter_declaration
            	    {
            	        FOLLOWPUSH(FOLLOW_parameter_declaration_in_template_parameter5776);
            	        parameter_declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameterEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:1521:4: template_parameter_declaration
            	    {
            	        FOLLOWPUSH(FOLLOW_template_parameter_declaration_in_template_parameter5785);
            	        template_parameter_declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameterEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruletemplate_parameterEx; /* Prevent compiler warnings */
    ruletemplate_parameterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end template_parameter */

/**
 * $ANTLR start type_parameter
 * CPP_grammar_.g:1526:1: type_parameter : ( ( 'class' | 'typename' ) (id= ID ( ASSIGNEQUAL assigned_type_name )? )? | template_head 'class' (id2= ID ( ASSIGNEQUAL assigned_type_name )? )? ) ;
 */
static void
type_parameter(pCPP_grammar_Parser ctx)
{
    pANTLR3_COMMON_TOKEN    id;
    pANTLR3_COMMON_TOKEN    id2;

    /* Initialize rule variables
     */

    id       = NULL;
    id2       = NULL;

    {
        // CPP_grammar_.g:1527:2: ( ( ( 'class' | 'typename' ) (id= ID ( ASSIGNEQUAL assigned_type_name )? )? | template_head 'class' (id2= ID ( ASSIGNEQUAL assigned_type_name )? )? ) )
        // CPP_grammar_.g:1528:3: ( ( 'class' | 'typename' ) (id= ID ( ASSIGNEQUAL assigned_type_name )? )? | template_head 'class' (id2= ID ( ASSIGNEQUAL assigned_type_name )? )? )
        {
            // CPP_grammar_.g:1528:3: ( ( 'class' | 'typename' ) (id= ID ( ASSIGNEQUAL assigned_type_name )? )? | template_head 'class' (id2= ID ( ASSIGNEQUAL assigned_type_name )? )? )
            {
                int alt136=2;
                switch ( LA(1) )
                {
                case 121:
                case 167:
                	{
                		alt136=1;
                	}
                    break;
                case 160:
                	{
                		alt136=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 136;
                    EXCEPTION->state        = 0;


                    goto ruletype_parameterEx;

                }

                switch (alt136)
                {
            	case 1:
            	    // CPP_grammar_.g:1529:4: ( 'class' | 'typename' ) (id= ID ( ASSIGNEQUAL assigned_type_name )? )?
            	    {
            	        if ( LA(1) == 121 || LA(1) == 167 )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruletype_parameterEx;
            	        }


            	        // CPP_grammar_.g:1530:4: (id= ID ( ASSIGNEQUAL assigned_type_name )? )?
            	        {
            	            int alt133=2;
            	            switch ( LA(1) )
            	            {
            	                case ID:
            	                	{
            	                		alt133=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt133)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1530:5: id= ID ( ASSIGNEQUAL assigned_type_name )?
            	        	    {
            	        	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_type_parameter5822);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletype_parameterEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {

            	        	            				templateTypeParameter((char*)(id->getText(id))->chars);
            	        	            				
            	        	        }


            	        	        // CPP_grammar_.g:1534:5: ( ASSIGNEQUAL assigned_type_name )?
            	        	        {
            	        	            int alt132=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case ASSIGNEQUAL:
            	        	                	{
            	        	                		alt132=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt132)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:1534:6: ASSIGNEQUAL assigned_type_name
            	        	        	    {
            	        	        	         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_type_parameter5835);
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruletype_parameterEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	        FOLLOWPUSH(FOLLOW_assigned_type_name_in_type_parameter5837);
            	        	        	        assigned_type_name(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruletype_parameterEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1537:4: template_head 'class' (id2= ID ( ASSIGNEQUAL assigned_type_name )? )?
            	    {
            	        FOLLOWPUSH(FOLLOW_template_head_in_type_parameter5854);
            	        template_head(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_parameterEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(121, &FOLLOW_121_in_type_parameter5856);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_parameterEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:1538:4: (id2= ID ( ASSIGNEQUAL assigned_type_name )? )?
            	        {
            	            int alt135=2;
            	            switch ( LA(1) )
            	            {
            	                case ID:
            	                	{
            	                		alt135=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt135)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1538:5: id2= ID ( ASSIGNEQUAL assigned_type_name )?
            	        	    {
            	        	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_type_parameter5865);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletype_parameterEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {

            	        	            				templateTypeParameter((char*)(id2->getText(id2))->chars);
            	        	            				
            	        	        }


            	        	        // CPP_grammar_.g:1542:5: ( ASSIGNEQUAL assigned_type_name )?
            	        	        {
            	        	            int alt134=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case ASSIGNEQUAL:
            	        	                	{
            	        	                		alt134=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt134)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:1542:6: ASSIGNEQUAL assigned_type_name
            	        	        	    {
            	        	        	         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_type_parameter5878);
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruletype_parameterEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	        FOLLOWPUSH(FOLLOW_assigned_type_name_in_type_parameter5880);
            	        	        	        assigned_type_name(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruletype_parameterEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruletype_parameterEx; /* Prevent compiler warnings */
    ruletype_parameterEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end type_parameter */

/**
 * $ANTLR start assigned_type_name
 * CPP_grammar_.g:1552:1: assigned_type_name : (qt1= qualified_type[bufQualifiedType] abstract_declarator |ts1= simple_type_specifier abstract_declarator ) ;
 */
static void
assigned_type_name(pCPP_grammar_Parser ctx)
{

    		char* qt = NULL; 
    		TypeSpecifier ts;
    		char bufQualifiedType[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    char * qt1;
    #undef	RETURN_TYPE_qt1
    #define	RETURN_TYPE_qt1 char *

    TypeSpecifier ts1;
    #undef	RETURN_TYPE_ts1
    #define	RETURN_TYPE_ts1 TypeSpecifier

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1558:2: ( (qt1= qualified_type[bufQualifiedType] abstract_declarator |ts1= simple_type_specifier abstract_declarator ) )
        // CPP_grammar_.g:1559:3: (qt1= qualified_type[bufQualifiedType] abstract_declarator |ts1= simple_type_specifier abstract_declarator )
        {
            // CPP_grammar_.g:1559:3: (qt1= qualified_type[bufQualifiedType] abstract_declarator |ts1= simple_type_specifier abstract_declarator )
            {
                int alt137=2;
                switch ( LA(1) )
                {
                case SCOPE:
                	{
                		switch ( LA(2) )
                		{
                		case ID:
                			{
                				{
                				    int LA137_4 = LA(3);
                				    if ( (!( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )))
                				    {
                				        alt137=1;
                				    }
                				    else if ( ((qualifiedItemIsOneOf(qiType|qiCtor,0))))
                				    {
                				        alt137=2;
                				    }
                				    else
                				    {
                				        if (BACKTRACKING>0)
                				        {
                				            FAILEDFLAG = ANTLR3_TRUE;
                				            return ;
                				        }


                				        CONSTRUCTEX();
                				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				        EXCEPTION->message      = (void *)"";
                				        EXCEPTION->decisionNum  = 137;
                				        EXCEPTION->state        = 4;


                				        goto ruleassigned_type_nameEx;

                				    }
                				}
                			}
                		    break;

                		default:
                		    if (BACKTRACKING>0)
                		    {
                		        FAILEDFLAG = ANTLR3_TRUE;
                		        return ;
                		    }

                		    CONSTRUCTEX();
                		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		    EXCEPTION->message      = (void *)"";
                		    EXCEPTION->decisionNum  = 137;
                		    EXCEPTION->state        = 1;


                		    goto ruleassigned_type_nameEx;

                		}

                	}
                    break;
                case ID:
                	{
                		{
                		    int LA137_2 = LA(2);
                		    if ( (!( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )))
                		    {
                		        alt137=1;
                		    }
                		    else if ( ((qualifiedItemIsOneOf(qiType|qiCtor,0))))
                		    {
                		        alt137=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 137;
                		        EXCEPTION->state        = 2;


                		        goto ruleassigned_type_nameEx;

                		    }
                		}
                	}
                    break;
                case 92:
                case 93:
                case 94:
                case 95:
                case 100:
                case 105:
                case 106:
                case 107:
                case 108:
                case 112:
                case 116:
                case 120:
                case 121:
                case 128:
                case 131:
                case 135:
                case 141:
                case 142:
                case 153:
                case 154:
                case 158:
                case 167:
                case 168:
                case 169:
                case 172:
                case 174:
                	{
                		alt137=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 137;
                    EXCEPTION->state        = 0;


                    goto ruleassigned_type_nameEx;

                }

                switch (alt137)
                {
            	case 1:
            	    // CPP_grammar_.g:1560:4: qt1= qualified_type[bufQualifiedType] abstract_declarator
            	    {
            	        FOLLOWPUSH(FOLLOW_qualified_type_in_assigned_type_name5926);
            	        qt1=qualified_type(ctx, bufQualifiedType);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassigned_type_nameEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_abstract_declarator_in_assigned_type_name5929);
            	        abstract_declarator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassigned_type_nameEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            qt = qt1
            	            ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1562:4: ts1= simple_type_specifier abstract_declarator
            	    {
            	        FOLLOWPUSH(FOLLOW_simple_type_specifier_in_assigned_type_name5945);
            	        ts1=simple_type_specifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassigned_type_nameEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_abstract_declarator_in_assigned_type_name5947);
            	        abstract_declarator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassigned_type_nameEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            ts = ts1
            	            ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleassigned_type_nameEx; /* Prevent compiler warnings */
    ruleassigned_type_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end assigned_type_name */

/**
 * $ANTLR start template_parameter_declaration
 * CPP_grammar_.g:1567:1: template_parameter_declaration : ({...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator ) | ( declarator )=> declarator | ELLIPSIS ) ( ASSIGNEQUAL additive_expression )? ;
 */
static void
template_parameter_declaration(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1568:2: ( ({...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator ) | ( declarator )=> declarator | ELLIPSIS ) ( ASSIGNEQUAL additive_expression )? )
        // CPP_grammar_.g:1569:3: ({...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator ) | ( declarator )=> declarator | ELLIPSIS ) ( ASSIGNEQUAL additive_expression )?
        {
            if ( BACKTRACKING==0 )
            {
                beginParameterDeclaration();
            }


            // CPP_grammar_.g:1570:3: ({...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator ) | ( declarator )=> declarator | ELLIPSIS )
            {
                int alt139=3;
                {
                    int LA139_0 = LA(1);
                    if ( (LA139_0 == 89 || ((LA139_0 >= 91) && (LA139_0 <= 95)) || LA139_0 == 100 || LA139_0 == 102 || ((LA139_0 >= 104) && (LA139_0 <= 108)) || LA139_0 == 112 || ((LA139_0 >= 115) && (LA139_0 <= 116)) || ((LA139_0 >= 120) && (LA139_0 <= 122)) || LA139_0 == 128 || ((LA139_0 >= 131) && (LA139_0 <= 133)) || LA139_0 == 135 || LA139_0 == 137 || ((LA139_0 >= 140) && (LA139_0 <= 143)) || LA139_0 == 150 || ((LA139_0 >= 153) && (LA139_0 <= 154)) || LA139_0 == 156 || LA139_0 == 158 || LA139_0 == 165 || ((LA139_0 >= 167) && (LA139_0 <= 169)) || ((LA139_0 >= 171) && (LA139_0 <= 174))))
                    {
                        alt139=1;
                    }
                    else if ( (LA139_0 == SCOPE))
                    {
                        {
                            int LA139_2 = LA(2);
                            if ( (LA139_2 == ID))
                            {
                                {
                                    int LA139_3 = LA(3);
                                    if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && ((!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==OPERATOR)) &&
                                    			 (!(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )))
                                    {
                                        alt139=1;
                                    }
                                    else if ( (synpred66_CPP_grammar_(ctx)))
                                    {
                                        alt139=2;
                                    }
                                    else
                                    {
                                        if (BACKTRACKING>0)
                                        {
                                            FAILEDFLAG = ANTLR3_TRUE;
                                            return ;
                                        }


                                        CONSTRUCTEX();
                                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                        EXCEPTION->message      = (void *)"";
                                        EXCEPTION->decisionNum  = 139;
                                        EXCEPTION->state        = 3;


                                        goto ruletemplate_parameter_declarationEx;

                                    }
                                }
                            }
                            else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_2 == STAR))
                            {
                                alt139=2;
                            }
                            else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_2 == OPERATOR))
                            {
                                alt139=2;
                            }
                            else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_2 == TILDE))
                            {
                                alt139=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 139;
                                EXCEPTION->state        = 2;


                                goto ruletemplate_parameter_declarationEx;

                            }
                        }
                    }
                    else if ( (LA139_0 == ID))
                    {
                        {
                            int LA139_3 = LA(2);
                            if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && ((!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==OPERATOR)) &&
                            			 (!(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )))
                            {
                                alt139=1;
                            }
                            else if ( (synpred66_CPP_grammar_(ctx)))
                            {
                                alt139=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 139;
                                EXCEPTION->state        = 3;


                                goto ruletemplate_parameter_declarationEx;

                            }
                        }
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == AMPERSAND))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == 88 || LA139_0 == 101))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == 97 || LA139_0 == 109))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == 90 || LA139_0 == 103))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == 96))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == 98 || LA139_0 == 110 || LA139_0 == 146))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == 99 || LA139_0 == 111))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == STAR))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == OPERATOR))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == TILDE))
                    {
                        alt139=2;
                    }
                    else if ( (synpred66_CPP_grammar_(ctx)) && (LA139_0 == LPAREN))
                    {
                        alt139=2;
                    }
                    else if ( (LA139_0 == ELLIPSIS))
                    {
                        alt139=3;
                    }
                    else
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }


                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 139;
                        EXCEPTION->state        = 0;


                        goto ruletemplate_parameter_declarationEx;

                    }
                }
                switch (alt139)
                {
            	case 1:
            	    // CPP_grammar_.g:1571:4: {...}? declaration_specifiers ( ( declarator )=> declarator | abstract_declarator )
            	    {
            	        if ( !((!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==OPERATOR)) &&
            	        			 (!(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
            	                EXCEPTION->message      = (void *)"!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==OPERATOR)) &&\r\n\t\t\t (!(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) )";
            	                EXCEPTION->ruleName	 = (void *)"template_parameter_declaration";


            	        }

            	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_template_parameter_declaration5987);
            	        declaration_specifiers(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        // CPP_grammar_.g:1575:4: ( ( declarator )=> declarator | abstract_declarator )
            	        {
            	            int alt138=2;
            	            {
            	                int LA138_0 = LA(1);
            	                if ( (LA138_0 == AMPERSAND))
            	                {
            	                    {
            	                        int LA138_1 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 1;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == 88 || LA138_0 == 101))
            	                {
            	                    {
            	                        int LA138_2 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 2;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == 97 || LA138_0 == 109))
            	                {
            	                    {
            	                        int LA138_3 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 3;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == 90 || LA138_0 == 103))
            	                {
            	                    {
            	                        int LA138_4 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 4;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == 96))
            	                {
            	                    {
            	                        int LA138_5 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 5;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == 98 || LA138_0 == 110 || LA138_0 == 146))
            	                {
            	                    {
            	                        int LA138_6 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 6;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == 99 || LA138_0 == 111))
            	                {
            	                    {
            	                        int LA138_7 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 7;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == SCOPE))
            	                {
            	                    {
            	                        int LA138_8 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 8;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == ID))
            	                {
            	                    {
            	                        int LA138_9 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 9;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == STAR))
            	                {
            	                    {
            	                        int LA138_10 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 10;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (synpred65_CPP_grammar_(ctx)) && (LA138_0 == OPERATOR))
            	                {
            	                    alt138=1;
            	                }
            	                else if ( (synpred65_CPP_grammar_(ctx)) && (LA138_0 == TILDE))
            	                {
            	                    alt138=1;
            	                }
            	                else if ( (LA138_0 == LPAREN))
            	                {
            	                    {
            	                        int LA138_13 = LA(2);
            	                        if ( (synpred65_CPP_grammar_(ctx)))
            	                        {
            	                            alt138=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt138=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 138;
            	                            EXCEPTION->state        = 13;


            	                            goto ruletemplate_parameter_declarationEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA138_0 == ASSIGNEQUAL || LA138_0 == COMMA || LA138_0 == GREATERTHAN || LA138_0 == LSQUARE))
            	                {
            	                    alt138=2;
            	                }
            	                else
            	                {
            	                    if (BACKTRACKING>0)
            	                    {
            	                        FAILEDFLAG = ANTLR3_TRUE;
            	                        return ;
            	                    }


            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 138;
            	                    EXCEPTION->state        = 0;


            	                    goto ruletemplate_parameter_declarationEx;

            	                }
            	            }
            	            switch (alt138)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1576:5: ( declarator )=> declarator
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_declarator_in_template_parameter_declaration6006);
            	        	        declarator(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletemplate_parameter_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:1578:5: abstract_declarator
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_abstract_declarator_in_template_parameter_declaration6026);
            	        	        abstract_declarator(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletemplate_parameter_declarationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1581:4: ( declarator )=> declarator
            	    {
            	        FOLLOWPUSH(FOLLOW_declarator_in_template_parameter_declaration6050);
            	        declarator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:1583:4: ELLIPSIS
            	    {
            	         MATCHT(ELLIPSIS, &FOLLOW_ELLIPSIS_in_template_parameter_declaration6062);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // CPP_grammar_.g:1585:3: ( ASSIGNEQUAL additive_expression )?
            {
                int alt140=2;
                switch ( LA(1) )
                {
                    case ASSIGNEQUAL:
                    	{
                    		alt140=1;
                    	}
                        break;
                }

                switch (alt140)
                {
            	case 1:
            	    // CPP_grammar_.g:1585:4: ASSIGNEQUAL additive_expression
            	    {
            	         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_template_parameter_declaration6071);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_additive_expression_in_template_parameter_declaration6076);
            	        additive_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_parameter_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruletemplate_parameter_declarationEx; /* Prevent compiler warnings */
    ruletemplate_parameter_declarationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end template_parameter_declaration */

/**
 * $ANTLR start template_id
 * CPP_grammar_.g:1592:1: template_id : ID LESSTHAN template_argument_list GREATERTHAN ;
 */
static void
template_id(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1593:2: ( ID LESSTHAN template_argument_list GREATERTHAN )
        // CPP_grammar_.g:1594:3: ID LESSTHAN template_argument_list GREATERTHAN
        {
             MATCHT(ID, &FOLLOW_ID_in_template_id6099);
            if  (HASEXCEPTION())
            {
                goto ruletemplate_idEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_template_id6101);
            if  (HASEXCEPTION())
            {
                goto ruletemplate_idEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_template_argument_list_in_template_id6103);
            template_argument_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletemplate_idEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_template_id6105);
            if  (HASEXCEPTION())
            {
                goto ruletemplate_idEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletemplate_idEx; /* Prevent compiler warnings */
    ruletemplate_idEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end template_id */

/**
 * $ANTLR start template_argument_list
 * CPP_grammar_.g:1598:1: template_argument_list : template_argument ( COMMA template_argument )* ;
 */
static void
template_argument_list(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1599:2: ( template_argument ( COMMA template_argument )* )
        // CPP_grammar_.g:1600:3: template_argument ( COMMA template_argument )*
        {
            FOLLOWPUSH(FOLLOW_template_argument_in_template_argument_list6120);
            template_argument(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletemplate_argument_listEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1600:21: ( COMMA template_argument )*

            for (;;)
            {
                int alt141=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt141=1;
                	}
                    break;

                }

                switch (alt141)
                {
            	case 1:
            	    // CPP_grammar_.g:1600:22: COMMA template_argument
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_template_argument_list6123);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_argument_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_template_argument_in_template_argument_list6125);
            	        template_argument(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletemplate_argument_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop141;	/* break out of the loop */
            	    break;
                }
            }
            loop141: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletemplate_argument_listEx; /* Prevent compiler warnings */
    ruletemplate_argument_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end template_argument_list */

/**
 * $ANTLR start template_argument
 * CPP_grammar_.g:1609:1: template_argument : ({...}? type_id | shift_expression );
 */
static void
template_argument(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1610:2: ({...}? type_id | shift_expression )

            ANTLR3_UINT32 alt142;

            alt142=2;

            switch ( LA(1) )
            {
            case 89:
            case 91:
            case 102:
            case 104:
            case 115:
            case 122:
            case 132:
            case 133:
            case 137:
            case 140:
            case 143:
            case 150:
            case 156:
            case 165:
            case 171:
            case 173:
            	{
            		alt142=1;
            	}
                break;
            case SCOPE:
            	{
            		{
            		    int LA142_14 = LA(2);
            		    if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 14;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case ID:
            	{
            		{
            		    int LA142_15 = LA(2);
            		    if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 15;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 167:
            	{
            		{
            		    int LA142_16 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 16;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 131:
            	{
            		{
            		    int LA142_17 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 17;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 121:
            	{
            		{
            		    int LA142_18 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 18;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 158:
            	{
            		{
            		    int LA142_19 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 19;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 168:
            	{
            		{
            		    int LA142_20 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 20;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 120:
            	{
            		{
            		    int LA142_21 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 21;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 174:
            	{
            		{
            		    int LA142_22 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 22;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 116:
            	{
            		{
            		    int LA142_23 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 23;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 153:
            	{
            		{
            		    int LA142_24 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 24;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 141:
            	{
            		{
            		    int LA142_25 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 25;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 95:
            case 108:
            	{
            		{
            		    int LA142_26 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 26;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 92:
            case 105:
            	{
            		{
            		    int LA142_27 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 27;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 93:
            case 106:
            	{
            		{
            		    int LA142_28 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 28;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 94:
            case 107:
            	{
            		{
            		    int LA142_29 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 29;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 100:
            case 112:
            	{
            		{
            		    int LA142_30 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 30;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 142:
            	{
            		{
            		    int LA142_31 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 31;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 154:
            	{
            		{
            		    int LA142_32 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 32;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 169:
            	{
            		{
            		    int LA142_33 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 33;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 135:
            	{
            		{
            		    int LA142_34 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 34;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 128:
            	{
            		{
            		    int LA142_35 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 35;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case 172:
            	{
            		{
            		    int LA142_36 = LA(2);
            		    if ( ((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))))
            		    {
            		        alt142=1;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt142=2;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 142;
            		        EXCEPTION->state        = 36;


            		        goto ruletemplate_argumentEx;

            		    }
            		}
            	}
                break;
            case AMPERSAND:
            case CharLiteral:
            case DECIMALINT:
            case FLOATONE:
            case FLOATTWO:
            case HEXADECIMALINT:
            case LPAREN:
            case MINUS:
            case MINUSMINUS:
            case NOT:
            case OCTALINT:
            case OPERATOR:
            case PLUS:
            case PLUSPLUS:
            case STAR:
            case StringLiteral:
            case TILDE:
            case WCharLiteral:
            case WStringLiteral:
            case 87:
            case 123:
            case 126:
            case 129:
            case 134:
            case 145:
            case 151:
            case 155:
            case 157:
            case 161:
            case 163:
            case 166:
            	{
            		alt142=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 142;
                EXCEPTION->state        = 0;


                goto ruletemplate_argumentEx;

            }

            switch (alt142)
            {
        	case 1:
        	    // CPP_grammar_.g:1612:3: {...}? type_id
        	    {
        	        if ( !((( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) ))) )
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                return ;
        	            }

        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
        	                EXCEPTION->message      = (void *)"( !(LA(1)==SCOPE||LA(1)==ID) || qualifiedItemIsOneOf(qiType|qiCtor,0) )";
        	                EXCEPTION->ruleName	 = (void *)"template_argument";


        	        }

        	        FOLLOWPUSH(FOLLOW_type_id_in_template_argument6154);
        	        type_id(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletemplate_argumentEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1615:3: shift_expression
        	    {
        	        FOLLOWPUSH(FOLLOW_shift_expression_in_template_argument6162);
        	        shift_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletemplate_argumentEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruletemplate_argumentEx; /* Prevent compiler warnings */
    ruletemplate_argumentEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end template_argument */

/**
 * $ANTLR start statement_list
 * CPP_grammar_.g:1627:1: statement_list : ( statement )+ ;
 */
static void
statement_list(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1628:2: ( ( statement )+ )
        // CPP_grammar_.g:1629:3: ( statement )+
        {
            // CPP_grammar_.g:1629:3: ( statement )+
            {
                int cnt143=0;

                for (;;)
                {
                    int alt143=2;
            	switch ( LA(1) )
            	{
            	case AMPERSAND:
            	case CharLiteral:
            	case DECIMALINT:
            	case FLOATONE:
            	case FLOATTWO:
            	case HEXADECIMALINT:
            	case ID:
            	case LCURLY:
            	case LPAREN:
            	case MINUS:
            	case MINUSMINUS:
            	case NOT:
            	case OCTALINT:
            	case OPERATOR:
            	case PLUS:
            	case PLUSPLUS:
            	case SCOPE:
            	case SEMICOLON:
            	case STAR:
            	case StringLiteral:
            	case TILDE:
            	case WCharLiteral:
            	case WStringLiteral:
            	case 87:
            	case 88:
            	case 89:
            	case 90:
            	case 91:
            	case 92:
            	case 93:
            	case 94:
            	case 95:
            	case 96:
            	case 97:
            	case 98:
            	case 99:
            	case 100:
            	case 101:
            	case 102:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 107:
            	case 108:
            	case 109:
            	case 110:
            	case 111:
            	case 112:
            	case 113:
            	case 114:
            	case 115:
            	case 116:
            	case 117:
            	case 118:
            	case 120:
            	case 121:
            	case 122:
            	case 123:
            	case 124:
            	case 125:
            	case 126:
            	case 127:
            	case 128:
            	case 129:
            	case 131:
            	case 132:
            	case 133:
            	case 134:
            	case 135:
            	case 136:
            	case 137:
            	case 138:
            	case 139:
            	case 140:
            	case 141:
            	case 142:
            	case 143:
            	case 144:
            	case 145:
            	case 146:
            	case 147:
            	case 148:
            	case 149:
            	case 150:
            	case 151:
            	case 152:
            	case 153:
            	case 154:
            	case 155:
            	case 156:
            	case 157:
            	case 158:
            	case 159:
            	case 160:
            	case 161:
            	case 162:
            	case 163:
            	case 164:
            	case 165:
            	case 166:
            	case 167:
            	case 168:
            	case 169:
            	case 170:
            	case 171:
            	case 172:
            	case 173:
            	case 174:
            	case 175:
            		{
            			alt143=1;
            		}
            	    break;

            	}

            	switch (alt143)
            	{
            	    case 1:
            	        // CPP_grammar_.g:1629:4: statement
            	        {
            	            FOLLOWPUSH(FOLLOW_statement_in_statement_list6187);
            	            statement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulestatement_listEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt143 >= 1 )
            		{
            		    goto loop143;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulestatement_listEx;
            	}
            	cnt143++;
                }
                loop143: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulestatement_listEx; /* Prevent compiler warnings */
    rulestatement_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end statement_list */

/**
 * $ANTLR start statement
 * CPP_grammar_.g:<invalid or missing tree structure>
 */
static void
statement(pCPP_grammar_Parser ctx)
{

    		FunctionSpecifier fs = fsInvalid;	// inline,virtual,explicit
    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    /* Initialize rule variables
     */
    ctx->pCPP_grammar_Parser_statementTop = pCPP_grammar_Parser_statementPush(ctx);

    		lineNo = 0;
    		lineNo = LT(1)->line;
    		//FunctionSpecifier fs = fsInvalid;	// inline,virtual,explicit
    		(SCOPE_TOP(statement))->pQualifiedIdBuf= bufQualifiedIdScope; 
    	
    {
        // CPP_grammar_.g:<invalid or missing tree structure>
        // CPP_grammar_.g:<invalid or missing tree structure>
        {
            // CPP_grammar_.g:<invalid or missing tree structure>
            {
                int alt144=16;
                {
                    int LA144_0 = LA(1);
                    if ( (LA144_0 == 165))
                    {
                        {
                            int LA144_1 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 1;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 137))
                    {
                        {
                            int LA144_2 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 2;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 115))
                    {
                        {
                            int LA144_3 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 3;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 150))
                    {
                        {
                            int LA144_4 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 4;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 156))
                    {
                        {
                            int LA144_5 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 5;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 133))
                    {
                        {
                            int LA144_6 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 6;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 143))
                    {
                        {
                            int LA144_7 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 7;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 122))
                    {
                        {
                            int LA144_8 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 8;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 173))
                    {
                        {
                            int LA144_9 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 9;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 140))
                    {
                        {
                            int LA144_10 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 10;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 171))
                    {
                        {
                            int LA144_11 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 11;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 132))
                    {
                        {
                            int LA144_12 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 12;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 89 || LA144_0 == 102))
                    {
                        {
                            int LA144_13 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 13;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == SCOPE))
                    {
                        {
                            int LA144_14 = LA(2);
                            if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred67_CPP_grammar_(ctx)) )))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 14;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == ID))
                    {
                        {
                            int LA144_15 = LA(2);
                            if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred67_CPP_grammar_(ctx)) )))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (synpred71_CPP_grammar_(ctx)))
                            {
                                alt144=4;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 15;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 167))
                    {
                        {
                            int LA144_16 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 16;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 131))
                    {
                        {
                            int LA144_17 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 17;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 121))
                    {
                        {
                            int LA144_18 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 18;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 158))
                    {
                        {
                            int LA144_19 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 19;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 168))
                    {
                        {
                            int LA144_20 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 20;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 120))
                    {
                        {
                            int LA144_21 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 21;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 174))
                    {
                        {
                            int LA144_22 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 22;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 116))
                    {
                        {
                            int LA144_23 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 23;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 153))
                    {
                        {
                            int LA144_24 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 24;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 141))
                    {
                        {
                            int LA144_25 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 25;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 95 || LA144_0 == 108))
                    {
                        {
                            int LA144_26 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 26;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 92 || LA144_0 == 105))
                    {
                        {
                            int LA144_27 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 27;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 93 || LA144_0 == 106))
                    {
                        {
                            int LA144_28 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 28;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 94 || LA144_0 == 107))
                    {
                        {
                            int LA144_29 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 29;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 100 || LA144_0 == 112))
                    {
                        {
                            int LA144_30 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 30;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 142))
                    {
                        {
                            int LA144_31 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 31;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 154))
                    {
                        {
                            int LA144_32 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 32;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 169))
                    {
                        {
                            int LA144_33 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 33;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 135))
                    {
                        {
                            int LA144_34 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 34;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 128))
                    {
                        {
                            int LA144_35 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 35;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 172))
                    {
                        {
                            int LA144_36 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 36;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (synpred67_CPP_grammar_(ctx)) && (LA144_0 == 144))
                    {
                        alt144=1;
                    }
                    else if ( (LA144_0 == 170))
                    {
                        {
                            int LA144_38 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 38;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 160))
                    {
                        {
                            int LA144_39 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 39;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == TILDE))
                    {
                        {
                            int LA144_40 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 40;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == AMPERSAND))
                    {
                        {
                            int LA144_41 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 41;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 88 || LA144_0 == 101))
                    {
                        {
                            int LA144_42 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 42;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 97 || LA144_0 == 109))
                    {
                        {
                            int LA144_43 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 43;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 90 || LA144_0 == 103))
                    {
                        {
                            int LA144_44 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 44;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 96))
                    {
                        {
                            int LA144_45 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 45;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 98 || LA144_0 == 110 || LA144_0 == 146))
                    {
                        {
                            int LA144_46 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 46;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 99 || LA144_0 == 111))
                    {
                        {
                            int LA144_47 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 47;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == STAR))
                    {
                        {
                            int LA144_48 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 48;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == LPAREN))
                    {
                        {
                            int LA144_49 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 49;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == OPERATOR))
                    {
                        {
                            int LA144_50 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=7;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 50;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 91 || LA144_0 == 104))
                    {
                        {
                            int LA144_51 = LA(2);
                            if ( (synpred67_CPP_grammar_(ctx)))
                            {
                                alt144=1;
                            }
                            else if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 51;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (((LA144_0 >= 147) && (LA144_0 <= 149))))
                    {
                        {
                            int LA144_52 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 52;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == SEMICOLON))
                    {
                        {
                            int LA144_53 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=12;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 53;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 114))
                    {
                        {
                            int LA144_54 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=15;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 54;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 113))
                    {
                        {
                            int LA144_55 = LA(2);
                            if ( (synpred68_CPP_grammar_(ctx)))
                            {
                                alt144=2;
                            }
                            else if ( (synpred70_CPP_grammar_(ctx)))
                            {
                                alt144=3;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt144=16;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    pCPP_grammar_Parser_statementPop(ctx);

                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 144;
                                EXCEPTION->state        = 55;


                                goto rulestatementEx;

                            }
                        }
                    }
                    else if ( (LA144_0 == 118))
                    {
                        alt144=5;
                    }
                    else if ( (LA144_0 == 125))
                    {
                        alt144=6;
                    }
                    else if ( (LA144_0 == CharLiteral || LA144_0 == DECIMALINT || ((LA144_0 >= FLOATONE) && (LA144_0 <= FLOATTWO)) || LA144_0 == HEXADECIMALINT || LA144_0 == MINUS || LA144_0 == MINUSMINUS || LA144_0 == NOT || LA144_0 == OCTALINT || LA144_0 == PLUS || LA144_0 == PLUSPLUS || LA144_0 == StringLiteral || ((LA144_0 >= WCharLiteral) && (LA144_0 <= WStringLiteral)) || LA144_0 == 87 || LA144_0 == 123 || LA144_0 == 126 || LA144_0 == 129 || LA144_0 == 134 || LA144_0 == 145 || LA144_0 == 151 || LA144_0 == 155 || LA144_0 == 157 || LA144_0 == 161 || LA144_0 == 163 || LA144_0 == 166))
                    {
                        alt144=7;
                    }
                    else if ( (LA144_0 == LCURLY))
                    {
                        alt144=8;
                    }
                    else if ( (LA144_0 == 139 || LA144_0 == 159))
                    {
                        alt144=9;
                    }
                    else if ( (LA144_0 == 127 || LA144_0 == 136 || LA144_0 == 175))
                    {
                        alt144=10;
                    }
                    else if ( (LA144_0 == 117 || LA144_0 == 124 || LA144_0 == 138 || LA144_0 == 152))
                    {
                        alt144=11;
                    }
                    else if ( (LA144_0 == 164))
                    {
                        alt144=13;
                    }
                    else if ( (LA144_0 == 162))
                    {
                        alt144=14;
                    }
                    else
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            pCPP_grammar_Parser_statementPop(ctx);

                            return ;
                        }


                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 144;
                        EXCEPTION->state        = 0;


                        goto rulestatementEx;

                    }
                }
                switch (alt144)
                {
            	case 1:
            	    // CPP_grammar_.g:1649:5: ( 'namespace' | 'using' )=> block_declaration
            	    {
            	        FOLLOWPUSH(FOLLOW_block_declaration_in_statement6234);
            	        block_declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1651:5: ( ( 'typedef' )? class_specifier ( qualified_id[$statement::pQualifiedIdBuf] )? LCURLY )=> member_declaration
            	    {
            	        FOLLOWPUSH(FOLLOW_member_declaration_in_statement6262);
            	        member_declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:<invalid or missing tree structure>
            	    {
            	        FOLLOWPUSH(FOLLOW_member_declaration_in_statement6289);
            	        member_declaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // CPP_grammar_.g:1655:6: ( labeled_statement )=> labeled_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_labeled_statement_in_statement6306);
            	        labeled_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // CPP_grammar_.g:1657:6: case_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_case_statement_in_statement6313);
            	        case_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 6:
            	    // CPP_grammar_.g:1658:6: default_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_default_statement_in_statement6320);
            	        default_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 7:
            	    // CPP_grammar_.g:1659:6: expression SEMICOLON
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_statement6327);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement6329);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 8:
            	    // CPP_grammar_.g:1660:6: compound_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_compound_statement_in_statement6338);
            	        compound_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 9:
            	    // CPP_grammar_.g:1661:6: selection_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_selection_statement_in_statement6345);
            	        selection_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 10:
            	    // CPP_grammar_.g:1662:6: iteration_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_iteration_statement_in_statement6352);
            	        iteration_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 11:
            	    // CPP_grammar_.g:1663:6: jump_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_jump_statement_in_statement6359);
            	        jump_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 12:
            	    // CPP_grammar_.g:1664:6: SEMICOLON
            	    {
            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement6366);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 13:
            	    // CPP_grammar_.g:1665:6: try_block
            	    {
            	        FOLLOWPUSH(FOLLOW_try_block_in_statement6375);
            	        try_block(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 14:
            	    // CPP_grammar_.g:1666:6: throw_statement
            	    {
            	        FOLLOWPUSH(FOLLOW_throw_statement_in_statement6382);
            	        throw_statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	    }
            	    break;
            	case 15:
            	    // CPP_grammar_.g:1669:5: 'antlrTrace_on'
            	    {
            	         MATCHT(114, &FOLLOW_114_in_statement6396);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            antlrTrace(TRUE);
            	        }


            	    }
            	    break;
            	case 16:
            	    // CPP_grammar_.g:1671:5: 'antlrTrace_off'
            	    {
            	         MATCHT(113, &FOLLOW_113_in_statement6408);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            pCPP_grammar_Parser_statementPop(ctx);

            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            antlrTrace(FALSE);
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    pCPP_grammar_Parser_statementPop(ctx);

    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start block_declaration
 * CPP_grammar_.g:1677:1: block_declaration : ( simple_declaration | namespace_alias_definition | using_statement );
 */
static void
block_declaration(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1678:2: ( simple_declaration | namespace_alias_definition | using_statement )

            ANTLR3_UINT32 alt145;

            alt145=3;

            switch ( LA(1) )
            {
            case ID:
            case SCOPE:
            case 89:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 100:
            case 102:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 112:
            case 115:
            case 116:
            case 120:
            case 121:
            case 122:
            case 128:
            case 131:
            case 132:
            case 133:
            case 135:
            case 137:
            case 140:
            case 141:
            case 142:
            case 143:
            case 150:
            case 153:
            case 154:
            case 156:
            case 158:
            case 165:
            case 167:
            case 168:
            case 169:
            case 171:
            case 172:
            case 173:
            case 174:
            	{
            		alt145=1;
            	}
                break;
            case 144:
            	{
            		alt145=2;
            	}
                break;
            case 170:
            	{
            		alt145=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 145;
                EXCEPTION->state        = 0;


                goto ruleblock_declarationEx;

            }

            switch (alt145)
            {
        	case 1:
        	    // CPP_grammar_.g:1678:4: simple_declaration
        	    {
        	        FOLLOWPUSH(FOLLOW_simple_declaration_in_block_declaration6428);
        	        simple_declaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleblock_declarationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1679:4: namespace_alias_definition
        	    {
        	        FOLLOWPUSH(FOLLOW_namespace_alias_definition_in_block_declaration6433);
        	        namespace_alias_definition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleblock_declarationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:1680:4: using_statement
        	    {
        	        FOLLOWPUSH(FOLLOW_using_statement_in_block_declaration6438);
        	        using_statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleblock_declarationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleblock_declarationEx; /* Prevent compiler warnings */
    ruleblock_declarationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end block_declaration */

/**
 * $ANTLR start simple_declaration
 * CPP_grammar_.g:1684:1: simple_declaration : declaration_specifiers ( init_declarator_list )? SEMICOLON ;
 */
static void
simple_declaration(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1685:2: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )
        // CPP_grammar_.g:1686:3: declaration_specifiers ( init_declarator_list )? SEMICOLON
        {
            FOLLOWPUSH(FOLLOW_declaration_specifiers_in_simple_declaration6452);
            declaration_specifiers(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesimple_declarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1686:26: ( init_declarator_list )?
            {
                int alt146=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    case COLON:
                    case ID:
                    case LPAREN:
                    case OPERATOR:
                    case SCOPE:
                    case STAR:
                    case TILDE:
                    case 88:
                    case 90:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 101:
                    case 103:
                    case 109:
                    case 110:
                    case 111:
                    case 146:
                    	{
                    		alt146=1;
                    	}
                        break;
                }

                switch (alt146)
                {
            	case 1:
            	    // CPP_grammar_.g:1686:27: init_declarator_list
            	    {
            	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_simple_declaration6455);
            	        init_declarator_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesimple_declarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_simple_declaration6459);
            if  (HASEXCEPTION())
            {
                goto rulesimple_declarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                end_of_stmt();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesimple_declarationEx; /* Prevent compiler warnings */
    rulesimple_declarationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end simple_declaration */

/**
 * $ANTLR start labeled_statement
 * CPP_grammar_.g:1690:1: labeled_statement : ID COLON statement ;
 */
static void
labeled_statement(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1691:2: ( ID COLON statement )
        // CPP_grammar_.g:1692:3: ID COLON statement
        {
             MATCHT(ID, &FOLLOW_ID_in_labeled_statement6476);
            if  (HASEXCEPTION())
            {
                goto rulelabeled_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(COLON, &FOLLOW_COLON_in_labeled_statement6478);
            if  (HASEXCEPTION())
            {
                goto rulelabeled_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_statement_in_labeled_statement6480);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabeled_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelabeled_statementEx; /* Prevent compiler warnings */
    rulelabeled_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end labeled_statement */

/**
 * $ANTLR start case_statement
 * CPP_grammar_.g:1696:1: case_statement : 'case' constant_expression COLON statement ;
 */
static void
case_statement(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1697:2: ( 'case' constant_expression COLON statement )
        // CPP_grammar_.g:1697:4: 'case' constant_expression COLON statement
        {
             MATCHT(118, &FOLLOW_118_in_case_statement6492);
            if  (HASEXCEPTION())
            {
                goto rulecase_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_constant_expression_in_case_statement6496);
            constant_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecase_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(COLON, &FOLLOW_COLON_in_case_statement6498);
            if  (HASEXCEPTION())
            {
                goto rulecase_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_statement_in_case_statement6500);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecase_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecase_statementEx; /* Prevent compiler warnings */
    rulecase_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end case_statement */

/**
 * $ANTLR start default_statement
 * CPP_grammar_.g:1702:1: default_statement : 'default' COLON statement ;
 */
static void
default_statement(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1703:2: ( 'default' COLON statement )
        // CPP_grammar_.g:1704:3: 'default' COLON statement
        {
             MATCHT(125, &FOLLOW_125_in_default_statement6515);
            if  (HASEXCEPTION())
            {
                goto ruledefault_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(COLON, &FOLLOW_COLON_in_default_statement6517);
            if  (HASEXCEPTION())
            {
                goto ruledefault_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_statement_in_default_statement6519);
            statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledefault_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledefault_statementEx; /* Prevent compiler warnings */
    ruledefault_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end default_statement */

/**
 * $ANTLR start compound_statement
 * CPP_grammar_.g:1708:1: compound_statement : LCURLY ( statement_list )? RCURLY ;
 */
static void
compound_statement(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1709:2: ( LCURLY ( statement_list )? RCURLY )
        // CPP_grammar_.g:1710:3: LCURLY ( statement_list )? RCURLY
        {
             MATCHT(LCURLY, &FOLLOW_LCURLY_in_compound_statement6534);
            if  (HASEXCEPTION())
            {
                goto rulecompound_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                end_of_stmt();
                		 enterNewLocalScope();
                		
            }


            // CPP_grammar_.g:1714:3: ( statement_list )?
            {
                int alt147=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    case CharLiteral:
                    case DECIMALINT:
                    case FLOATONE:
                    case FLOATTWO:
                    case HEXADECIMALINT:
                    case ID:
                    case LCURLY:
                    case LPAREN:
                    case MINUS:
                    case MINUSMINUS:
                    case NOT:
                    case OCTALINT:
                    case OPERATOR:
                    case PLUS:
                    case PLUSPLUS:
                    case SCOPE:
                    case SEMICOLON:
                    case STAR:
                    case StringLiteral:
                    case TILDE:
                    case WCharLiteral:
                    case WStringLiteral:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    	{
                    		alt147=1;
                    	}
                        break;
                }

                switch (alt147)
                {
            	case 1:
            	    // CPP_grammar_.g:1714:4: statement_list
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_list_in_compound_statement6544);
            	        statement_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecompound_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(RCURLY, &FOLLOW_RCURLY_in_compound_statement6550);
            if  (HASEXCEPTION())
            {
                goto rulecompound_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                exitLocalScope();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecompound_statementEx; /* Prevent compiler warnings */
    rulecompound_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end compound_statement */

/**
 * $ANTLR start selection_statement
 * CPP_grammar_.g:1723:1: selection_statement : ( 'if' LPAREN condition RPAREN st1= statement ( 'else' st2= statement )? | 'switch' LPAREN condition RPAREN statement );
 */
static void
selection_statement(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1724:2: ( 'if' LPAREN condition RPAREN st1= statement ( 'else' st2= statement )? | 'switch' LPAREN condition RPAREN statement )

            ANTLR3_UINT32 alt149;

            alt149=2;

            switch ( LA(1) )
            {
            case 139:
            	{
            		alt149=1;
            	}
                break;
            case 159:
            	{
            		alt149=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 149;
                EXCEPTION->state        = 0;


                goto ruleselection_statementEx;

            }

            switch (alt149)
            {
        	case 1:
        	    // CPP_grammar_.g:1725:3: 'if' LPAREN condition RPAREN st1= statement ( 'else' st2= statement )?
        	    {
        	         MATCHT(139, &FOLLOW_139_in_selection_statement6573);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_selection_statement6575);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            enterNewLocalScope();
        	        }


        	        FOLLOWPUSH(FOLLOW_condition_in_selection_statement6584);
        	        condition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_selection_statement6586);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_statement_in_selection_statement6594);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:1729:3: ( 'else' st2= statement )?
        	        {
        	            int alt148=2;
        	            switch ( LA(1) )
        	            {
        	                case 130:
        	                	{
        	                		alt148=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt148)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1730:4: 'else' st2= statement
        	        	    {
        	        	         MATCHT(130, &FOLLOW_130_in_selection_statement6603);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselection_statementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_statement_in_selection_statement6609);
        	        	        statement(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleselection_statementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( BACKTRACKING==0 )
        	        {
        	            exitLocalScope();
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1733:3: 'switch' LPAREN condition RPAREN statement
        	    {
        	         MATCHT(159, &FOLLOW_159_in_selection_statement6623);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_selection_statement6625);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            enterNewLocalScope();
        	        }


        	        FOLLOWPUSH(FOLLOW_condition_in_selection_statement6633);
        	        condition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_selection_statement6635);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_statement_in_selection_statement6637);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            exitLocalScope();
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleselection_statementEx; /* Prevent compiler warnings */
    ruleselection_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end selection_statement */

/**
 * $ANTLR start iteration_statement
 * CPP_grammar_.g:1740:1: iteration_statement : ( 'while' LPAREN condition RPAREN statement | 'do' statement 'while' LPAREN expression RPAREN SEMICOLON | 'for' LPAREN ( ( declaration )=> declaration | ( expression )? SEMICOLON ) ( condition )? SEMICOLON ( expression )? RPAREN statement );
 */
static void
iteration_statement(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:1741:2: ( 'while' LPAREN condition RPAREN statement | 'do' statement 'while' LPAREN expression RPAREN SEMICOLON | 'for' LPAREN ( ( declaration )=> declaration | ( expression )? SEMICOLON ) ( condition )? SEMICOLON ( expression )? RPAREN statement )

            ANTLR3_UINT32 alt154;

            alt154=3;

            switch ( LA(1) )
            {
            case 175:
            	{
            		alt154=1;
            	}
                break;
            case 127:
            	{
            		alt154=2;
            	}
                break;
            case 136:
            	{
            		alt154=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 154;
                EXCEPTION->state        = 0;


                goto ruleiteration_statementEx;

            }

            switch (alt154)
            {
        	case 1:
        	    // CPP_grammar_.g:1742:3: 'while' LPAREN condition RPAREN statement
        	    {
        	         MATCHT(175, &FOLLOW_175_in_iteration_statement6656);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_iteration_statement6658);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            enterNewLocalScope();
        	        }


        	        FOLLOWPUSH(FOLLOW_condition_in_iteration_statement6666);
        	        condition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_iteration_statement6668);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_statement_in_iteration_statement6673);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            exitLocalScope();
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1748:3: 'do' statement 'while' LPAREN expression RPAREN SEMICOLON
        	    {
        	         MATCHT(127, &FOLLOW_127_in_iteration_statement6687);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            enterNewLocalScope();
        	        }


        	        FOLLOWPUSH(FOLLOW_statement_in_iteration_statement6696);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(175, &FOLLOW_175_in_iteration_statement6698);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_iteration_statement6702);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_iteration_statement6704);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_iteration_statement6706);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            exitLocalScope();
        	        }


        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_iteration_statement6715);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            end_of_stmt();
        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:1755:3: 'for' LPAREN ( ( declaration )=> declaration | ( expression )? SEMICOLON ) ( condition )? SEMICOLON ( expression )? RPAREN statement
        	    {
        	         MATCHT(136, &FOLLOW_136_in_iteration_statement6726);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_iteration_statement6728);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            enterNewLocalScope();
        	        }


        	        // CPP_grammar_.g:1757:3: ( ( declaration )=> declaration | ( expression )? SEMICOLON )
        	        {
        	            int alt151=2;
        	            {
        	                int LA151_0 = LA(1);
        	                if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 133))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 165))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 137))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 115))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 150))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 156))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 143))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 122))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 173))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 91 || LA151_0 == 104 || LA151_0 == 140))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 171))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 132))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 89 || LA151_0 == 102))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (LA151_0 == SCOPE))
        	                {
        	                    {
        	                        int LA151_14 = LA(2);
        	                        if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred72_CPP_grammar_(ctx)) )))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 14;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == ID))
        	                {
        	                    {
        	                        int LA151_15 = LA(2);
        	                        if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred72_CPP_grammar_(ctx)) )))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 15;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 167))
        	                {
        	                    {
        	                        int LA151_16 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 16;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 131))
        	                {
        	                    {
        	                        int LA151_17 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 17;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 121))
        	                {
        	                    {
        	                        int LA151_18 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 18;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 158))
        	                {
        	                    {
        	                        int LA151_19 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 19;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 168))
        	                {
        	                    {
        	                        int LA151_20 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 20;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 120))
        	                {
        	                    {
        	                        int LA151_21 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 21;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 174))
        	                {
        	                    {
        	                        int LA151_22 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 22;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 116))
        	                {
        	                    {
        	                        int LA151_23 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 23;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 153))
        	                {
        	                    {
        	                        int LA151_24 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 24;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 141))
        	                {
        	                    {
        	                        int LA151_25 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 25;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 95 || LA151_0 == 108))
        	                {
        	                    {
        	                        int LA151_26 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 26;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 92 || LA151_0 == 105))
        	                {
        	                    {
        	                        int LA151_27 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 27;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 93 || LA151_0 == 106))
        	                {
        	                    {
        	                        int LA151_28 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 28;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 94 || LA151_0 == 107))
        	                {
        	                    {
        	                        int LA151_29 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 29;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 100 || LA151_0 == 112))
        	                {
        	                    {
        	                        int LA151_30 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 30;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 142))
        	                {
        	                    {
        	                        int LA151_31 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 31;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 154))
        	                {
        	                    {
        	                        int LA151_32 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 32;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 169))
        	                {
        	                    {
        	                        int LA151_33 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 33;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 135))
        	                {
        	                    {
        	                        int LA151_34 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 34;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 128))
        	                {
        	                    {
        	                        int LA151_35 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 35;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA151_0 == 172))
        	                {
        	                    {
        	                        int LA151_36 = LA(2);
        	                        if ( (synpred72_CPP_grammar_(ctx)))
        	                        {
        	                            alt151=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt151=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 151;
        	                            EXCEPTION->state        = 36;


        	                            goto ruleiteration_statementEx;

        	                        }
        	                    }
        	                }
        	                else if ( (synpred72_CPP_grammar_(ctx)) && (LA151_0 == 170))
        	                {
        	                    alt151=1;
        	                }
        	                else if ( (LA151_0 == AMPERSAND || LA151_0 == CharLiteral || LA151_0 == DECIMALINT || ((LA151_0 >= FLOATONE) && (LA151_0 <= FLOATTWO)) || LA151_0 == HEXADECIMALINT || LA151_0 == LPAREN || LA151_0 == MINUS || LA151_0 == MINUSMINUS || LA151_0 == NOT || ((LA151_0 >= OCTALINT) && (LA151_0 <= OPERATOR)) || LA151_0 == PLUS || LA151_0 == PLUSPLUS || LA151_0 == SEMICOLON || LA151_0 == STAR || ((LA151_0 >= StringLiteral) && (LA151_0 <= TILDE)) || ((LA151_0 >= WCharLiteral) && (LA151_0 <= WStringLiteral)) || LA151_0 == 87 || LA151_0 == 123 || LA151_0 == 126 || LA151_0 == 129 || LA151_0 == 134 || LA151_0 == 145 || LA151_0 == 151 || LA151_0 == 155 || LA151_0 == 157 || LA151_0 == 161 || LA151_0 == 163 || LA151_0 == 166))
        	                {
        	                    alt151=2;
        	                }
        	                else
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE;
        	                        return ;
        	                    }


        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 151;
        	                    EXCEPTION->state        = 0;


        	                    goto ruleiteration_statementEx;

        	                }
        	            }
        	            switch (alt151)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1757:5: ( declaration )=> declaration
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_declaration_in_iteration_statement6743);
        	        	        declaration(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleiteration_statementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CPP_grammar_.g:1758:5: ( expression )? SEMICOLON
        	        	    {
        	        	        // CPP_grammar_.g:1758:5: ( expression )?
        	        	        {
        	        	            int alt150=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case AMPERSAND:
        	        	                case CharLiteral:
        	        	                case DECIMALINT:
        	        	                case FLOATONE:
        	        	                case FLOATTWO:
        	        	                case HEXADECIMALINT:
        	        	                case ID:
        	        	                case LPAREN:
        	        	                case MINUS:
        	        	                case MINUSMINUS:
        	        	                case NOT:
        	        	                case OCTALINT:
        	        	                case OPERATOR:
        	        	                case PLUS:
        	        	                case PLUSPLUS:
        	        	                case SCOPE:
        	        	                case STAR:
        	        	                case StringLiteral:
        	        	                case TILDE:
        	        	                case WCharLiteral:
        	        	                case WStringLiteral:
        	        	                case 87:
        	        	                case 92:
        	        	                case 93:
        	        	                case 94:
        	        	                case 95:
        	        	                case 100:
        	        	                case 105:
        	        	                case 106:
        	        	                case 107:
        	        	                case 108:
        	        	                case 112:
        	        	                case 116:
        	        	                case 120:
        	        	                case 121:
        	        	                case 123:
        	        	                case 126:
        	        	                case 128:
        	        	                case 129:
        	        	                case 131:
        	        	                case 134:
        	        	                case 135:
        	        	                case 141:
        	        	                case 142:
        	        	                case 145:
        	        	                case 151:
        	        	                case 153:
        	        	                case 154:
        	        	                case 155:
        	        	                case 157:
        	        	                case 158:
        	        	                case 161:
        	        	                case 163:
        	        	                case 166:
        	        	                case 167:
        	        	                case 168:
        	        	                case 169:
        	        	                case 172:
        	        	                case 174:
        	        	                	{
        	        	                		alt150=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt150)
        	        	            {
        	        	        	case 1:
        	        	        	    // CPP_grammar_.g:1758:6: expression
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_expression_in_iteration_statement6751);
        	        	        	        expression(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleiteration_statementEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return ;
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_iteration_statement6755);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleiteration_statementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        if ( BACKTRACKING==0 )
        	        	        {
        	        	            end_of_stmt();
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // CPP_grammar_.g:1760:3: ( condition )?
        	        {
        	            int alt152=2;
        	            switch ( LA(1) )
        	            {
        	                case AMPERSAND:
        	                case CharLiteral:
        	                case DECIMALINT:
        	                case FLOATONE:
        	                case FLOATTWO:
        	                case HEXADECIMALINT:
        	                case ID:
        	                case LPAREN:
        	                case MINUS:
        	                case MINUSMINUS:
        	                case NOT:
        	                case OCTALINT:
        	                case OPERATOR:
        	                case PLUS:
        	                case PLUSPLUS:
        	                case SCOPE:
        	                case STAR:
        	                case StringLiteral:
        	                case TILDE:
        	                case WCharLiteral:
        	                case WStringLiteral:
        	                case 87:
        	                case 89:
        	                case 91:
        	                case 92:
        	                case 93:
        	                case 94:
        	                case 95:
        	                case 100:
        	                case 102:
        	                case 104:
        	                case 105:
        	                case 106:
        	                case 107:
        	                case 108:
        	                case 112:
        	                case 115:
        	                case 116:
        	                case 120:
        	                case 121:
        	                case 122:
        	                case 123:
        	                case 126:
        	                case 128:
        	                case 129:
        	                case 131:
        	                case 132:
        	                case 133:
        	                case 134:
        	                case 135:
        	                case 137:
        	                case 140:
        	                case 141:
        	                case 142:
        	                case 143:
        	                case 145:
        	                case 150:
        	                case 151:
        	                case 153:
        	                case 154:
        	                case 155:
        	                case 156:
        	                case 157:
        	                case 158:
        	                case 161:
        	                case 163:
        	                case 165:
        	                case 166:
        	                case 167:
        	                case 168:
        	                case 169:
        	                case 171:
        	                case 172:
        	                case 173:
        	                case 174:
        	                	{
        	                		alt152=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt152)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1760:4: condition
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_condition_in_iteration_statement6766);
        	        	        condition(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleiteration_statementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_iteration_statement6770);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            end_of_stmt();
        	        }


        	        // CPP_grammar_.g:1761:3: ( expression )?
        	        {
        	            int alt153=2;
        	            switch ( LA(1) )
        	            {
        	                case AMPERSAND:
        	                case CharLiteral:
        	                case DECIMALINT:
        	                case FLOATONE:
        	                case FLOATTWO:
        	                case HEXADECIMALINT:
        	                case ID:
        	                case LPAREN:
        	                case MINUS:
        	                case MINUSMINUS:
        	                case NOT:
        	                case OCTALINT:
        	                case OPERATOR:
        	                case PLUS:
        	                case PLUSPLUS:
        	                case SCOPE:
        	                case STAR:
        	                case StringLiteral:
        	                case TILDE:
        	                case WCharLiteral:
        	                case WStringLiteral:
        	                case 87:
        	                case 92:
        	                case 93:
        	                case 94:
        	                case 95:
        	                case 100:
        	                case 105:
        	                case 106:
        	                case 107:
        	                case 108:
        	                case 112:
        	                case 116:
        	                case 120:
        	                case 121:
        	                case 123:
        	                case 126:
        	                case 128:
        	                case 129:
        	                case 131:
        	                case 134:
        	                case 135:
        	                case 141:
        	                case 142:
        	                case 145:
        	                case 151:
        	                case 153:
        	                case 154:
        	                case 155:
        	                case 157:
        	                case 158:
        	                case 161:
        	                case 163:
        	                case 166:
        	                case 167:
        	                case 168:
        	                case 169:
        	                case 172:
        	                case 174:
        	                	{
        	                		alt153=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt153)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:1761:4: expression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_iteration_statement6777);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleiteration_statementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_iteration_statement6783);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_statement_in_iteration_statement6785);
        	        statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            exitLocalScope();
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleiteration_statementEx; /* Prevent compiler warnings */
    ruleiteration_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end iteration_statement */

/**
 * $ANTLR start condition
 * CPP_grammar_.g:1767:1: condition : ( ( declaration_specifiers declarator ASSIGNEQUAL )=> declaration_specifiers declarator ASSIGNEQUAL remainder_expression | expression ) ;
 */
static void
condition(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1768:2: ( ( ( declaration_specifiers declarator ASSIGNEQUAL )=> declaration_specifiers declarator ASSIGNEQUAL remainder_expression | expression ) )
        // CPP_grammar_.g:1769:3: ( ( declaration_specifiers declarator ASSIGNEQUAL )=> declaration_specifiers declarator ASSIGNEQUAL remainder_expression | expression )
        {
            // CPP_grammar_.g:1769:3: ( ( declaration_specifiers declarator ASSIGNEQUAL )=> declaration_specifiers declarator ASSIGNEQUAL remainder_expression | expression )
            {
                int alt155=2;
                {
                    int LA155_0 = LA(1);
                    if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 165))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 137))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 115))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 150))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 156))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 133))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 143))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 122))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 173))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 91 || LA155_0 == 104 || LA155_0 == 140))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 171))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 132))
                    {
                        alt155=1;
                    }
                    else if ( (synpred73_CPP_grammar_(ctx)) && (LA155_0 == 89 || LA155_0 == 102))
                    {
                        alt155=1;
                    }
                    else if ( (LA155_0 == SCOPE))
                    {
                        {
                            int LA155_14 = LA(2);
                            if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred73_CPP_grammar_(ctx)) )))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 14;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == ID))
                    {
                        {
                            int LA155_15 = LA(2);
                            if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred73_CPP_grammar_(ctx)) )))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 15;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 167))
                    {
                        {
                            int LA155_16 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 16;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 131))
                    {
                        {
                            int LA155_17 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 17;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 121))
                    {
                        {
                            int LA155_18 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 18;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 158))
                    {
                        {
                            int LA155_19 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 19;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 168))
                    {
                        {
                            int LA155_20 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 20;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 120))
                    {
                        {
                            int LA155_21 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 21;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 174))
                    {
                        {
                            int LA155_22 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 22;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 116))
                    {
                        {
                            int LA155_23 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 23;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 153))
                    {
                        {
                            int LA155_24 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 24;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 141))
                    {
                        {
                            int LA155_25 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 25;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 95 || LA155_0 == 108))
                    {
                        {
                            int LA155_26 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 26;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 92 || LA155_0 == 105))
                    {
                        {
                            int LA155_27 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 27;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 93 || LA155_0 == 106))
                    {
                        {
                            int LA155_28 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 28;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 94 || LA155_0 == 107))
                    {
                        {
                            int LA155_29 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 29;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 100 || LA155_0 == 112))
                    {
                        {
                            int LA155_30 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 30;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 142))
                    {
                        {
                            int LA155_31 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 31;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 154))
                    {
                        {
                            int LA155_32 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 32;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 169))
                    {
                        {
                            int LA155_33 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 33;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 135))
                    {
                        {
                            int LA155_34 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 34;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 128))
                    {
                        {
                            int LA155_35 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 35;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == 172))
                    {
                        {
                            int LA155_36 = LA(2);
                            if ( (synpred73_CPP_grammar_(ctx)))
                            {
                                alt155=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt155=2;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 155;
                                EXCEPTION->state        = 36;


                                goto ruleconditionEx;

                            }
                        }
                    }
                    else if ( (LA155_0 == AMPERSAND || LA155_0 == CharLiteral || LA155_0 == DECIMALINT || ((LA155_0 >= FLOATONE) && (LA155_0 <= FLOATTWO)) || LA155_0 == HEXADECIMALINT || LA155_0 == LPAREN || LA155_0 == MINUS || LA155_0 == MINUSMINUS || LA155_0 == NOT || ((LA155_0 >= OCTALINT) && (LA155_0 <= OPERATOR)) || LA155_0 == PLUS || LA155_0 == PLUSPLUS || LA155_0 == STAR || ((LA155_0 >= StringLiteral) && (LA155_0 <= TILDE)) || ((LA155_0 >= WCharLiteral) && (LA155_0 <= WStringLiteral)) || LA155_0 == 87 || LA155_0 == 123 || LA155_0 == 126 || LA155_0 == 129 || LA155_0 == 134 || LA155_0 == 145 || LA155_0 == 151 || LA155_0 == 155 || LA155_0 == 157 || LA155_0 == 161 || LA155_0 == 163 || LA155_0 == 166))
                    {
                        alt155=2;
                    }
                    else
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }


                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 155;
                        EXCEPTION->state        = 0;


                        goto ruleconditionEx;

                    }
                }
                switch (alt155)
                {
            	case 1:
            	    // CPP_grammar_.g:1769:5: ( declaration_specifiers declarator ASSIGNEQUAL )=> declaration_specifiers declarator ASSIGNEQUAL remainder_expression
            	    {
            	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_condition6821);
            	        declaration_specifiers(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_declarator_in_condition6823);
            	        declarator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_condition6825);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_remainder_expression_in_condition6827);
            	        remainder_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1771:5: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_condition6833);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleconditionEx; /* Prevent compiler warnings */
    ruleconditionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition */

/**
 * $ANTLR start jump_statement
 * CPP_grammar_.g:1776:1: jump_statement : ( 'goto' ID SEMICOLON | 'continue' SEMICOLON | 'break' SEMICOLON | 'return' ( ( LPAREN {...}? ID RPAREN )=> LPAREN ID RPAREN ( expression )? | expression )? SEMICOLON ) ;
 */
static void
jump_statement(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1777:2: ( ( 'goto' ID SEMICOLON | 'continue' SEMICOLON | 'break' SEMICOLON | 'return' ( ( LPAREN {...}? ID RPAREN )=> LPAREN ID RPAREN ( expression )? | expression )? SEMICOLON ) )
        // CPP_grammar_.g:1778:3: ( 'goto' ID SEMICOLON | 'continue' SEMICOLON | 'break' SEMICOLON | 'return' ( ( LPAREN {...}? ID RPAREN )=> LPAREN ID RPAREN ( expression )? | expression )? SEMICOLON )
        {
            // CPP_grammar_.g:1778:3: ( 'goto' ID SEMICOLON | 'continue' SEMICOLON | 'break' SEMICOLON | 'return' ( ( LPAREN {...}? ID RPAREN )=> LPAREN ID RPAREN ( expression )? | expression )? SEMICOLON )
            {
                int alt158=4;
                switch ( LA(1) )
                {
                case 138:
                	{
                		alt158=1;
                	}
                    break;
                case 124:
                	{
                		alt158=2;
                	}
                    break;
                case 117:
                	{
                		alt158=3;
                	}
                    break;
                case 152:
                	{
                		alt158=4;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 158;
                    EXCEPTION->state        = 0;


                    goto rulejump_statementEx;

                }

                switch (alt158)
                {
            	case 1:
            	    // CPP_grammar_.g:1778:5: 'goto' ID SEMICOLON
            	    {
            	         MATCHT(138, &FOLLOW_138_in_jump_statement6854);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejump_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(ID, &FOLLOW_ID_in_jump_statement6856);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejump_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_jump_statement6858);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejump_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1779:5: 'continue' SEMICOLON
            	    {
            	         MATCHT(124, &FOLLOW_124_in_jump_statement6866);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejump_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_jump_statement6868);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejump_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:1780:5: 'break' SEMICOLON
            	    {
            	         MATCHT(117, &FOLLOW_117_in_jump_statement6876);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejump_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_jump_statement6878);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejump_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            end_of_stmt();
            	        }


            	    }
            	    break;
            	case 4:
            	    // CPP_grammar_.g:1782:4: 'return' ( ( LPAREN {...}? ID RPAREN )=> LPAREN ID RPAREN ( expression )? | expression )? SEMICOLON
            	    {
            	         MATCHT(152, &FOLLOW_152_in_jump_statement6890);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejump_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            in_return = TRUE;
            	        }


            	        // CPP_grammar_.g:1783:4: ( ( LPAREN {...}? ID RPAREN )=> LPAREN ID RPAREN ( expression )? | expression )?
            	        {
            	            int alt157=3;
            	            switch ( LA(1) )
            	            {
            	                case LPAREN:
            	                	{
            	                		switch ( LA(2) )
            	                		{
            	                		    case ID:
            	                		    	{
            	                		    		switch ( LA(3) )
            	                		    		{
            	                		    		    case RPAREN:
            	                		    		    	{
            	                		    		    		{
            	                		    		    		    int LA157_5 = LA(4);
            	                		    		    		    if ( (synpred74_CPP_grammar_(ctx)))
            	                		    		    		    {
            	                		    		    		        alt157=1;
            	                		    		    		    }
            	                		    		    		    else if ( (ANTLR3_TRUE))
            	                		    		    		    {
            	                		    		    		        alt157=2;
            	                		    		    		    }
            	                		    		    		}
            	                		    		    	}
            	                		    		        break;
            	                		    		    case AMPERSAND:
            	                		    		    case AND:
            	                		    		    case ASSIGNEQUAL:
            	                		    		    case BITWISEANDEQUAL:
            	                		    		    case BITWISEOR:
            	                		    		    case BITWISEOREQUAL:
            	                		    		    case BITWISEXOR:
            	                		    		    case BITWISEXOREQUAL:
            	                		    		    case COMMA:
            	                		    		    case DIVIDE:
            	                		    		    case DIVIDEEQUAL:
            	                		    		    case DOT:
            	                		    		    case DOTMBR:
            	                		    		    case EQUAL:
            	                		    		    case GREATERTHAN:
            	                		    		    case GREATERTHANOREQUALTO:
            	                		    		    case ID:
            	                		    		    case LESSTHAN:
            	                		    		    case LESSTHANOREQUALTO:
            	                		    		    case LPAREN:
            	                		    		    case LSQUARE:
            	                		    		    case MINUS:
            	                		    		    case MINUSEQUAL:
            	                		    		    case MINUSMINUS:
            	                		    		    case MOD:
            	                		    		    case MODEQUAL:
            	                		    		    case NOTEQUAL:
            	                		    		    case OR:
            	                		    		    case PLUS:
            	                		    		    case PLUSEQUAL:
            	                		    		    case PLUSPLUS:
            	                		    		    case POINTERTO:
            	                		    		    case POINTERTOMBR:
            	                		    		    case QUESTIONMARK:
            	                		    		    case SCOPE:
            	                		    		    case SHIFTLEFT:
            	                		    		    case SHIFTLEFTEQUAL:
            	                		    		    case SHIFTRIGHT:
            	                		    		    case SHIFTRIGHTEQUAL:
            	                		    		    case STAR:
            	                		    		    case TIMESEQUAL:
            	                		    		    case 88:
            	                		    		    case 90:
            	                		    		    case 96:
            	                		    		    case 97:
            	                		    		    case 98:
            	                		    		    case 99:
            	                		    		    case 101:
            	                		    		    case 103:
            	                		    		    case 109:
            	                		    		    case 110:
            	                		    		    case 111:
            	                		    		    case 122:
            	                		    		    case 146:
            	                		    		    case 173:
            	                		    		    	{
            	                		    		    		alt157=2;
            	                		    		    	}
            	                		    		        break;
            	                		    		}

            	                		    	}
            	                		        break;
            	                		    case AMPERSAND:
            	                		    case CharLiteral:
            	                		    case DECIMALINT:
            	                		    case FLOATONE:
            	                		    case FLOATTWO:
            	                		    case HEXADECIMALINT:
            	                		    case LPAREN:
            	                		    case MINUS:
            	                		    case MINUSMINUS:
            	                		    case NOT:
            	                		    case OCTALINT:
            	                		    case OPERATOR:
            	                		    case PLUS:
            	                		    case PLUSPLUS:
            	                		    case SCOPE:
            	                		    case STAR:
            	                		    case StringLiteral:
            	                		    case TILDE:
            	                		    case WCharLiteral:
            	                		    case WStringLiteral:
            	                		    case 87:
            	                		    case 89:
            	                		    case 91:
            	                		    case 92:
            	                		    case 93:
            	                		    case 94:
            	                		    case 95:
            	                		    case 100:
            	                		    case 102:
            	                		    case 104:
            	                		    case 105:
            	                		    case 106:
            	                		    case 107:
            	                		    case 108:
            	                		    case 112:
            	                		    case 115:
            	                		    case 116:
            	                		    case 120:
            	                		    case 121:
            	                		    case 122:
            	                		    case 123:
            	                		    case 126:
            	                		    case 128:
            	                		    case 129:
            	                		    case 131:
            	                		    case 132:
            	                		    case 133:
            	                		    case 134:
            	                		    case 135:
            	                		    case 137:
            	                		    case 140:
            	                		    case 141:
            	                		    case 142:
            	                		    case 143:
            	                		    case 145:
            	                		    case 150:
            	                		    case 151:
            	                		    case 153:
            	                		    case 154:
            	                		    case 155:
            	                		    case 156:
            	                		    case 157:
            	                		    case 158:
            	                		    case 161:
            	                		    case 163:
            	                		    case 165:
            	                		    case 166:
            	                		    case 167:
            	                		    case 168:
            	                		    case 169:
            	                		    case 171:
            	                		    case 172:
            	                		    case 173:
            	                		    case 174:
            	                		    	{
            	                		    		alt157=2;
            	                		    	}
            	                		        break;
            	                		}

            	                	}
            	                    break;
            	                case AMPERSAND:
            	                case CharLiteral:
            	                case DECIMALINT:
            	                case FLOATONE:
            	                case FLOATTWO:
            	                case HEXADECIMALINT:
            	                case ID:
            	                case MINUS:
            	                case MINUSMINUS:
            	                case NOT:
            	                case OCTALINT:
            	                case OPERATOR:
            	                case PLUS:
            	                case PLUSPLUS:
            	                case SCOPE:
            	                case STAR:
            	                case StringLiteral:
            	                case TILDE:
            	                case WCharLiteral:
            	                case WStringLiteral:
            	                case 87:
            	                case 92:
            	                case 93:
            	                case 94:
            	                case 95:
            	                case 100:
            	                case 105:
            	                case 106:
            	                case 107:
            	                case 108:
            	                case 112:
            	                case 116:
            	                case 120:
            	                case 121:
            	                case 123:
            	                case 126:
            	                case 128:
            	                case 129:
            	                case 131:
            	                case 134:
            	                case 135:
            	                case 141:
            	                case 142:
            	                case 145:
            	                case 151:
            	                case 153:
            	                case 154:
            	                case 155:
            	                case 157:
            	                case 158:
            	                case 161:
            	                case 163:
            	                case 166:
            	                case 167:
            	                case 168:
            	                case 169:
            	                case 172:
            	                case 174:
            	                	{
            	                		alt157=2;
            	                	}
            	                    break;
            	            }

            	            switch (alt157)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1785:5: ( LPAREN {...}? ID RPAREN )=> LPAREN ID RPAREN ( expression )?
            	        	    {
            	        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_jump_statement6963);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulejump_statementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	         MATCHT(ID, &FOLLOW_ID_in_jump_statement6965);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulejump_statementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_jump_statement6967);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulejump_statementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        // CPP_grammar_.g:1786:22: ( expression )?
            	        	        {
            	        	            int alt156=2;
            	        	            switch ( LA(1) )
            	        	            {
            	        	                case AMPERSAND:
            	        	                case CharLiteral:
            	        	                case DECIMALINT:
            	        	                case FLOATONE:
            	        	                case FLOATTWO:
            	        	                case HEXADECIMALINT:
            	        	                case ID:
            	        	                case LPAREN:
            	        	                case MINUS:
            	        	                case MINUSMINUS:
            	        	                case NOT:
            	        	                case OCTALINT:
            	        	                case OPERATOR:
            	        	                case PLUS:
            	        	                case PLUSPLUS:
            	        	                case SCOPE:
            	        	                case STAR:
            	        	                case StringLiteral:
            	        	                case TILDE:
            	        	                case WCharLiteral:
            	        	                case WStringLiteral:
            	        	                case 87:
            	        	                case 92:
            	        	                case 93:
            	        	                case 94:
            	        	                case 95:
            	        	                case 100:
            	        	                case 105:
            	        	                case 106:
            	        	                case 107:
            	        	                case 108:
            	        	                case 112:
            	        	                case 116:
            	        	                case 120:
            	        	                case 121:
            	        	                case 123:
            	        	                case 126:
            	        	                case 128:
            	        	                case 129:
            	        	                case 131:
            	        	                case 134:
            	        	                case 135:
            	        	                case 141:
            	        	                case 142:
            	        	                case 145:
            	        	                case 151:
            	        	                case 153:
            	        	                case 154:
            	        	                case 155:
            	        	                case 157:
            	        	                case 158:
            	        	                case 161:
            	        	                case 163:
            	        	                case 166:
            	        	                case 167:
            	        	                case 168:
            	        	                case 169:
            	        	                case 172:
            	        	                case 174:
            	        	                	{
            	        	                		alt156=1;
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt156)
            	        	            {
            	        	        	case 1:
            	        	        	    // CPP_grammar_.g:1786:23: expression
            	        	        	    {
            	        	        	        FOLLOWPUSH(FOLLOW_expression_in_jump_statement6970);
            	        	        	        expression(ctx);

            	        	        	        FOLLOWPOP();
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulejump_statementEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return ;
            	        	        	        }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:1789:6: expression
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_expression_in_jump_statement6998);
            	        	        expression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulejump_statementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_jump_statement7007);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejump_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            in_return = FALSE; end_of_stmt();
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulejump_statementEx; /* Prevent compiler warnings */
    rulejump_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end jump_statement */

/**
 * $ANTLR start try_block
 * CPP_grammar_.g:1795:1: try_block : 'try' compound_statement ( handler )* ;
 */
static void
try_block(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1796:2: ( 'try' compound_statement ( handler )* )
        // CPP_grammar_.g:1797:3: 'try' compound_statement ( handler )*
        {
             MATCHT(164, &FOLLOW_164_in_try_block7029);
            if  (HASEXCEPTION())
            {
                goto ruletry_blockEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_compound_statement_in_try_block7031);
            compound_statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletry_blockEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1797:28: ( handler )*

            for (;;)
            {
                int alt159=2;
                switch ( LA(1) )
                {
                case 119:
                	{
                		alt159=1;
                	}
                    break;

                }

                switch (alt159)
                {
            	case 1:
            	    // CPP_grammar_.g:1797:29: handler
            	    {
            	        FOLLOWPUSH(FOLLOW_handler_in_try_block7034);
            	        handler(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletry_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop159;	/* break out of the loop */
            	    break;
                }
            }
            loop159: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletry_blockEx; /* Prevent compiler warnings */
    ruletry_blockEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end try_block */

/**
 * $ANTLR start handler
 * CPP_grammar_.g:1801:1: handler : 'catch' LPAREN exception_declaration RPAREN compound_statement ;
 */
static void
handler(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1802:2: ( 'catch' LPAREN exception_declaration RPAREN compound_statement )
        // CPP_grammar_.g:1803:3: 'catch' LPAREN exception_declaration RPAREN compound_statement
        {
             MATCHT(119, &FOLLOW_119_in_handler7051);
            if  (HASEXCEPTION())
            {
                goto rulehandlerEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                exceptionBeginHandler();
            }


            if ( BACKTRACKING==0 )
            {
                declaratorParameterList(1);
            }


             MATCHT(LPAREN, &FOLLOW_LPAREN_in_handler7063);
            if  (HASEXCEPTION())
            {
                goto rulehandlerEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            FOLLOWPUSH(FOLLOW_exception_declaration_in_handler7065);
            exception_declaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulehandlerEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(RPAREN, &FOLLOW_RPAREN_in_handler7067);
            if  (HASEXCEPTION())
            {
                goto rulehandlerEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                declaratorEndParameterList(1);
            }


            FOLLOWPUSH(FOLLOW_compound_statement_in_handler7075);
            compound_statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulehandlerEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                exceptionEndHandler();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulehandlerEx; /* Prevent compiler warnings */
    rulehandlerEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end handler */

/**
 * $ANTLR start exception_declaration
 * CPP_grammar_.g:1813:1: exception_declaration : parameter_declaration_list ;
 */
static void
exception_declaration(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1814:2: ( parameter_declaration_list )
        // CPP_grammar_.g:1815:3: parameter_declaration_list
        {
            FOLLOWPUSH(FOLLOW_parameter_declaration_list_in_exception_declaration7094);
            parameter_declaration_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexception_declarationEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexception_declarationEx; /* Prevent compiler warnings */
    ruleexception_declarationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end exception_declaration */

/**
 * $ANTLR start throw_statement
 * CPP_grammar_.g:1823:1: throw_statement : 'throw' ( assignment_expression )? SEMICOLON ;
 */
static void
throw_statement(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1824:2: ( 'throw' ( assignment_expression )? SEMICOLON )
        // CPP_grammar_.g:1825:3: 'throw' ( assignment_expression )? SEMICOLON
        {
             MATCHT(162, &FOLLOW_162_in_throw_statement7113);
            if  (HASEXCEPTION())
            {
                goto rulethrow_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1825:11: ( assignment_expression )?
            {
                int alt160=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    case CharLiteral:
                    case DECIMALINT:
                    case FLOATONE:
                    case FLOATTWO:
                    case HEXADECIMALINT:
                    case ID:
                    case LPAREN:
                    case MINUS:
                    case MINUSMINUS:
                    case NOT:
                    case OCTALINT:
                    case OPERATOR:
                    case PLUS:
                    case PLUSPLUS:
                    case SCOPE:
                    case STAR:
                    case StringLiteral:
                    case TILDE:
                    case WCharLiteral:
                    case WStringLiteral:
                    case 87:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 100:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 112:
                    case 116:
                    case 120:
                    case 121:
                    case 123:
                    case 126:
                    case 128:
                    case 129:
                    case 131:
                    case 134:
                    case 135:
                    case 141:
                    case 142:
                    case 145:
                    case 151:
                    case 153:
                    case 154:
                    case 155:
                    case 157:
                    case 158:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 172:
                    case 174:
                    	{
                    		alt160=1;
                    	}
                        break;
                }

                switch (alt160)
                {
            	case 1:
            	    // CPP_grammar_.g:1825:12: assignment_expression
            	    {
            	        FOLLOWPUSH(FOLLOW_assignment_expression_in_throw_statement7116);
            	        assignment_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrow_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_throw_statement7121);
            if  (HASEXCEPTION())
            {
                goto rulethrow_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                 end_of_stmt();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulethrow_statementEx; /* Prevent compiler warnings */
    rulethrow_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end throw_statement */

/**
 * $ANTLR start using_statement
 * CPP_grammar_.g:1829:1: using_statement : 'using' ( 'namespace' qid1= qualified_id[bufQualifiedIdScope] | ( 'typename' )? qid2= qualified_id[bufQualifiedIdScope] ) SEMICOLON ;
 */
static void
using_statement(pCPP_grammar_Parser ctx)
{

    		char *qid = NULL; //FIXME: not used
    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    CPP_grammar_Parser_qualified_id_return qid1;
    #undef	RETURN_TYPE_qid1
    #define	RETURN_TYPE_qid1 CPP_grammar_Parser_qualified_id_return

    CPP_grammar_Parser_qualified_id_return qid2;
    #undef	RETURN_TYPE_qid2
    #define	RETURN_TYPE_qid2 CPP_grammar_Parser_qualified_id_return

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1834:2: ( 'using' ( 'namespace' qid1= qualified_id[bufQualifiedIdScope] | ( 'typename' )? qid2= qualified_id[bufQualifiedIdScope] ) SEMICOLON )
        // CPP_grammar_.g:1835:3: 'using' ( 'namespace' qid1= qualified_id[bufQualifiedIdScope] | ( 'typename' )? qid2= qualified_id[bufQualifiedIdScope] ) SEMICOLON
        {
             MATCHT(170, &FOLLOW_170_in_using_statement7145);
            if  (HASEXCEPTION())
            {
                goto ruleusing_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1836:3: ( 'namespace' qid1= qualified_id[bufQualifiedIdScope] | ( 'typename' )? qid2= qualified_id[bufQualifiedIdScope] )
            {
                int alt162=2;
                switch ( LA(1) )
                {
                case 144:
                	{
                		alt162=1;
                	}
                    break;
                case ID:
                case OPERATOR:
                case SCOPE:
                case TILDE:
                case 167:
                	{
                		alt162=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 162;
                    EXCEPTION->state        = 0;


                    goto ruleusing_statementEx;

                }

                switch (alt162)
                {
            	case 1:
            	    // CPP_grammar_.g:1836:4: 'namespace' qid1= qualified_id[bufQualifiedIdScope]
            	    {
            	         MATCHT(144, &FOLLOW_144_in_using_statement7150);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleusing_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_qualified_id_in_using_statement7156);
            	        qid1=qualified_id(ctx, bufQualifiedIdScope);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleusing_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1837:4: ( 'typename' )? qid2= qualified_id[bufQualifiedIdScope]
            	    {
            	        // CPP_grammar_.g:1837:4: ( 'typename' )?
            	        {
            	            int alt161=2;
            	            switch ( LA(1) )
            	            {
            	                case 167:
            	                	{
            	                		alt161=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt161)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:1837:5: 'typename'
            	        	    {
            	        	         MATCHT(167, &FOLLOW_167_in_using_statement7165);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleusing_statementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_qualified_id_in_using_statement7173);
            	        qid2=qualified_id(ctx, bufQualifiedIdScope);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleusing_statementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_using_statement7183);
            if  (HASEXCEPTION())
            {
                goto ruleusing_statementEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                end_of_stmt();
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleusing_statementEx; /* Prevent compiler warnings */
    ruleusing_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end using_statement */

/**
 * $ANTLR start expression
 * CPP_grammar_.g:1851:1: expression : assignment_expression ( COMMA assignment_expression )* ;
 */
static void
expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */


    		lineNo = LT(1)->line;
    	
    {
        // CPP_grammar_.g:1855:2: ( assignment_expression ( COMMA assignment_expression )* )
        // CPP_grammar_.g:1856:3: assignment_expression ( COMMA assignment_expression )*
        {
            FOLLOWPUSH(FOLLOW_assignment_expression_in_expression7214);
            assignment_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1856:25: ( COMMA assignment_expression )*

            for (;;)
            {
                int alt163=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt163=1;
                	}
                    break;

                }

                switch (alt163)
                {
            	case 1:
            	    // CPP_grammar_.g:1856:26: COMMA assignment_expression
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_expression7217);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_assignment_expression_in_expression7219);
            	        assignment_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop163;	/* break out of the loop */
            	    break;
                }
            }
            loop163: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression */

/**
 * $ANTLR start assignment_expression
 * CPP_grammar_.g:1861:1: assignment_expression : conditional_expression ( ( ASSIGNEQUAL | TIMESEQUAL | DIVIDEEQUAL | MINUSEQUAL | PLUSEQUAL | MODEQUAL | SHIFTLEFTEQUAL | SHIFTRIGHTEQUAL | BITWISEANDEQUAL | BITWISEXOREQUAL | BITWISEOREQUAL ) remainder_expression )? ;
 */
static void
assignment_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1862:2: ( conditional_expression ( ( ASSIGNEQUAL | TIMESEQUAL | DIVIDEEQUAL | MINUSEQUAL | PLUSEQUAL | MODEQUAL | SHIFTLEFTEQUAL | SHIFTRIGHTEQUAL | BITWISEANDEQUAL | BITWISEXOREQUAL | BITWISEOREQUAL ) remainder_expression )? )
        // CPP_grammar_.g:1863:3: conditional_expression ( ( ASSIGNEQUAL | TIMESEQUAL | DIVIDEEQUAL | MINUSEQUAL | PLUSEQUAL | MODEQUAL | SHIFTLEFTEQUAL | SHIFTRIGHTEQUAL | BITWISEANDEQUAL | BITWISEXOREQUAL | BITWISEOREQUAL ) remainder_expression )?
        {
            FOLLOWPUSH(FOLLOW_conditional_expression_in_assignment_expression7237);
            conditional_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignment_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1864:3: ( ( ASSIGNEQUAL | TIMESEQUAL | DIVIDEEQUAL | MINUSEQUAL | PLUSEQUAL | MODEQUAL | SHIFTLEFTEQUAL | SHIFTRIGHTEQUAL | BITWISEANDEQUAL | BITWISEXOREQUAL | BITWISEOREQUAL ) remainder_expression )?
            {
                int alt164=2;
                switch ( LA(1) )
                {
                    case ASSIGNEQUAL:
                    case BITWISEANDEQUAL:
                    case BITWISEOREQUAL:
                    case BITWISEXOREQUAL:
                    case DIVIDEEQUAL:
                    case MINUSEQUAL:
                    case MODEQUAL:
                    case PLUSEQUAL:
                    case SHIFTLEFTEQUAL:
                    case SHIFTRIGHTEQUAL:
                    case TIMESEQUAL:
                    	{
                    		alt164=1;
                    	}
                        break;
                }

                switch (alt164)
                {
            	case 1:
            	    // CPP_grammar_.g:1865:4: ( ASSIGNEQUAL | TIMESEQUAL | DIVIDEEQUAL | MINUSEQUAL | PLUSEQUAL | MODEQUAL | SHIFTLEFTEQUAL | SHIFTRIGHTEQUAL | BITWISEANDEQUAL | BITWISEXOREQUAL | BITWISEOREQUAL ) remainder_expression
            	    {
            	        if ( ((LA(1) >= ASSIGNEQUAL) && (LA(1) <= BITWISEANDEQUAL)) || LA(1) == BITWISEOREQUAL || LA(1) == BITWISEXOREQUAL || LA(1) == DIVIDEEQUAL || LA(1) == MINUSEQUAL || LA(1) == MODEQUAL || LA(1) == PLUSEQUAL || LA(1) == SHIFTLEFTEQUAL || LA(1) == SHIFTRIGHTEQUAL || LA(1) == TIMESEQUAL )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleassignment_expressionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_remainder_expression_in_assignment_expression7286);
            	        remainder_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignment_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleassignment_expressionEx; /* Prevent compiler warnings */
    ruleassignment_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end assignment_expression */

/**
 * $ANTLR start remainder_expression
 * CPP_grammar_.g:1875:1: remainder_expression : ( ( conditional_expression ( COMMA | SEMICOLON | RPAREN ) )=> assignment_expression | assignment_expression ) ;
 */
static void
remainder_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1876:2: ( ( ( conditional_expression ( COMMA | SEMICOLON | RPAREN ) )=> assignment_expression | assignment_expression ) )
        // CPP_grammar_.g:1877:3: ( ( conditional_expression ( COMMA | SEMICOLON | RPAREN ) )=> assignment_expression | assignment_expression )
        {
            // CPP_grammar_.g:1877:3: ( ( conditional_expression ( COMMA | SEMICOLON | RPAREN ) )=> assignment_expression | assignment_expression )
            {
                int alt165=2;
                switch ( LA(1) )
                {
                case LPAREN:
                	{
                		{
                		    int LA165_1 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 1;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case SCOPE:
                	{
                		{
                		    int LA165_2 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 2;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case ID:
                	{
                		{
                		    int LA165_3 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 3;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 167:
                	{
                		{
                		    int LA165_4 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 4;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 131:
                	{
                		{
                		    int LA165_5 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 5;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 121:
                	{
                		{
                		    int LA165_6 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 6;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 158:
                	{
                		{
                		    int LA165_7 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 7;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 168:
                	{
                		{
                		    int LA165_8 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 8;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 120:
                	{
                		{
                		    int LA165_9 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 9;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 174:
                	{
                		{
                		    int LA165_10 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 10;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 116:
                	{
                		{
                		    int LA165_11 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 11;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 153:
                	{
                		{
                		    int LA165_12 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 12;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 141:
                	{
                		{
                		    int LA165_13 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 13;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 95:
                case 108:
                	{
                		{
                		    int LA165_14 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 14;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 92:
                case 105:
                	{
                		{
                		    int LA165_15 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 15;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 93:
                case 106:
                	{
                		{
                		    int LA165_16 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 16;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 94:
                case 107:
                	{
                		{
                		    int LA165_17 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 17;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 100:
                case 112:
                	{
                		{
                		    int LA165_18 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 18;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 142:
                	{
                		{
                		    int LA165_19 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 19;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 154:
                	{
                		{
                		    int LA165_20 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 20;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 169:
                	{
                		{
                		    int LA165_21 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 21;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 135:
                	{
                		{
                		    int LA165_22 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 22;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 128:
                	{
                		{
                		    int LA165_23 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 23;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 172:
                	{
                		{
                		    int LA165_24 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 24;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case OPERATOR:
                	{
                		{
                		    int LA165_25 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 25;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case TILDE:
                	{
                		{
                		    int LA165_26 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 26;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case OCTALINT:
                	{
                		{
                		    int LA165_27 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 27;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case DECIMALINT:
                	{
                		{
                		    int LA165_28 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 28;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case HEXADECIMALINT:
                	{
                		{
                		    int LA165_29 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 29;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case CharLiteral:
                	{
                		{
                		    int LA165_30 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 30;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case WCharLiteral:
                	{
                		{
                		    int LA165_31 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 31;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case StringLiteral:
                case WStringLiteral:
                	{
                		{
                		    int LA165_32 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 32;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case FLOATONE:
                	{
                		{
                		    int LA165_33 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 33;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case FLOATTWO:
                	{
                		{
                		    int LA165_34 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 34;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 163:
                	{
                		{
                		    int LA165_35 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 35;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 134:
                	{
                		{
                		    int LA165_36 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 36;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 161:
                	{
                		{
                		    int LA165_37 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 37;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 123:
                case 129:
                case 151:
                case 157:
                	{
                		{
                		    int LA165_38 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 38;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 166:
                	{
                		{
                		    int LA165_39 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 39;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case PLUSPLUS:
                	{
                		{
                		    int LA165_40 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 40;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case MINUSMINUS:
                	{
                		{
                		    int LA165_41 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 41;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case AMPERSAND:
                case MINUS:
                case NOT:
                case PLUS:
                case STAR:
                	{
                		{
                		    int LA165_42 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 42;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 87:
                case 155:
                	{
                		{
                		    int LA165_43 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 43;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 145:
                	{
                		{
                		    int LA165_44 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 44;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;
                case 126:
                	{
                		{
                		    int LA165_45 = LA(2);
                		    if ( (synpred75_CPP_grammar_(ctx)))
                		    {
                		        alt165=1;
                		    }
                		    else if ( (ANTLR3_TRUE))
                		    {
                		        alt165=2;
                		    }
                		    else
                		    {
                		        if (BACKTRACKING>0)
                		        {
                		            FAILEDFLAG = ANTLR3_TRUE;
                		            return ;
                		        }


                		        CONSTRUCTEX();
                		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		        EXCEPTION->message      = (void *)"";
                		        EXCEPTION->decisionNum  = 165;
                		        EXCEPTION->state        = 45;


                		        goto ruleremainder_expressionEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 165;
                    EXCEPTION->state        = 0;


                    goto ruleremainder_expressionEx;

                }

                switch (alt165)
                {
            	case 1:
            	    // CPP_grammar_.g:1878:4: ( conditional_expression ( COMMA | SEMICOLON | RPAREN ) )=> assignment_expression
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            assign_stmt_RHS_found += 1;
            	        }


            	        FOLLOWPUSH(FOLLOW_assignment_expression_in_remainder_expression7334);
            	        assignment_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleremainder_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {

            	            			if (assign_stmt_RHS_found > 0)
            	            				assign_stmt_RHS_found -= 1;
            	            			else
            	            				{
            	            				fprintf(stderr,"%d warning Error in assign_stmt_RHS_found = %d\n",
            	            					LT(1)->line,assign_stmt_RHS_found);
            	            				fprintf(stderr,"Press return to continue\n");
            	            				getchar();
            	            				}
            	            			
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:1893:4: assignment_expression
            	    {
            	        FOLLOWPUSH(FOLLOW_assignment_expression_in_remainder_expression7349);
            	        assignment_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleremainder_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleremainder_expressionEx; /* Prevent compiler warnings */
    ruleremainder_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end remainder_expression */

/**
 * $ANTLR start conditional_expression
 * CPP_grammar_.g:1898:1: conditional_expression : logical_or_expression ( QUESTIONMARK expression COLON conditional_expression )? ;
 */
static void
conditional_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1899:2: ( logical_or_expression ( QUESTIONMARK expression COLON conditional_expression )? )
        // CPP_grammar_.g:1900:3: logical_or_expression ( QUESTIONMARK expression COLON conditional_expression )?
        {
            FOLLOWPUSH(FOLLOW_logical_or_expression_in_conditional_expression7368);
            logical_or_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditional_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1901:3: ( QUESTIONMARK expression COLON conditional_expression )?
            {
                int alt166=2;
                switch ( LA(1) )
                {
                    case QUESTIONMARK:
                    	{
                    		alt166=1;
                    	}
                        break;
                }

                switch (alt166)
                {
            	case 1:
            	    // CPP_grammar_.g:1901:4: QUESTIONMARK expression COLON conditional_expression
            	    {
            	         MATCHT(QUESTIONMARK, &FOLLOW_QUESTIONMARK_in_conditional_expression7373);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_conditional_expression7375);
            	        expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(COLON, &FOLLOW_COLON_in_conditional_expression7377);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_conditional_expression_in_conditional_expression7379);
            	        conditional_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleconditional_expressionEx; /* Prevent compiler warnings */
    ruleconditional_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end conditional_expression */

/**
 * $ANTLR start constant_expression
 * CPP_grammar_.g:1905:1: constant_expression : conditional_expression ;
 */
static void
constant_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1906:2: ( conditional_expression )
        // CPP_grammar_.g:1907:3: conditional_expression
        {
            FOLLOWPUSH(FOLLOW_conditional_expression_in_constant_expression7396);
            conditional_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstant_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleconstant_expressionEx; /* Prevent compiler warnings */
    ruleconstant_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end constant_expression */

/**
 * $ANTLR start logical_or_expression
 * CPP_grammar_.g:1911:1: logical_or_expression : logical_and_expression ( OR logical_and_expression )* ;
 */
static void
logical_or_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1912:2: ( logical_and_expression ( OR logical_and_expression )* )
        // CPP_grammar_.g:1913:3: logical_and_expression ( OR logical_and_expression )*
        {
            FOLLOWPUSH(FOLLOW_logical_and_expression_in_logical_or_expression7411);
            logical_and_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelogical_or_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1913:26: ( OR logical_and_expression )*

            for (;;)
            {
                int alt167=2;
                switch ( LA(1) )
                {
                case OR:
                	{
                		alt167=1;
                	}
                    break;

                }

                switch (alt167)
                {
            	case 1:
            	    // CPP_grammar_.g:1913:27: OR logical_and_expression
            	    {
            	         MATCHT(OR, &FOLLOW_OR_in_logical_or_expression7414);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_logical_and_expression_in_logical_or_expression7416);
            	        logical_and_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop167;	/* break out of the loop */
            	    break;
                }
            }
            loop167: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelogical_or_expressionEx; /* Prevent compiler warnings */
    rulelogical_or_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end logical_or_expression */

/**
 * $ANTLR start logical_and_expression
 * CPP_grammar_.g:1917:1: logical_and_expression : inclusive_or_expression ( AND inclusive_or_expression )* ;
 */
static void
logical_and_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1918:2: ( inclusive_or_expression ( AND inclusive_or_expression )* )
        // CPP_grammar_.g:1919:3: inclusive_or_expression ( AND inclusive_or_expression )*
        {
            FOLLOWPUSH(FOLLOW_inclusive_or_expression_in_logical_and_expression7434);
            inclusive_or_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelogical_and_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1919:27: ( AND inclusive_or_expression )*

            for (;;)
            {
                int alt168=2;
                switch ( LA(1) )
                {
                case AND:
                	{
                		alt168=1;
                	}
                    break;

                }

                switch (alt168)
                {
            	case 1:
            	    // CPP_grammar_.g:1919:28: AND inclusive_or_expression
            	    {
            	         MATCHT(AND, &FOLLOW_AND_in_logical_and_expression7437);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_inclusive_or_expression_in_logical_and_expression7439);
            	        inclusive_or_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop168;	/* break out of the loop */
            	    break;
                }
            }
            loop168: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelogical_and_expressionEx; /* Prevent compiler warnings */
    rulelogical_and_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end logical_and_expression */

/**
 * $ANTLR start inclusive_or_expression
 * CPP_grammar_.g:1923:1: inclusive_or_expression : exclusive_or_expression ( BITWISEOR exclusive_or_expression )* ;
 */
static void
inclusive_or_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1924:2: ( exclusive_or_expression ( BITWISEOR exclusive_or_expression )* )
        // CPP_grammar_.g:1925:3: exclusive_or_expression ( BITWISEOR exclusive_or_expression )*
        {
            FOLLOWPUSH(FOLLOW_exclusive_or_expression_in_inclusive_or_expression7457);
            exclusive_or_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinclusive_or_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1925:27: ( BITWISEOR exclusive_or_expression )*

            for (;;)
            {
                int alt169=2;
                switch ( LA(1) )
                {
                case BITWISEOR:
                	{
                		alt169=1;
                	}
                    break;

                }

                switch (alt169)
                {
            	case 1:
            	    // CPP_grammar_.g:1925:28: BITWISEOR exclusive_or_expression
            	    {
            	         MATCHT(BITWISEOR, &FOLLOW_BITWISEOR_in_inclusive_or_expression7460);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinclusive_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_exclusive_or_expression_in_inclusive_or_expression7462);
            	        exclusive_or_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinclusive_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop169;	/* break out of the loop */
            	    break;
                }
            }
            loop169: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinclusive_or_expressionEx; /* Prevent compiler warnings */
    ruleinclusive_or_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end inclusive_or_expression */

/**
 * $ANTLR start exclusive_or_expression
 * CPP_grammar_.g:1929:1: exclusive_or_expression : and_expression ( BITWISEXOR and_expression )* ;
 */
static void
exclusive_or_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1930:2: ( and_expression ( BITWISEXOR and_expression )* )
        // CPP_grammar_.g:1931:3: and_expression ( BITWISEXOR and_expression )*
        {
            FOLLOWPUSH(FOLLOW_and_expression_in_exclusive_or_expression7479);
            and_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexclusive_or_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1931:18: ( BITWISEXOR and_expression )*

            for (;;)
            {
                int alt170=2;
                switch ( LA(1) )
                {
                case BITWISEXOR:
                	{
                		alt170=1;
                	}
                    break;

                }

                switch (alt170)
                {
            	case 1:
            	    // CPP_grammar_.g:1931:19: BITWISEXOR and_expression
            	    {
            	         MATCHT(BITWISEXOR, &FOLLOW_BITWISEXOR_in_exclusive_or_expression7482);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexclusive_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_and_expression_in_exclusive_or_expression7484);
            	        and_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexclusive_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop170;	/* break out of the loop */
            	    break;
                }
            }
            loop170: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexclusive_or_expressionEx; /* Prevent compiler warnings */
    ruleexclusive_or_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end exclusive_or_expression */

/**
 * $ANTLR start and_expression
 * CPP_grammar_.g:1935:1: and_expression : equality_expression ( AMPERSAND equality_expression )* ;
 */
static void
and_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1936:2: ( equality_expression ( AMPERSAND equality_expression )* )
        // CPP_grammar_.g:1937:3: equality_expression ( AMPERSAND equality_expression )*
        {
            FOLLOWPUSH(FOLLOW_equality_expression_in_and_expression7501);
            equality_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleand_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1937:23: ( AMPERSAND equality_expression )*

            for (;;)
            {
                int alt171=2;
                switch ( LA(1) )
                {
                case AMPERSAND:
                	{
                		alt171=1;
                	}
                    break;

                }

                switch (alt171)
                {
            	case 1:
            	    // CPP_grammar_.g:1937:24: AMPERSAND equality_expression
            	    {
            	         MATCHT(AMPERSAND, &FOLLOW_AMPERSAND_in_and_expression7504);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleand_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_equality_expression_in_and_expression7506);
            	        equality_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleand_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop171;	/* break out of the loop */
            	    break;
                }
            }
            loop171: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleand_expressionEx; /* Prevent compiler warnings */
    ruleand_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end and_expression */

/**
 * $ANTLR start equality_expression
 * CPP_grammar_.g:1941:1: equality_expression : relational_expression ( ( NOTEQUAL | EQUAL ) relational_expression )* ;
 */
static void
equality_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1942:2: ( relational_expression ( ( NOTEQUAL | EQUAL ) relational_expression )* )
        // CPP_grammar_.g:1943:3: relational_expression ( ( NOTEQUAL | EQUAL ) relational_expression )*
        {
            FOLLOWPUSH(FOLLOW_relational_expression_in_equality_expression7523);
            relational_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleequality_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1943:25: ( ( NOTEQUAL | EQUAL ) relational_expression )*

            for (;;)
            {
                int alt172=2;
                switch ( LA(1) )
                {
                case EQUAL:
                case NOTEQUAL:
                	{
                		alt172=1;
                	}
                    break;

                }

                switch (alt172)
                {
            	case 1:
            	    // CPP_grammar_.g:1943:27: ( NOTEQUAL | EQUAL ) relational_expression
            	    {
            	        if ( LA(1) == EQUAL || LA(1) == NOTEQUAL )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleequality_expressionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_relational_expression_in_equality_expression7533);
            	        relational_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequality_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop172;	/* break out of the loop */
            	    break;
                }
            }
            loop172: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleequality_expressionEx; /* Prevent compiler warnings */
    ruleequality_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end equality_expression */

/**
 * $ANTLR start relational_expression
 * CPP_grammar_.g:1947:1: relational_expression : shift_expression ( options {backtrack=true; } : ( ( LESSTHAN | GREATERTHAN | LESSTHANOREQUALTO | GREATERTHANOREQUALTO ) ) shift_expression )? ;
 */
static void
relational_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1948:2: ( shift_expression ( options {backtrack=true; } : ( ( LESSTHAN | GREATERTHAN | LESSTHANOREQUALTO | GREATERTHANOREQUALTO ) ) shift_expression )? )
        // CPP_grammar_.g:1949:3: shift_expression ( options {backtrack=true; } : ( ( LESSTHAN | GREATERTHAN | LESSTHANOREQUALTO | GREATERTHANOREQUALTO ) ) shift_expression )?
        {
            FOLLOWPUSH(FOLLOW_shift_expression_in_relational_expression7550);
            shift_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelational_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1950:3: ( options {backtrack=true; } : ( ( LESSTHAN | GREATERTHAN | LESSTHANOREQUALTO | GREATERTHANOREQUALTO ) ) shift_expression )?
            {
                int alt173=2;
                switch ( LA(1) )
                {
                    case GREATERTHAN:
                    	{
                    		{
                    		    int LA173_1 = LA(2);
                    		    if ( (synpred76_CPP_grammar_(ctx)))
                    		    {
                    		        alt173=1;
                    		    }
                    		}
                    	}
                        break;
                    case GREATERTHANOREQUALTO:
                    case LESSTHAN:
                    case LESSTHANOREQUALTO:
                    	{
                    		alt173=1;
                    	}
                        break;
                }

                switch (alt173)
                {
            	case 1:
            	    // CPP_grammar_.g:1952:4: ( ( LESSTHAN | GREATERTHAN | LESSTHANOREQUALTO | GREATERTHANOREQUALTO ) ) shift_expression
            	    {
            	        if ( ((LA(1) >= GREATERTHAN) && (LA(1) <= GREATERTHANOREQUALTO)) || ((LA(1) >= LESSTHAN) && (LA(1) <= LESSTHANOREQUALTO)) )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto rulerelational_expressionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_shift_expression_in_relational_expression7622);
            	        shift_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelational_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulerelational_expressionEx; /* Prevent compiler warnings */
    rulerelational_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end relational_expression */

/**
 * $ANTLR start shift_expression
 * CPP_grammar_.g:1964:1: shift_expression : additive_expression ( ( SHIFTLEFT | SHIFTRIGHT ) additive_expression )* ;
 */
static void
shift_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1965:2: ( additive_expression ( ( SHIFTLEFT | SHIFTRIGHT ) additive_expression )* )
        // CPP_grammar_.g:1966:3: additive_expression ( ( SHIFTLEFT | SHIFTRIGHT ) additive_expression )*
        {
            FOLLOWPUSH(FOLLOW_additive_expression_in_shift_expression7642);
            additive_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleshift_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1966:23: ( ( SHIFTLEFT | SHIFTRIGHT ) additive_expression )*

            for (;;)
            {
                int alt174=2;
                switch ( LA(1) )
                {
                case SHIFTLEFT:
                case SHIFTRIGHT:
                	{
                		alt174=1;
                	}
                    break;

                }

                switch (alt174)
                {
            	case 1:
            	    // CPP_grammar_.g:1966:24: ( SHIFTLEFT | SHIFTRIGHT ) additive_expression
            	    {
            	        if ( LA(1) == SHIFTLEFT || LA(1) == SHIFTRIGHT )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleshift_expressionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_additive_expression_in_shift_expression7653);
            	        additive_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshift_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop174;	/* break out of the loop */
            	    break;
                }
            }
            loop174: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleshift_expressionEx; /* Prevent compiler warnings */
    ruleshift_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end shift_expression */

/**
 * $ANTLR start additive_expression
 * CPP_grammar_.g:1970:1: additive_expression : multiplicative_expression ( ( PLUS | MINUS ) multiplicative_expression )* ;
 */
static void
additive_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1971:2: ( multiplicative_expression ( ( PLUS | MINUS ) multiplicative_expression )* )
        // CPP_grammar_.g:1972:3: multiplicative_expression ( ( PLUS | MINUS ) multiplicative_expression )*
        {
            FOLLOWPUSH(FOLLOW_multiplicative_expression_in_additive_expression7670);
            multiplicative_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleadditive_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1973:3: ( ( PLUS | MINUS ) multiplicative_expression )*

            for (;;)
            {
                int alt175=2;
                switch ( LA(1) )
                {
                case MINUS:
                case PLUS:
                	{
                		alt175=1;
                	}
                    break;

                }

                switch (alt175)
                {
            	case 1:
            	    // CPP_grammar_.g:1974:4: ( PLUS | MINUS ) multiplicative_expression
            	    {
            	        if ( LA(1) == MINUS || LA(1) == PLUS )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleadditive_expressionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_multiplicative_expression_in_additive_expression7687);
            	        multiplicative_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditive_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop175;	/* break out of the loop */
            	    break;
                }
            }
            loop175: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleadditive_expressionEx; /* Prevent compiler warnings */
    ruleadditive_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end additive_expression */

/**
 * $ANTLR start multiplicative_expression
 * CPP_grammar_.g:1985:1: multiplicative_expression : pm_expression ( ( STAR | DIVIDE | MOD ) pm_expression )* ;
 */
static void
multiplicative_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1986:2: ( pm_expression ( ( STAR | DIVIDE | MOD ) pm_expression )* )
        // CPP_grammar_.g:1987:3: pm_expression ( ( STAR | DIVIDE | MOD ) pm_expression )*
        {
            FOLLOWPUSH(FOLLOW_pm_expression_in_multiplicative_expression7713);
            pm_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemultiplicative_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1988:3: ( ( STAR | DIVIDE | MOD ) pm_expression )*

            for (;;)
            {
                int alt176=2;
                switch ( LA(1) )
                {
                case DIVIDE:
                case MOD:
                case STAR:
                	{
                		alt176=1;
                	}
                    break;

                }

                switch (alt176)
                {
            	case 1:
            	    // CPP_grammar_.g:1989:4: ( STAR | DIVIDE | MOD ) pm_expression
            	    {
            	        if ( LA(1) == DIVIDE || LA(1) == MOD || LA(1) == STAR )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto rulemultiplicative_expressionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_pm_expression_in_multiplicative_expression7730);
            	        pm_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicative_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop176;	/* break out of the loop */
            	    break;
                }
            }
            loop176: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulemultiplicative_expressionEx; /* Prevent compiler warnings */
    rulemultiplicative_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end multiplicative_expression */

/**
 * $ANTLR start pm_expression
 * CPP_grammar_.g:1994:1: pm_expression : cast_expression ( ( DOTMBR | POINTERTOMBR ) cast_expression )* ;
 */
static void
pm_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:1995:2: ( cast_expression ( ( DOTMBR | POINTERTOMBR ) cast_expression )* )
        // CPP_grammar_.g:1996:3: cast_expression ( ( DOTMBR | POINTERTOMBR ) cast_expression )*
        {
            FOLLOWPUSH(FOLLOW_cast_expression_in_pm_expression7750);
            cast_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepm_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:1996:19: ( ( DOTMBR | POINTERTOMBR ) cast_expression )*

            for (;;)
            {
                int alt177=2;
                switch ( LA(1) )
                {
                case DOTMBR:
                case POINTERTOMBR:
                	{
                		alt177=1;
                	}
                    break;

                }

                switch (alt177)
                {
            	case 1:
            	    // CPP_grammar_.g:1996:21: ( DOTMBR | POINTERTOMBR ) cast_expression
            	    {
            	        if ( LA(1) == DOTMBR || LA(1) == POINTERTOMBR )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto rulepm_expressionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_cast_expression_in_pm_expression7760);
            	        cast_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepm_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop177;	/* break out of the loop */
            	    break;
                }
            }
            loop177: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepm_expressionEx; /* Prevent compiler warnings */
    rulepm_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end pm_expression */

/**
 * $ANTLR start cast_expression
 * CPP_grammar_.g:2036:1: cast_expression : ( ( LPAREN type_id RPAREN unary_expression )=> LPAREN type_id RPAREN unary_expression | ( LPAREN type_id RPAREN cast_expression )=> LPAREN type_id RPAREN cast_expression | unary_expression );
 */
static void
cast_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:2037:2: ( ( LPAREN type_id RPAREN unary_expression )=> LPAREN type_id RPAREN unary_expression | ( LPAREN type_id RPAREN cast_expression )=> LPAREN type_id RPAREN cast_expression | unary_expression )

            ANTLR3_UINT32 alt178;

            alt178=3;

            switch ( LA(1) )
            {
            case LPAREN:
            	{
            		{
            		    int LA178_1 = LA(2);
            		    if ( (synpred77_CPP_grammar_(ctx)))
            		    {
            		        alt178=1;
            		    }
            		    else if ( (synpred78_CPP_grammar_(ctx)))
            		    {
            		        alt178=2;
            		    }
            		    else if ( (ANTLR3_TRUE))
            		    {
            		        alt178=3;
            		    }
            		    else
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return ;
            		        }


            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 178;
            		        EXCEPTION->state        = 1;


            		        goto rulecast_expressionEx;

            		    }
            		}
            	}
                break;
            case AMPERSAND:
            case CharLiteral:
            case DECIMALINT:
            case FLOATONE:
            case FLOATTWO:
            case HEXADECIMALINT:
            case ID:
            case MINUS:
            case MINUSMINUS:
            case NOT:
            case OCTALINT:
            case OPERATOR:
            case PLUS:
            case PLUSPLUS:
            case SCOPE:
            case STAR:
            case StringLiteral:
            case TILDE:
            case WCharLiteral:
            case WStringLiteral:
            case 87:
            case 92:
            case 93:
            case 94:
            case 95:
            case 100:
            case 105:
            case 106:
            case 107:
            case 108:
            case 112:
            case 116:
            case 120:
            case 121:
            case 123:
            case 126:
            case 128:
            case 129:
            case 131:
            case 134:
            case 135:
            case 141:
            case 142:
            case 145:
            case 151:
            case 153:
            case 154:
            case 155:
            case 157:
            case 158:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 172:
            case 174:
            	{
            		alt178=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 178;
                EXCEPTION->state        = 0;


                goto rulecast_expressionEx;

            }

            switch (alt178)
            {
        	case 1:
        	    // CPP_grammar_.g:2038:3: ( LPAREN type_id RPAREN unary_expression )=> LPAREN type_id RPAREN unary_expression
        	    {
        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_cast_expression7828);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecast_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_type_id_in_cast_expression7830);
        	        type_id(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecast_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_cast_expression7832);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecast_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_unary_expression_in_cast_expression7834);
        	        unary_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecast_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:2042:3: ( LPAREN type_id RPAREN cast_expression )=> LPAREN type_id RPAREN cast_expression
        	    {
        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_cast_expression7858);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecast_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_type_id_in_cast_expression7860);
        	        type_id(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecast_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_cast_expression7862);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecast_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_cast_expression_in_cast_expression7864);
        	        cast_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecast_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:2045:3: unary_expression
        	    {
        	        FOLLOWPUSH(FOLLOW_unary_expression_in_cast_expression7873);
        	        unary_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecast_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecast_expressionEx; /* Prevent compiler warnings */
    rulecast_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end cast_expression */

/**
 * $ANTLR start unary_expression
 * CPP_grammar_.g:2050:1: unary_expression : ( ( postfix_expression )=> postfix_expression | PLUSPLUS unary_expression | MINUSMINUS unary_expression | unary_operator cast_expression | ( 'sizeof' | '__alignof__' ) ( ( unary_expression )=> unary_expression | LPAREN type_id RPAREN ) | ( SCOPE )? ( new_expression | delete_expression ) ) ;
 */
static void
unary_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2051:2: ( ( ( postfix_expression )=> postfix_expression | PLUSPLUS unary_expression | MINUSMINUS unary_expression | unary_operator cast_expression | ( 'sizeof' | '__alignof__' ) ( ( unary_expression )=> unary_expression | LPAREN type_id RPAREN ) | ( SCOPE )? ( new_expression | delete_expression ) ) )
        // CPP_grammar_.g:2052:3: ( ( postfix_expression )=> postfix_expression | PLUSPLUS unary_expression | MINUSMINUS unary_expression | unary_operator cast_expression | ( 'sizeof' | '__alignof__' ) ( ( unary_expression )=> unary_expression | LPAREN type_id RPAREN ) | ( SCOPE )? ( new_expression | delete_expression ) )
        {
            // CPP_grammar_.g:2052:3: ( ( postfix_expression )=> postfix_expression | PLUSPLUS unary_expression | MINUSMINUS unary_expression | unary_operator cast_expression | ( 'sizeof' | '__alignof__' ) ( ( unary_expression )=> unary_expression | LPAREN type_id RPAREN ) | ( SCOPE )? ( new_expression | delete_expression ) )
            {
                int alt182=6;
                {
                    int LA182_0 = LA(1);
                    if ( (LA182_0 == SCOPE))
                    {
                        {
                            int LA182_1 = LA(2);
                            if ( (synpred79_CPP_grammar_(ctx)))
                            {
                                alt182=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt182=6;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 182;
                                EXCEPTION->state        = 1;


                                goto ruleunary_expressionEx;

                            }
                        }
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == ID))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 167))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 131))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 121))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 158))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 168))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 120))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 174))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 116))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 153))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 141))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 95 || LA182_0 == 108))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 92 || LA182_0 == 105))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 93 || LA182_0 == 106))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 94 || LA182_0 == 107))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 100 || LA182_0 == 112))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 142))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 154))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 169))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 135))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 128))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 172))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == OPERATOR))
                    {
                        alt182=1;
                    }
                    else if ( (LA182_0 == TILDE))
                    {
                        {
                            int LA182_25 = LA(2);
                            if ( (synpred79_CPP_grammar_(ctx)))
                            {
                                alt182=1;
                            }
                            else if ( (ANTLR3_TRUE))
                            {
                                alt182=4;
                            }
                            else
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }


                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 182;
                                EXCEPTION->state        = 25;


                                goto ruleunary_expressionEx;

                            }
                        }
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == OCTALINT))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == DECIMALINT))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == HEXADECIMALINT))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == CharLiteral))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == WCharLiteral))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == StringLiteral || LA182_0 == WStringLiteral))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == FLOATONE))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == FLOATTWO))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 163))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 134))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 161))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == LPAREN))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 123 || LA182_0 == 129 || LA182_0 == 151 || LA182_0 == 157))
                    {
                        alt182=1;
                    }
                    else if ( (synpred79_CPP_grammar_(ctx)) && (LA182_0 == 166))
                    {
                        alt182=1;
                    }
                    else if ( (LA182_0 == PLUSPLUS))
                    {
                        alt182=2;
                    }
                    else if ( (LA182_0 == MINUSMINUS))
                    {
                        alt182=3;
                    }
                    else if ( (LA182_0 == AMPERSAND || LA182_0 == MINUS || LA182_0 == NOT || LA182_0 == PLUS || LA182_0 == STAR))
                    {
                        alt182=4;
                    }
                    else if ( (LA182_0 == 87 || LA182_0 == 155))
                    {
                        alt182=5;
                    }
                    else if ( (LA182_0 == 126 || LA182_0 == 145))
                    {
                        alt182=6;
                    }
                    else
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }


                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 182;
                        EXCEPTION->state        = 0;


                        goto ruleunary_expressionEx;

                    }
                }
                switch (alt182)
                {
            	case 1:
            	    // CPP_grammar_.g:2053:4: ( postfix_expression )=> postfix_expression
            	    {
            	        FOLLOWPUSH(FOLLOW_postfix_expression_in_unary_expression7904);
            	        postfix_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:2056:4: PLUSPLUS unary_expression
            	    {
            	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_unary_expression7914);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_unary_expression_in_unary_expression7916);
            	        unary_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:2058:4: MINUSMINUS unary_expression
            	    {
            	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_unary_expression7926);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_unary_expression_in_unary_expression7928);
            	        unary_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // CPP_grammar_.g:2060:4: unary_operator cast_expression
            	    {
            	        FOLLOWPUSH(FOLLOW_unary_operator_in_unary_expression7938);
            	        unary_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_cast_expression_in_unary_expression7940);
            	        cast_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // CPP_grammar_.g:2062:4: ( 'sizeof' | '__alignof__' ) ( ( unary_expression )=> unary_expression | LPAREN type_id RPAREN )
            	    {
            	        if ( LA(1) == 87 || LA(1) == 155 )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	            FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return ;
            	            }

            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleunary_expressionEx;
            	        }


            	        // CPP_grammar_.g:2065:4: ( ( unary_expression )=> unary_expression | LPAREN type_id RPAREN )
            	        {
            	            int alt179=2;
            	            {
            	                int LA179_0 = LA(1);
            	                if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == SCOPE))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == ID))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 167))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 131))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 121))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 158))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 168))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 120))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 174))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 116))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 153))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 141))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 95 || LA179_0 == 108))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 92 || LA179_0 == 105))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 93 || LA179_0 == 106))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 94 || LA179_0 == 107))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 100 || LA179_0 == 112))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 142))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 154))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 169))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 135))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 128))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 172))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == OPERATOR))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == TILDE))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == OCTALINT))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == DECIMALINT))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == HEXADECIMALINT))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == CharLiteral))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == WCharLiteral))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == StringLiteral || LA179_0 == WStringLiteral))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == FLOATONE))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == FLOATTWO))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 163))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 134))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 161))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (LA179_0 == LPAREN))
            	                {
            	                    {
            	                        int LA179_37 = LA(2);
            	                        if ( (synpred80_CPP_grammar_(ctx)))
            	                        {
            	                            alt179=1;
            	                        }
            	                        else if ( (ANTLR3_TRUE))
            	                        {
            	                            alt179=2;
            	                        }
            	                        else
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE;
            	                                return ;
            	                            }


            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 179;
            	                            EXCEPTION->state        = 37;


            	                            goto ruleunary_expressionEx;

            	                        }
            	                    }
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 123 || LA179_0 == 129 || LA179_0 == 151 || LA179_0 == 157))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 166))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == PLUSPLUS))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == MINUSMINUS))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == AMPERSAND || LA179_0 == MINUS || LA179_0 == NOT || LA179_0 == PLUS || LA179_0 == STAR))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 87 || LA179_0 == 155))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 145))
            	                {
            	                    alt179=1;
            	                }
            	                else if ( (synpred80_CPP_grammar_(ctx)) && (LA179_0 == 126))
            	                {
            	                    alt179=1;
            	                }
            	                else
            	                {
            	                    if (BACKTRACKING>0)
            	                    {
            	                        FAILEDFLAG = ANTLR3_TRUE;
            	                        return ;
            	                    }


            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 179;
            	                    EXCEPTION->state        = 0;


            	                    goto ruleunary_expressionEx;

            	                }
            	            }
            	            switch (alt179)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:2065:6: ( unary_expression )=> unary_expression
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_unary_expression_in_unary_expression7981);
            	        	        unary_expression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleunary_expressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:2068:5: LPAREN type_id RPAREN
            	        	    {
            	        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_unary_expression7992);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleunary_expressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        FOLLOWPUSH(FOLLOW_type_id_in_unary_expression7994);
            	        	        type_id(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleunary_expressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_unary_expression7996);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleunary_expressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 6:
            	    // CPP_grammar_.g:2071:4: ( SCOPE )? ( new_expression | delete_expression )
            	    {
            	        // CPP_grammar_.g:2071:4: ( SCOPE )?
            	        {
            	            int alt180=2;
            	            switch ( LA(1) )
            	            {
            	                case SCOPE:
            	                	{
            	                		alt180=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt180)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:2071:5: SCOPE
            	        	    {
            	        	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_unary_expression8014);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleunary_expressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // CPP_grammar_.g:2072:4: ( new_expression | delete_expression )
            	        {
            	            int alt181=2;
            	            switch ( LA(1) )
            	            {
            	            case 145:
            	            	{
            	            		alt181=1;
            	            	}
            	                break;
            	            case 126:
            	            	{
            	            		alt181=2;
            	            	}
            	                break;

            	            default:
            	                if (BACKTRACKING>0)
            	                {
            	                    FAILEDFLAG = ANTLR3_TRUE;
            	                    return ;
            	                }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 181;
            	                EXCEPTION->state        = 0;


            	                goto ruleunary_expressionEx;

            	            }

            	            switch (alt181)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:2072:5: new_expression
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_new_expression_in_unary_expression8022);
            	        	        new_expression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleunary_expressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // CPP_grammar_.g:2073:5: delete_expression
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_delete_expression_in_unary_expression8028);
            	        	        delete_expression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleunary_expressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunary_expressionEx; /* Prevent compiler warnings */
    ruleunary_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end unary_expression */

/**
 * $ANTLR start postfix_expression
 * CPP_grammar_.g:2080:1: postfix_expression : ( (ts= simple_type_specifier LPAREN )=>ts= simple_type_specifier LPAREN ( RPAREN LPAREN ( expression_list )? RPAREN | ( expression_list )? RPAREN ( DOT postfix_expression )? ) | primary_expression ( ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | ( DOT | POINTERTO ) ( 'template' )? id_expression | PLUSPLUS | MINUSMINUS )* ) | ( 'dynamic_cast' | 'static_cast' | 'reinterpret_cast' | 'const_cast' ) LESSTHAN ( 'const' )? ts= type_specifier ( ptr_operator )? GREATERTHAN LPAREN expression RPAREN | 'typeid' LPAREN ( ( type_id )=> type_id | expression ) RPAREN ( ( DOT | POINTERTO ) postfix_expression )? );
 */
static void
postfix_expression(pCPP_grammar_Parser ctx)
{
    TypeSpecifier ts;
    #undef	RETURN_TYPE_ts
    #define	RETURN_TYPE_ts TypeSpecifier

    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:2081:2: ( (ts= simple_type_specifier LPAREN )=>ts= simple_type_specifier LPAREN ( RPAREN LPAREN ( expression_list )? RPAREN | ( expression_list )? RPAREN ( DOT postfix_expression )? ) | primary_expression ( ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | ( DOT | POINTERTO ) ( 'template' )? id_expression | PLUSPLUS | MINUSMINUS )* ) | ( 'dynamic_cast' | 'static_cast' | 'reinterpret_cast' | 'const_cast' ) LESSTHAN ( 'const' )? ts= type_specifier ( ptr_operator )? GREATERTHAN LPAREN expression RPAREN | 'typeid' LPAREN ( ( type_id )=> type_id | expression ) RPAREN ( ( DOT | POINTERTO ) postfix_expression )? )

            ANTLR3_UINT32 alt194;

            alt194=4;

            {
                int LA194_0 = LA(1);
                if ( (LA194_0 == SCOPE))
                {
                    {
                        int LA194_1 = LA(2);
                        if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred81_CPP_grammar_(ctx)) )))
                        {
                            alt194=1;
                        }
                        else if ( (ANTLR3_TRUE))
                        {
                            alt194=2;
                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }


                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 194;
                            EXCEPTION->state        = 1;


                            goto rulepostfix_expressionEx;

                        }
                    }
                }
                else if ( (LA194_0 == ID))
                {
                    {
                        int LA194_2 = LA(2);
                        if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred81_CPP_grammar_(ctx)) )))
                        {
                            alt194=1;
                        }
                        else if ( (ANTLR3_TRUE))
                        {
                            alt194=2;
                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }


                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 194;
                            EXCEPTION->state        = 2;


                            goto rulepostfix_expressionEx;

                        }
                    }
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 167))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 131))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 121))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 158))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 168))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 120))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 174))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 116))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 153))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 141))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 95 || LA194_0 == 108))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 92 || LA194_0 == 105))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 93 || LA194_0 == 106))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 94 || LA194_0 == 107))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 100 || LA194_0 == 112))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 142))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 154))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 169))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 135))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 128))
                {
                    alt194=1;
                }
                else if ( (synpred81_CPP_grammar_(ctx)) && (LA194_0 == 172))
                {
                    alt194=1;
                }
                else if ( (LA194_0 == CharLiteral || LA194_0 == DECIMALINT || ((LA194_0 >= FLOATONE) && (LA194_0 <= FLOATTWO)) || LA194_0 == HEXADECIMALINT || LA194_0 == LPAREN || ((LA194_0 >= OCTALINT) && (LA194_0 <= OPERATOR)) || ((LA194_0 >= StringLiteral) && (LA194_0 <= TILDE)) || ((LA194_0 >= WCharLiteral) && (LA194_0 <= WStringLiteral)) || LA194_0 == 134 || LA194_0 == 161 || LA194_0 == 163))
                {
                    alt194=2;
                }
                else if ( (LA194_0 == 123 || LA194_0 == 129 || LA194_0 == 151 || LA194_0 == 157))
                {
                    alt194=3;
                }
                else if ( (LA194_0 == 166))
                {
                    alt194=4;
                }
                else
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }


                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 194;
                    EXCEPTION->state        = 0;


                    goto rulepostfix_expressionEx;

                }
            }
            switch (alt194)
            {
        	case 1:
        	    // CPP_grammar_.g:2096:3: (ts= simple_type_specifier LPAREN )=>ts= simple_type_specifier LPAREN ( RPAREN LPAREN ( expression_list )? RPAREN | ( expression_list )? RPAREN ( DOT postfix_expression )? )
        	    {
        	        FOLLOWPUSH(FOLLOW_simple_type_specifier_in_postfix_expression8098);
        	        ts=simple_type_specifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_postfix_expression8100);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:2098:3: ( RPAREN LPAREN ( expression_list )? RPAREN | ( expression_list )? RPAREN ( DOT postfix_expression )? )
        	        {
        	            int alt186=2;
        	            switch ( LA(1) )
        	            {
        	            case RPAREN:
        	            	{
        	            		switch ( LA(2) )
        	            		{
        	            		case LPAREN:
        	            			{
        	            				alt186=1;
        	            			}
        	            		    break;
        	            		case EOF:
        	            		case AMPERSAND:
        	            		case AND:
        	            		case ASSIGNEQUAL:
        	            		case BITWISEANDEQUAL:
        	            		case BITWISEOR:
        	            		case BITWISEOREQUAL:
        	            		case BITWISEXOR:
        	            		case BITWISEXOREQUAL:
        	            		case COLON:
        	            		case COMMA:
        	            		case DIVIDE:
        	            		case DIVIDEEQUAL:
        	            		case DOT:
        	            		case DOTMBR:
        	            		case ELLIPSIS:
        	            		case EQUAL:
        	            		case GREATERTHAN:
        	            		case GREATERTHANOREQUALTO:
        	            		case LESSTHAN:
        	            		case LESSTHANOREQUALTO:
        	            		case MINUS:
        	            		case MINUSEQUAL:
        	            		case MOD:
        	            		case MODEQUAL:
        	            		case NOTEQUAL:
        	            		case OR:
        	            		case PLUS:
        	            		case PLUSEQUAL:
        	            		case POINTERTOMBR:
        	            		case QUESTIONMARK:
        	            		case RCURLY:
        	            		case RPAREN:
        	            		case RSQUARE:
        	            		case SEMICOLON:
        	            		case SHIFTLEFT:
        	            		case SHIFTLEFTEQUAL:
        	            		case SHIFTRIGHT:
        	            		case SHIFTRIGHTEQUAL:
        	            		case STAR:
        	            		case TIMESEQUAL:
        	            			{
        	            				alt186=2;
        	            			}
        	            		    break;

        	            		default:
        	            		    if (BACKTRACKING>0)
        	            		    {
        	            		        FAILEDFLAG = ANTLR3_TRUE;
        	            		        return ;
        	            		    }

        	            		    CONSTRUCTEX();
        	            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	            		    EXCEPTION->message      = (void *)"";
        	            		    EXCEPTION->decisionNum  = 186;
        	            		    EXCEPTION->state        = 1;


        	            		    goto rulepostfix_expressionEx;

        	            		}

        	            	}
        	                break;
        	            case AMPERSAND:
        	            case CharLiteral:
        	            case DECIMALINT:
        	            case FLOATONE:
        	            case FLOATTWO:
        	            case HEXADECIMALINT:
        	            case ID:
        	            case LPAREN:
        	            case MINUS:
        	            case MINUSMINUS:
        	            case NOT:
        	            case OCTALINT:
        	            case OPERATOR:
        	            case PLUS:
        	            case PLUSPLUS:
        	            case SCOPE:
        	            case STAR:
        	            case StringLiteral:
        	            case TILDE:
        	            case WCharLiteral:
        	            case WStringLiteral:
        	            case 87:
        	            case 92:
        	            case 93:
        	            case 94:
        	            case 95:
        	            case 100:
        	            case 105:
        	            case 106:
        	            case 107:
        	            case 108:
        	            case 112:
        	            case 116:
        	            case 120:
        	            case 121:
        	            case 123:
        	            case 126:
        	            case 128:
        	            case 129:
        	            case 131:
        	            case 134:
        	            case 135:
        	            case 141:
        	            case 142:
        	            case 145:
        	            case 151:
        	            case 153:
        	            case 154:
        	            case 155:
        	            case 157:
        	            case 158:
        	            case 161:
        	            case 163:
        	            case 166:
        	            case 167:
        	            case 168:
        	            case 169:
        	            case 172:
        	            case 174:
        	            	{
        	            		alt186=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return ;
        	                }

        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 186;
        	                EXCEPTION->state        = 0;


        	                goto rulepostfix_expressionEx;

        	            }

        	            switch (alt186)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:2099:3: RPAREN LPAREN ( expression_list )? RPAREN
        	        	    {
        	        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_postfix_expression8108);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepostfix_expressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_postfix_expression8110);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepostfix_expressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        // CPP_grammar_.g:2099:17: ( expression_list )?
        	        	        {
        	        	            int alt183=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case AMPERSAND:
        	        	                case CharLiteral:
        	        	                case DECIMALINT:
        	        	                case FLOATONE:
        	        	                case FLOATTWO:
        	        	                case HEXADECIMALINT:
        	        	                case ID:
        	        	                case LPAREN:
        	        	                case MINUS:
        	        	                case MINUSMINUS:
        	        	                case NOT:
        	        	                case OCTALINT:
        	        	                case OPERATOR:
        	        	                case PLUS:
        	        	                case PLUSPLUS:
        	        	                case SCOPE:
        	        	                case STAR:
        	        	                case StringLiteral:
        	        	                case TILDE:
        	        	                case WCharLiteral:
        	        	                case WStringLiteral:
        	        	                case 87:
        	        	                case 92:
        	        	                case 93:
        	        	                case 94:
        	        	                case 95:
        	        	                case 100:
        	        	                case 105:
        	        	                case 106:
        	        	                case 107:
        	        	                case 108:
        	        	                case 112:
        	        	                case 116:
        	        	                case 120:
        	        	                case 121:
        	        	                case 123:
        	        	                case 126:
        	        	                case 128:
        	        	                case 129:
        	        	                case 131:
        	        	                case 134:
        	        	                case 135:
        	        	                case 141:
        	        	                case 142:
        	        	                case 145:
        	        	                case 151:
        	        	                case 153:
        	        	                case 154:
        	        	                case 155:
        	        	                case 157:
        	        	                case 158:
        	        	                case 161:
        	        	                case 163:
        	        	                case 166:
        	        	                case 167:
        	        	                case 168:
        	        	                case 169:
        	        	                case 172:
        	        	                case 174:
        	        	                	{
        	        	                		alt183=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt183)
        	        	            {
        	        	        	case 1:
        	        	        	    // CPP_grammar_.g:2099:18: expression_list
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_expression_list_in_postfix_expression8113);
        	        	        	        expression_list(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepostfix_expressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return ;
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_postfix_expression8117);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepostfix_expressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CPP_grammar_.g:2101:3: ( expression_list )? RPAREN ( DOT postfix_expression )?
        	        	    {
        	        	        // CPP_grammar_.g:2101:3: ( expression_list )?
        	        	        {
        	        	            int alt184=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case AMPERSAND:
        	        	                case CharLiteral:
        	        	                case DECIMALINT:
        	        	                case FLOATONE:
        	        	                case FLOATTWO:
        	        	                case HEXADECIMALINT:
        	        	                case ID:
        	        	                case LPAREN:
        	        	                case MINUS:
        	        	                case MINUSMINUS:
        	        	                case NOT:
        	        	                case OCTALINT:
        	        	                case OPERATOR:
        	        	                case PLUS:
        	        	                case PLUSPLUS:
        	        	                case SCOPE:
        	        	                case STAR:
        	        	                case StringLiteral:
        	        	                case TILDE:
        	        	                case WCharLiteral:
        	        	                case WStringLiteral:
        	        	                case 87:
        	        	                case 92:
        	        	                case 93:
        	        	                case 94:
        	        	                case 95:
        	        	                case 100:
        	        	                case 105:
        	        	                case 106:
        	        	                case 107:
        	        	                case 108:
        	        	                case 112:
        	        	                case 116:
        	        	                case 120:
        	        	                case 121:
        	        	                case 123:
        	        	                case 126:
        	        	                case 128:
        	        	                case 129:
        	        	                case 131:
        	        	                case 134:
        	        	                case 135:
        	        	                case 141:
        	        	                case 142:
        	        	                case 145:
        	        	                case 151:
        	        	                case 153:
        	        	                case 154:
        	        	                case 155:
        	        	                case 157:
        	        	                case 158:
        	        	                case 161:
        	        	                case 163:
        	        	                case 166:
        	        	                case 167:
        	        	                case 168:
        	        	                case 169:
        	        	                case 172:
        	        	                case 174:
        	        	                	{
        	        	                		alt184=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt184)
        	        	            {
        	        	        	case 1:
        	        	        	    // CPP_grammar_.g:2101:4: expression_list
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_expression_list_in_postfix_expression8127);
        	        	        	        expression_list(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepostfix_expressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return ;
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_postfix_expression8131);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepostfix_expressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        // CPP_grammar_.g:2103:3: ( DOT postfix_expression )?
        	        	        {
        	        	            int alt185=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case DOT:
        	        	                	{
        	        	                		alt185=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt185)
        	        	            {
        	        	        	case 1:
        	        	        	    // CPP_grammar_.g:2103:4: DOT postfix_expression
        	        	        	    {
        	        	        	         MATCHT(DOT, &FOLLOW_DOT_in_postfix_expression8139);
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepostfix_expressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return ;
        	        	        	        }


        	        	        	        FOLLOWPUSH(FOLLOW_postfix_expression_in_postfix_expression8141);
        	        	        	        postfix_expression(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepostfix_expressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return ;
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:2106:3: primary_expression ( ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | ( DOT | POINTERTO ) ( 'template' )? id_expression | PLUSPLUS | MINUSMINUS )* )
        	    {
        	        FOLLOWPUSH(FOLLOW_primary_expression_in_postfix_expression8156);
        	        primary_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:2107:3: ( ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | ( DOT | POINTERTO ) ( 'template' )? id_expression | PLUSPLUS | MINUSMINUS )* )
        	        // CPP_grammar_.g:2108:10: ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | ( DOT | POINTERTO ) ( 'template' )? id_expression | PLUSPLUS | MINUSMINUS )*
        	        {
        	            // CPP_grammar_.g:2108:10: ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | ( DOT | POINTERTO ) ( 'template' )? id_expression | PLUSPLUS | MINUSMINUS )*

        	            for (;;)
        	            {
        	                int alt189=6;
        	                switch ( LA(1) )
        	                {
        	                case LSQUARE:
        	                	{
        	                		alt189=1;
        	                	}
        	                    break;
        	                case LPAREN:
        	                	{
        	                		alt189=2;
        	                	}
        	                    break;
        	                case DOT:
        	                case POINTERTO:
        	                	{
        	                		alt189=3;
        	                	}
        	                    break;
        	                case PLUSPLUS:
        	                	{
        	                		alt189=4;
        	                	}
        	                    break;
        	                case MINUSMINUS:
        	                	{
        	                		alt189=5;
        	                	}
        	                    break;

        	                }

        	                switch (alt189)
        	                {
        	            	case 1:
        	            	    // CPP_grammar_.g:2108:11: LSQUARE expression RSQUARE
        	            	    {
        	            	         MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_postfix_expression8172);
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulepostfix_expressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }


        	            	        FOLLOWPUSH(FOLLOW_expression_in_postfix_expression8174);
        	            	        expression(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulepostfix_expressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }


        	            	         MATCHT(RSQUARE, &FOLLOW_RSQUARE_in_postfix_expression8176);
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulepostfix_expressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }


        	            	    }
        	            	    break;
        	            	case 2:
        	            	    // CPP_grammar_.g:2109:7: LPAREN ( expression_list )? RPAREN
        	            	    {
        	            	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_postfix_expression8184);
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulepostfix_expressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }


        	            	        // CPP_grammar_.g:2109:14: ( expression_list )?
        	            	        {
        	            	            int alt187=2;
        	            	            switch ( LA(1) )
        	            	            {
        	            	                case AMPERSAND:
        	            	                case CharLiteral:
        	            	                case DECIMALINT:
        	            	                case FLOATONE:
        	            	                case FLOATTWO:
        	            	                case HEXADECIMALINT:
        	            	                case ID:
        	            	                case LPAREN:
        	            	                case MINUS:
        	            	                case MINUSMINUS:
        	            	                case NOT:
        	            	                case OCTALINT:
        	            	                case OPERATOR:
        	            	                case PLUS:
        	            	                case PLUSPLUS:
        	            	                case SCOPE:
        	            	                case STAR:
        	            	                case StringLiteral:
        	            	                case TILDE:
        	            	                case WCharLiteral:
        	            	                case WStringLiteral:
        	            	                case 87:
        	            	                case 92:
        	            	                case 93:
        	            	                case 94:
        	            	                case 95:
        	            	                case 100:
        	            	                case 105:
        	            	                case 106:
        	            	                case 107:
        	            	                case 108:
        	            	                case 112:
        	            	                case 116:
        	            	                case 120:
        	            	                case 121:
        	            	                case 123:
        	            	                case 126:
        	            	                case 128:
        	            	                case 129:
        	            	                case 131:
        	            	                case 134:
        	            	                case 135:
        	            	                case 141:
        	            	                case 142:
        	            	                case 145:
        	            	                case 151:
        	            	                case 153:
        	            	                case 154:
        	            	                case 155:
        	            	                case 157:
        	            	                case 158:
        	            	                case 161:
        	            	                case 163:
        	            	                case 166:
        	            	                case 167:
        	            	                case 168:
        	            	                case 169:
        	            	                case 172:
        	            	                case 174:
        	            	                	{
        	            	                		alt187=1;
        	            	                	}
        	            	                    break;
        	            	            }

        	            	            switch (alt187)
        	            	            {
        	            	        	case 1:
        	            	        	    // CPP_grammar_.g:2109:15: expression_list
        	            	        	    {
        	            	        	        FOLLOWPUSH(FOLLOW_expression_list_in_postfix_expression8187);
        	            	        	        expression_list(ctx);

        	            	        	        FOLLOWPOP();
        	            	        	        if  (HASEXCEPTION())
        	            	        	        {
        	            	        	            goto rulepostfix_expressionEx;
        	            	        	        }
        	            	        	        if (HASFAILED())
        	            	        	        {
        	            	        	            return ;
        	            	        	        }


        	            	        	    }
        	            	        	    break;

        	            	            }
        	            	        }

        	            	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_postfix_expression8191);
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulepostfix_expressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }


        	            	    }
        	            	    break;
        	            	case 3:
        	            	    // CPP_grammar_.g:2110:7: ( DOT | POINTERTO ) ( 'template' )? id_expression
        	            	    {
        	            	        if ( LA(1) == DOT || LA(1) == POINTERTO )
        	            	        {
        	            	            CONSUME();
        	            	            PERRORRECOVERY=ANTLR3_FALSE;
        	            	            FAILEDFLAG=ANTLR3_FALSE;

        	            	        }
        	            	        else
        	            	        {
        	            	            if (BACKTRACKING>0)
        	            	            {
        	            	                FAILEDFLAG = ANTLR3_TRUE;
        	            	                return ;
        	            	            }

        	            	            CONSTRUCTEX();
        	            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            	            EXCEPTION->expectingSet = NULL;

        	            	            goto rulepostfix_expressionEx;
        	            	        }


        	            	        // CPP_grammar_.g:2110:23: ( 'template' )?
        	            	        {
        	            	            int alt188=2;
        	            	            switch ( LA(1) )
        	            	            {
        	            	                case 160:
        	            	                	{
        	            	                		alt188=1;
        	            	                	}
        	            	                    break;
        	            	            }

        	            	            switch (alt188)
        	            	            {
        	            	        	case 1:
        	            	        	    // CPP_grammar_.g:2110:24: 'template'
        	            	        	    {
        	            	        	         MATCHT(160, &FOLLOW_160_in_postfix_expression8207);
        	            	        	        if  (HASEXCEPTION())
        	            	        	        {
        	            	        	            goto rulepostfix_expressionEx;
        	            	        	        }
        	            	        	        if (HASFAILED())
        	            	        	        {
        	            	        	            return ;
        	            	        	        }


        	            	        	    }
        	            	        	    break;

        	            	            }
        	            	        }

        	            	        FOLLOWPUSH(FOLLOW_id_expression_in_postfix_expression8211);
        	            	        id_expression(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulepostfix_expressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }


        	            	    }
        	            	    break;
        	            	case 4:
        	            	    // CPP_grammar_.g:2111:7: PLUSPLUS
        	            	    {
        	            	         MATCHT(PLUSPLUS, &FOLLOW_PLUSPLUS_in_postfix_expression8219);
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulepostfix_expressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }


        	            	    }
        	            	    break;
        	            	case 5:
        	            	    // CPP_grammar_.g:2112:7: MINUSMINUS
        	            	    {
        	            	         MATCHT(MINUSMINUS, &FOLLOW_MINUSMINUS_in_postfix_expression8228);
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulepostfix_expressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop189;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop189: ; /* Jump out to here if this rule does not match */


        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:2116:3: ( 'dynamic_cast' | 'static_cast' | 'reinterpret_cast' | 'const_cast' ) LESSTHAN ( 'const' )? ts= type_specifier ( ptr_operator )? GREATERTHAN LPAREN expression RPAREN
        	    {
        	        if ( LA(1) == 123 || LA(1) == 129 || LA(1) == 151 || LA(1) == 157 )
        	        {
        	            CONSUME();
        	            PERRORRECOVERY=ANTLR3_FALSE;
        	            FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                return ;
        	            }

        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = NULL;

        	            goto rulepostfix_expressionEx;
        	        }


        	         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_postfix_expression8257);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:2117:12: ( 'const' )?
        	        {
        	            int alt190=2;
        	            switch ( LA(1) )
        	            {
        	                case 122:
        	                	{
        	                		alt190=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt190)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:2117:13: 'const'
        	        	    {
        	        	         MATCHT(122, &FOLLOW_122_in_postfix_expression8260);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepostfix_expressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        FOLLOWPUSH(FOLLOW_type_specifier_in_postfix_expression8268);
        	        ts=type_specifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:2117:43: ( ptr_operator )?
        	        {
        	            int alt191=2;
        	            switch ( LA(1) )
        	            {
        	                case AMPERSAND:
        	                case ID:
        	                case SCOPE:
        	                case STAR:
        	                case 88:
        	                case 90:
        	                case 96:
        	                case 97:
        	                case 98:
        	                case 99:
        	                case 101:
        	                case 103:
        	                case 109:
        	                case 110:
        	                case 111:
        	                case 146:
        	                	{
        	                		alt191=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt191)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:2117:44: ptr_operator
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_ptr_operator_in_postfix_expression8271);
        	        	        ptr_operator(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepostfix_expressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_postfix_expression8275);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_postfix_expression8279);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_postfix_expression8281);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_postfix_expression8283);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // CPP_grammar_.g:2120:3: 'typeid' LPAREN ( ( type_id )=> type_id | expression ) RPAREN ( ( DOT | POINTERTO ) postfix_expression )?
        	    {
        	         MATCHT(166, &FOLLOW_166_in_postfix_expression8290);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_postfix_expression8295);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:2121:10: ( ( type_id )=> type_id | expression )
        	        {
        	            int alt192=2;
        	            {
        	                int LA192_0 = LA(1);
        	                if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 165))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 137))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 115))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 150))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 156))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 133))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 143))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 122))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 173))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 91 || LA192_0 == 104 || LA192_0 == 140))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 171))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 132))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (synpred82_CPP_grammar_(ctx)) && (LA192_0 == 89 || LA192_0 == 102))
        	                {
        	                    alt192=1;
        	                }
        	                else if ( (LA192_0 == SCOPE))
        	                {
        	                    {
        	                        int LA192_14 = LA(2);
        	                        if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred82_CPP_grammar_(ctx)) )))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 14;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == ID))
        	                {
        	                    {
        	                        int LA192_15 = LA(2);
        	                        if ( (( (( ((qualifiedItemIsOneOf(qiType|qiCtor,0))) && ((qualifiedItemIsOneOf(qiType|qiCtor,0))) )) && (synpred82_CPP_grammar_(ctx)) )))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 15;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 167))
        	                {
        	                    {
        	                        int LA192_16 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 16;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 131))
        	                {
        	                    {
        	                        int LA192_17 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 17;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 121))
        	                {
        	                    {
        	                        int LA192_18 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 18;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 158))
        	                {
        	                    {
        	                        int LA192_19 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 19;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 168))
        	                {
        	                    {
        	                        int LA192_20 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 20;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 120))
        	                {
        	                    {
        	                        int LA192_21 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 21;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 174))
        	                {
        	                    {
        	                        int LA192_22 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 22;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 116))
        	                {
        	                    {
        	                        int LA192_23 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 23;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 153))
        	                {
        	                    {
        	                        int LA192_24 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 24;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 141))
        	                {
        	                    {
        	                        int LA192_25 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 25;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 95 || LA192_0 == 108))
        	                {
        	                    {
        	                        int LA192_26 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 26;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 92 || LA192_0 == 105))
        	                {
        	                    {
        	                        int LA192_27 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 27;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 93 || LA192_0 == 106))
        	                {
        	                    {
        	                        int LA192_28 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 28;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 94 || LA192_0 == 107))
        	                {
        	                    {
        	                        int LA192_29 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 29;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 100 || LA192_0 == 112))
        	                {
        	                    {
        	                        int LA192_30 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 30;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 142))
        	                {
        	                    {
        	                        int LA192_31 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 31;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 154))
        	                {
        	                    {
        	                        int LA192_32 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 32;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 169))
        	                {
        	                    {
        	                        int LA192_33 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 33;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 135))
        	                {
        	                    {
        	                        int LA192_34 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 34;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 128))
        	                {
        	                    {
        	                        int LA192_35 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 35;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == 172))
        	                {
        	                    {
        	                        int LA192_36 = LA(2);
        	                        if ( (synpred82_CPP_grammar_(ctx)))
        	                        {
        	                            alt192=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE))
        	                        {
        	                            alt192=2;
        	                        }
        	                        else
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE;
        	                                return ;
        	                            }


        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 192;
        	                            EXCEPTION->state        = 36;


        	                            goto rulepostfix_expressionEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA192_0 == AMPERSAND || LA192_0 == CharLiteral || LA192_0 == DECIMALINT || ((LA192_0 >= FLOATONE) && (LA192_0 <= FLOATTWO)) || LA192_0 == HEXADECIMALINT || LA192_0 == LPAREN || LA192_0 == MINUS || LA192_0 == MINUSMINUS || LA192_0 == NOT || ((LA192_0 >= OCTALINT) && (LA192_0 <= OPERATOR)) || LA192_0 == PLUS || LA192_0 == PLUSPLUS || LA192_0 == STAR || ((LA192_0 >= StringLiteral) && (LA192_0 <= TILDE)) || ((LA192_0 >= WCharLiteral) && (LA192_0 <= WStringLiteral)) || LA192_0 == 87 || LA192_0 == 123 || LA192_0 == 126 || LA192_0 == 129 || LA192_0 == 134 || LA192_0 == 145 || LA192_0 == 151 || LA192_0 == 155 || LA192_0 == 157 || LA192_0 == 161 || LA192_0 == 163 || LA192_0 == 166))
        	                {
        	                    alt192=2;
        	                }
        	                else
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE;
        	                        return ;
        	                    }


        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 192;
        	                    EXCEPTION->state        = 0;


        	                    goto rulepostfix_expressionEx;

        	                }
        	            }
        	            switch (alt192)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:2121:11: ( type_id )=> type_id
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_type_id_in_postfix_expression8302);
        	        	        type_id(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepostfix_expressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // CPP_grammar_.g:2121:30: expression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_postfix_expression8304);
        	        	        expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepostfix_expressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_postfix_expression8307);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfix_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:2122:3: ( ( DOT | POINTERTO ) postfix_expression )?
        	        {
        	            int alt193=2;
        	            switch ( LA(1) )
        	            {
        	                case DOT:
        	                case POINTERTO:
        	                	{
        	                		alt193=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt193)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:2122:5: ( DOT | POINTERTO ) postfix_expression
        	        	    {
        	        	        if ( LA(1) == DOT || LA(1) == POINTERTO )
        	        	        {
        	        	            CONSUME();
        	        	            PERRORRECOVERY=ANTLR3_FALSE;
        	        	            FAILEDFLAG=ANTLR3_FALSE;

        	        	        }
        	        	        else
        	        	        {
        	        	            if (BACKTRACKING>0)
        	        	            {
        	        	                FAILEDFLAG = ANTLR3_TRUE;
        	        	                return ;
        	        	            }

        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	        	            EXCEPTION->expectingSet = NULL;

        	        	            goto rulepostfix_expressionEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_postfix_expression_in_postfix_expression8319);
        	        	        postfix_expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepostfix_expressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulepostfix_expressionEx; /* Prevent compiler warnings */
    rulepostfix_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end postfix_expression */

/**
 * $ANTLR start primary_expression
 * CPP_grammar_.g:2127:1: primary_expression : ( id_expression | literal | 'this' | LPAREN expression RPAREN );
 */
static void
primary_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:2128:2: ( id_expression | literal | 'this' | LPAREN expression RPAREN )

            ANTLR3_UINT32 alt195;

            alt195=4;

            switch ( LA(1) )
            {
            case ID:
            case OPERATOR:
            case SCOPE:
            case TILDE:
            	{
            		alt195=1;
            	}
                break;
            case CharLiteral:
            case DECIMALINT:
            case FLOATONE:
            case FLOATTWO:
            case HEXADECIMALINT:
            case OCTALINT:
            case StringLiteral:
            case WCharLiteral:
            case WStringLiteral:
            case 134:
            case 163:
            	{
            		alt195=2;
            	}
                break;
            case 161:
            	{
            		alt195=3;
            	}
                break;
            case LPAREN:
            	{
            		alt195=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 195;
                EXCEPTION->state        = 0;


                goto ruleprimary_expressionEx;

            }

            switch (alt195)
            {
        	case 1:
        	    // CPP_grammar_.g:2128:4: id_expression
        	    {
        	        FOLLOWPUSH(FOLLOW_id_expression_in_primary_expression8335);
        	        id_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:2129:4: literal
        	    {
        	        FOLLOWPUSH(FOLLOW_literal_in_primary_expression8340);
        	        literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:2130:4: 'this'
        	    {
        	         MATCHT(161, &FOLLOW_161_in_primary_expression8345);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // CPP_grammar_.g:2131:4: LPAREN expression RPAREN
        	    {
        	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_primary_expression8350);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_primary_expression8352);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_primary_expression8354);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleprimary_expressionEx; /* Prevent compiler warnings */
    ruleprimary_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end primary_expression */

/**
 * $ANTLR start id_expression
 * CPP_grammar_.g:2135:1: id_expression : (s1= qualified_id[bufQualifiedIdScope] ) ;
 */
static void
id_expression(pCPP_grammar_Parser ctx)
{

    		char bufQualifiedIdScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    CPP_grammar_Parser_qualified_id_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 CPP_grammar_Parser_qualified_id_return

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2139:2: ( (s1= qualified_id[bufQualifiedIdScope] ) )
        // CPP_grammar_.g:2140:3: (s1= qualified_id[bufQualifiedIdScope] )
        {
            // CPP_grammar_.g:2140:3: (s1= qualified_id[bufQualifiedIdScope] )
            // CPP_grammar_.g:2140:5: s1= qualified_id[bufQualifiedIdScope]
            {
                FOLLOWPUSH(FOLLOW_qualified_id_in_id_expression8381);
                s1=qualified_id(ctx, bufQualifiedIdScope);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleid_expressionEx;
                }
                if (HASFAILED())
                {
                    return ;
                }


            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleid_expressionEx; /* Prevent compiler warnings */
    ruleid_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end id_expression */

/**
 * $ANTLR start literal
 * CPP_grammar_.g:2146:1: literal : ( OCTALINT | DECIMALINT | HEXADECIMALINT | CharLiteral | WCharLiteral | ( StringLiteral | WStringLiteral )+ | FLOATONE | FLOATTWO | 'true' | 'false' ) ;
 */
static void
literal(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2147:2: ( ( OCTALINT | DECIMALINT | HEXADECIMALINT | CharLiteral | WCharLiteral | ( StringLiteral | WStringLiteral )+ | FLOATONE | FLOATTWO | 'true' | 'false' ) )
        // CPP_grammar_.g:2148:2: ( OCTALINT | DECIMALINT | HEXADECIMALINT | CharLiteral | WCharLiteral | ( StringLiteral | WStringLiteral )+ | FLOATONE | FLOATTWO | 'true' | 'false' )
        {
            // CPP_grammar_.g:2148:2: ( OCTALINT | DECIMALINT | HEXADECIMALINT | CharLiteral | WCharLiteral | ( StringLiteral | WStringLiteral )+ | FLOATONE | FLOATTWO | 'true' | 'false' )
            {
                int alt197=10;
                switch ( LA(1) )
                {
                case OCTALINT:
                	{
                		alt197=1;
                	}
                    break;
                case DECIMALINT:
                	{
                		alt197=2;
                	}
                    break;
                case HEXADECIMALINT:
                	{
                		alt197=3;
                	}
                    break;
                case CharLiteral:
                	{
                		alt197=4;
                	}
                    break;
                case WCharLiteral:
                	{
                		alt197=5;
                	}
                    break;
                case StringLiteral:
                case WStringLiteral:
                	{
                		alt197=6;
                	}
                    break;
                case FLOATONE:
                	{
                		alt197=7;
                	}
                    break;
                case FLOATTWO:
                	{
                		alt197=8;
                	}
                    break;
                case 163:
                	{
                		alt197=9;
                	}
                    break;
                case 134:
                	{
                		alt197=10;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 197;
                    EXCEPTION->state        = 0;


                    goto ruleliteralEx;

                }

                switch (alt197)
                {
            	case 1:
            	    // CPP_grammar_.g:2148:4: OCTALINT
            	    {
            	         MATCHT(OCTALINT, &FOLLOW_OCTALINT_in_literal8403);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleliteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:2149:4: DECIMALINT
            	    {
            	         MATCHT(DECIMALINT, &FOLLOW_DECIMALINT_in_literal8408);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleliteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:2150:4: HEXADECIMALINT
            	    {
            	         MATCHT(HEXADECIMALINT, &FOLLOW_HEXADECIMALINT_in_literal8413);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleliteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // CPP_grammar_.g:2151:4: CharLiteral
            	    {
            	         MATCHT(CharLiteral, &FOLLOW_CharLiteral_in_literal8418);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleliteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // CPP_grammar_.g:2152:4: WCharLiteral
            	    {
            	         MATCHT(WCharLiteral, &FOLLOW_WCharLiteral_in_literal8423);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleliteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 6:
            	    // CPP_grammar_.g:2153:4: ( StringLiteral | WStringLiteral )+
            	    {
            	        // CPP_grammar_.g:2153:4: ( StringLiteral | WStringLiteral )+
            	        {
            	            int cnt196=0;

            	            for (;;)
            	            {
            	                int alt196=2;
            	        	switch ( LA(1) )
            	        	{
            	        	case StringLiteral:
            	        	case WStringLiteral:
            	        		{
            	        			alt196=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt196)
            	        	{
            	        	    case 1:
            	        	        // CPP_grammar_.g:
            	        	        {
            	        	            if ( LA(1) == StringLiteral || LA(1) == WStringLiteral )
            	        	            {
            	        	                CONSUME();
            	        	                PERRORRECOVERY=ANTLR3_FALSE;
            	        	                FAILEDFLAG=ANTLR3_FALSE;

            	        	            }
            	        	            else
            	        	            {
            	        	                if (BACKTRACKING>0)
            	        	                {
            	        	                    FAILEDFLAG = ANTLR3_TRUE;
            	        	                    return ;
            	        	                }

            	        	                CONSTRUCTEX();
            	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	        	                EXCEPTION->expectingSet = NULL;

            	        	                goto ruleliteralEx;
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt196 >= 1 )
            	        		{
            	        		    goto loop196;
            	        		}
            	        		if (BACKTRACKING>0)
            	        		{
            	        		    FAILEDFLAG = ANTLR3_TRUE;
            	        		    return ;
            	        		}

            	        		/* mismatchedSetEx()
            	        		 */
            	        		CONSTRUCTEX();
            	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            	        		goto ruleliteralEx;
            	        	}
            	        	cnt196++;
            	            }
            	            loop196: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;
            	case 7:
            	    // CPP_grammar_.g:2154:4: FLOATONE
            	    {
            	         MATCHT(FLOATONE, &FOLLOW_FLOATONE_in_literal8438);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleliteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 8:
            	    // CPP_grammar_.g:2155:4: FLOATTWO
            	    {
            	         MATCHT(FLOATTWO, &FOLLOW_FLOATTWO_in_literal8443);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleliteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 9:
            	    // CPP_grammar_.g:2156:4: 'true'
            	    {
            	         MATCHT(163, &FOLLOW_163_in_literal8448);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleliteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 10:
            	    // CPP_grammar_.g:2157:4: 'false'
            	    {
            	         MATCHT(134, &FOLLOW_134_in_literal8453);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleliteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end literal */

/**
 * $ANTLR start unary_operator
 * CPP_grammar_.g:2162:1: unary_operator : ( AMPERSAND | STAR | PLUS | MINUS | TILDE | NOT );
 */
static void
unary_operator(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2163:2: ( AMPERSAND | STAR | PLUS | MINUS | TILDE | NOT )
        // CPP_grammar_.g:
        {
            if ( LA(1) == AMPERSAND || LA(1) == MINUS || LA(1) == NOT || LA(1) == PLUS || LA(1) == STAR || LA(1) == TILDE )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleunary_operatorEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunary_operatorEx; /* Prevent compiler warnings */
    ruleunary_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end unary_operator */

/**
 * $ANTLR start new_expression
 * CPP_grammar_.g:2183:1: new_expression : ( 'new' ( ( LPAREN expression_list RPAREN )=> LPAREN expression_list RPAREN )? ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id ) ( ( new_initializer )=> new_initializer )? ) ;
 */
static void
new_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2184:2: ( ( 'new' ( ( LPAREN expression_list RPAREN )=> LPAREN expression_list RPAREN )? ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id ) ( ( new_initializer )=> new_initializer )? ) )
        // CPP_grammar_.g:2185:2: ( 'new' ( ( LPAREN expression_list RPAREN )=> LPAREN expression_list RPAREN )? ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id ) ( ( new_initializer )=> new_initializer )? )
        {
            // CPP_grammar_.g:2185:2: ( 'new' ( ( LPAREN expression_list RPAREN )=> LPAREN expression_list RPAREN )? ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id ) ( ( new_initializer )=> new_initializer )? )
            // CPP_grammar_.g:2186:3: 'new' ( ( LPAREN expression_list RPAREN )=> LPAREN expression_list RPAREN )? ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id ) ( ( new_initializer )=> new_initializer )?
            {
                 MATCHT(145, &FOLLOW_145_in_new_expression8524);
                if  (HASEXCEPTION())
                {
                    goto rulenew_expressionEx;
                }
                if (HASFAILED())
                {
                    return ;
                }


                // CPP_grammar_.g:2187:3: ( ( LPAREN expression_list RPAREN )=> LPAREN expression_list RPAREN )?
                {
                    int alt198=2;
                    switch ( LA(1) )
                    {
                        case LPAREN:
                        	{
                        		{
                        		    int LA198_1 = LA(2);
                        		    if ( (synpred83_CPP_grammar_(ctx)))
                        		    {
                        		        alt198=1;
                        		    }
                        		}
                        	}
                            break;
                    }

                    switch (alt198)
                    {
                	case 1:
                	    // CPP_grammar_.g:2187:5: ( LPAREN expression_list RPAREN )=> LPAREN expression_list RPAREN
                	    {
                	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_new_expression8544);
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulenew_expressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	        FOLLOWPUSH(FOLLOW_expression_list_in_new_expression8546);
                	        expression_list(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulenew_expressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_new_expression8548);
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulenew_expressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	    }
                	    break;

                    }
                }

                // CPP_grammar_.g:2189:3: ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id )
                {
                    int alt199=2;
                    {
                        int LA199_0 = LA(1);
                        if ( (synpred84_CPP_grammar_(ctx)) && (LA199_0 == LPAREN))
                        {
                            alt199=1;
                        }
                        else if ( (LA199_0 == ID || LA199_0 == SCOPE || LA199_0 == 89 || ((LA199_0 >= 91) && (LA199_0 <= 95)) || LA199_0 == 100 || LA199_0 == 102 || ((LA199_0 >= 104) && (LA199_0 <= 108)) || LA199_0 == 112 || ((LA199_0 >= 115) && (LA199_0 <= 116)) || ((LA199_0 >= 120) && (LA199_0 <= 122)) || LA199_0 == 128 || ((LA199_0 >= 131) && (LA199_0 <= 133)) || LA199_0 == 135 || LA199_0 == 137 || ((LA199_0 >= 140) && (LA199_0 <= 143)) || LA199_0 == 150 || ((LA199_0 >= 153) && (LA199_0 <= 154)) || LA199_0 == 156 || LA199_0 == 158 || LA199_0 == 165 || ((LA199_0 >= 167) && (LA199_0 <= 169)) || ((LA199_0 >= 171) && (LA199_0 <= 174))))
                        {
                            alt199=2;
                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }


                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 199;
                            EXCEPTION->state        = 0;


                            goto rulenew_expressionEx;

                        }
                    }
                    switch (alt199)
                    {
                	case 1:
                	    // CPP_grammar_.g:2190:3: ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN
                	    {
                	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_new_expression8567);
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulenew_expressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	        FOLLOWPUSH(FOLLOW_type_id_in_new_expression8569);
                	        type_id(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulenew_expressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_new_expression8571);
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulenew_expressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	    }
                	    break;
                	case 2:
                	    // CPP_grammar_.g:2191:4: new_type_id
                	    {
                	        FOLLOWPUSH(FOLLOW_new_type_id_in_new_expression8576);
                	        new_type_id(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulenew_expressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	    }
                	    break;

                    }
                }

                // CPP_grammar_.g:2192:3: ( ( new_initializer )=> new_initializer )?
                {
                    int alt200=2;
                    {
                        int LA200_0 = LA(1);
                        if ( (synpred85_CPP_grammar_(ctx)) && (LA200_0 == LPAREN))
                        {
                            alt200=1;
                        }
                    }
                    switch (alt200)
                    {
                	case 1:
                	    // CPP_grammar_.g:2193:3: ( new_initializer )=> new_initializer
                	    {
                	        FOLLOWPUSH(FOLLOW_new_initializer_in_new_expression8590);
                	        new_initializer(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulenew_expressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenew_expressionEx; /* Prevent compiler warnings */
    rulenew_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end new_expression */

/**
 * $ANTLR start new_initializer
 * CPP_grammar_.g:2198:1: new_initializer : LPAREN ( expression_list )? RPAREN ;
 */
static void
new_initializer(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2199:2: ( LPAREN ( expression_list )? RPAREN )
        // CPP_grammar_.g:2200:3: LPAREN ( expression_list )? RPAREN
        {
             MATCHT(LPAREN, &FOLLOW_LPAREN_in_new_initializer8610);
            if  (HASEXCEPTION())
            {
                goto rulenew_initializerEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:2200:10: ( expression_list )?
            {
                int alt201=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    case CharLiteral:
                    case DECIMALINT:
                    case FLOATONE:
                    case FLOATTWO:
                    case HEXADECIMALINT:
                    case ID:
                    case LPAREN:
                    case MINUS:
                    case MINUSMINUS:
                    case NOT:
                    case OCTALINT:
                    case OPERATOR:
                    case PLUS:
                    case PLUSPLUS:
                    case SCOPE:
                    case STAR:
                    case StringLiteral:
                    case TILDE:
                    case WCharLiteral:
                    case WStringLiteral:
                    case 87:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 100:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 112:
                    case 116:
                    case 120:
                    case 121:
                    case 123:
                    case 126:
                    case 128:
                    case 129:
                    case 131:
                    case 134:
                    case 135:
                    case 141:
                    case 142:
                    case 145:
                    case 151:
                    case 153:
                    case 154:
                    case 155:
                    case 157:
                    case 158:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 172:
                    case 174:
                    	{
                    		alt201=1;
                    	}
                        break;
                }

                switch (alt201)
                {
            	case 1:
            	    // CPP_grammar_.g:2200:11: expression_list
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_list_in_new_initializer8613);
            	        expression_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenew_initializerEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(RPAREN, &FOLLOW_RPAREN_in_new_initializer8617);
            if  (HASEXCEPTION())
            {
                goto rulenew_initializerEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenew_initializerEx; /* Prevent compiler warnings */
    rulenew_initializerEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end new_initializer */

/**
 * $ANTLR start new_type_id
 * CPP_grammar_.g:2204:1: new_type_id : declaration_specifiers ( new_declarator )? ;
 */
static void
new_type_id(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2205:2: ( declaration_specifiers ( new_declarator )? )
        // CPP_grammar_.g:2206:3: declaration_specifiers ( new_declarator )?
        {
            FOLLOWPUSH(FOLLOW_declaration_specifiers_in_new_type_id8632);
            declaration_specifiers(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulenew_type_idEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:2207:3: ( new_declarator )?
            {
                int alt202=2;
                switch ( LA(1) )
                {
                    case AMPERSAND:
                    	{
                    		alt202=1;
                    	}
                        break;
                    case ID:
                    case LSQUARE:
                    case SCOPE:
                    case 88:
                    case 90:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 101:
                    case 103:
                    case 109:
                    case 110:
                    case 111:
                    case 146:
                    	{
                    		alt202=1;
                    	}
                        break;
                    case STAR:
                    	{
                    		alt202=1;
                    	}
                        break;
                }

                switch (alt202)
                {
            	case 1:
            	    // CPP_grammar_.g:2208:4: new_declarator
            	    {
            	        FOLLOWPUSH(FOLLOW_new_declarator_in_new_type_id8642);
            	        new_declarator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenew_type_idEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulenew_type_idEx; /* Prevent compiler warnings */
    rulenew_type_idEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end new_type_id */

/**
 * $ANTLR start new_declarator
 * CPP_grammar_.g:2213:1: new_declarator : ( ptr_operator ( new_declarator )? | direct_new_declarator );
 */
static void
new_declarator(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  CPP_grammar_.g:2214:2: ( ptr_operator ( new_declarator )? | direct_new_declarator )

            ANTLR3_UINT32 alt204;

            alt204=2;

            switch ( LA(1) )
            {
            case AMPERSAND:
            case ID:
            case SCOPE:
            case STAR:
            case 88:
            case 90:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 109:
            case 110:
            case 111:
            case 146:
            	{
            		alt204=1;
            	}
                break;
            case LSQUARE:
            	{
            		alt204=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 204;
                EXCEPTION->state        = 0;


                goto rulenew_declaratorEx;

            }

            switch (alt204)
            {
        	case 1:
        	    // CPP_grammar_.g:2215:3: ptr_operator ( new_declarator )?
        	    {
        	        FOLLOWPUSH(FOLLOW_ptr_operator_in_new_declarator8663);
        	        ptr_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenew_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	        // CPP_grammar_.g:2216:3: ( new_declarator )?
        	        {
        	            int alt203=2;
        	            switch ( LA(1) )
        	            {
        	                case AMPERSAND:
        	                	{
        	                		alt203=1;
        	                	}
        	                    break;
        	                case ID:
        	                case LSQUARE:
        	                case SCOPE:
        	                case 88:
        	                case 90:
        	                case 96:
        	                case 97:
        	                case 98:
        	                case 99:
        	                case 101:
        	                case 103:
        	                case 109:
        	                case 110:
        	                case 111:
        	                case 146:
        	                	{
        	                		alt203=1;
        	                	}
        	                    break;
        	                case STAR:
        	                	{
        	                		alt203=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt203)
        	            {
        	        	case 1:
        	        	    // CPP_grammar_.g:2217:3: new_declarator
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_new_declarator_in_new_declarator8671);
        	        	        new_declarator(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenew_declaratorEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:2219:3: direct_new_declarator
        	    {
        	        FOLLOWPUSH(FOLLOW_direct_new_declarator_in_new_declarator8681);
        	        direct_new_declarator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenew_declaratorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulenew_declaratorEx; /* Prevent compiler warnings */
    rulenew_declaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end new_declarator */

/**
 * $ANTLR start direct_new_declarator
 * CPP_grammar_.g:2232:1: direct_new_declarator : ( ( LSQUARE expression RSQUARE ) )+ ;
 */
static void
direct_new_declarator(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2233:2: ( ( ( LSQUARE expression RSQUARE ) )+ )
        // CPP_grammar_.g:2234:3: ( ( LSQUARE expression RSQUARE ) )+
        {
            // CPP_grammar_.g:2234:3: ( ( LSQUARE expression RSQUARE ) )+
            {
                int cnt205=0;

                for (;;)
                {
                    int alt205=2;
            	switch ( LA(1) )
            	{
            	case LSQUARE:
            		{
            			alt205=1;
            		}
            	    break;

            	}

            	switch (alt205)
            	{
            	    case 1:
            	        // CPP_grammar_.g:2235:4: ( LSQUARE expression RSQUARE )
            	        {
            	            // CPP_grammar_.g:2235:4: ( LSQUARE expression RSQUARE )
            	            // CPP_grammar_.g:2235:5: LSQUARE expression RSQUARE
            	            {
            	                 MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_direct_new_declarator8710);
            	                if  (HASEXCEPTION())
            	                {
            	                    goto ruledirect_new_declaratorEx;
            	                }
            	                if (HASFAILED())
            	                {
            	                    return ;
            	                }


            	                FOLLOWPUSH(FOLLOW_expression_in_direct_new_declarator8712);
            	                expression(ctx);

            	                FOLLOWPOP();
            	                if  (HASEXCEPTION())
            	                {
            	                    goto ruledirect_new_declaratorEx;
            	                }
            	                if (HASFAILED())
            	                {
            	                    return ;
            	                }


            	                 MATCHT(RSQUARE, &FOLLOW_RSQUARE_in_direct_new_declarator8714);
            	                if  (HASEXCEPTION())
            	                {
            	                    goto ruledirect_new_declaratorEx;
            	                }
            	                if (HASFAILED())
            	                {
            	                    return ;
            	                }


            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt205 >= 1 )
            		{
            		    goto loop205;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruledirect_new_declaratorEx;
            	}
            	cnt205++;
                }
                loop205: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruledirect_new_declaratorEx; /* Prevent compiler warnings */
    ruledirect_new_declaratorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end direct_new_declarator */

/**
 * $ANTLR start ptr_operator
 * CPP_grammar_.g:2241:1: ptr_operator : ( AMPERSAND | ( '_cdecl' | '__cdecl' ) | ( '_near' | '__near' ) | ( '_far' | '__far' ) | '__interrupt' | ( 'pascal' | '_pascal' | '__pascal' ) | ( '_stdcall' | '__stdcall' ) | (s1= scope_override[$ptr_operator::pScopeOverrideBuf] STAR cv_qualifier_seq )=>s2= scope_override[bufScopeOverrideScope] STAR cv_qualifier_seq );
 */
static void
ptr_operator(pCPP_grammar_Parser ctx)
{

    		char bufScopeOverrideScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    char * s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 char *

    /* Initialize rule variables
     */
    ctx->pCPP_grammar_Parser_ptr_operatorTop = pCPP_grammar_Parser_ptr_operatorPush(ctx);

    		(SCOPE_TOP(ptr_operator))->pScopeOverrideBuf= bufScopeOverrideScope; 
    	
    {
        {
            //  CPP_grammar_.g:2251:2: ( AMPERSAND | ( '_cdecl' | '__cdecl' ) | ( '_near' | '__near' ) | ( '_far' | '__far' ) | '__interrupt' | ( 'pascal' | '_pascal' | '__pascal' ) | ( '_stdcall' | '__stdcall' ) | (s1= scope_override[$ptr_operator::pScopeOverrideBuf] STAR cv_qualifier_seq )=>s2= scope_override[bufScopeOverrideScope] STAR cv_qualifier_seq )

            ANTLR3_UINT32 alt206;

            alt206=8;

            {
                int LA206_0 = LA(1);
                if ( (LA206_0 == AMPERSAND))
                {
                    alt206=1;
                }
                else if ( (LA206_0 == 88 || LA206_0 == 101))
                {
                    alt206=2;
                }
                else if ( (LA206_0 == 97 || LA206_0 == 109))
                {
                    alt206=3;
                }
                else if ( (LA206_0 == 90 || LA206_0 == 103))
                {
                    alt206=4;
                }
                else if ( (LA206_0 == 96))
                {
                    alt206=5;
                }
                else if ( (LA206_0 == 98 || LA206_0 == 110 || LA206_0 == 146))
                {
                    alt206=6;
                }
                else if ( (LA206_0 == 99 || LA206_0 == 111))
                {
                    alt206=7;
                }
                else if ( (synpred86_CPP_grammar_(ctx)) && (LA206_0 == SCOPE))
                {
                    alt206=8;
                }
                else if ( (synpred86_CPP_grammar_(ctx)) && (LA206_0 == ID))
                {
                    alt206=8;
                }
                else if ( (synpred86_CPP_grammar_(ctx)) && (LA206_0 == STAR))
                {
                    alt206=8;
                }
                else
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        pCPP_grammar_Parser_ptr_operatorPop(ctx);

                        return ;
                    }


                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 206;
                    EXCEPTION->state        = 0;


                    goto ruleptr_operatorEx;

                }
            }
            switch (alt206)
            {
        	case 1:
        	    // CPP_grammar_.g:2252:5: AMPERSAND
        	    {
        	         MATCHT(AMPERSAND, &FOLLOW_AMPERSAND_in_ptr_operator8756);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleptr_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            is_address = TRUE;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:2253:5: ( '_cdecl' | '__cdecl' )
        	    {
        	        if ( LA(1) == 88 || LA(1) == 101 )
        	        {
        	            CONSUME();
        	            PERRORRECOVERY=ANTLR3_FALSE;
        	            FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	                return ;
        	            }

        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = NULL;

        	            goto ruleptr_operatorEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // CPP_grammar_.g:2254:6: ( '_near' | '__near' )
        	    {
        	        if ( LA(1) == 97 || LA(1) == 109 )
        	        {
        	            CONSUME();
        	            PERRORRECOVERY=ANTLR3_FALSE;
        	            FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	                return ;
        	            }

        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = NULL;

        	            goto ruleptr_operatorEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // CPP_grammar_.g:2255:6: ( '_far' | '__far' )
        	    {
        	        if ( LA(1) == 90 || LA(1) == 103 )
        	        {
        	            CONSUME();
        	            PERRORRECOVERY=ANTLR3_FALSE;
        	            FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	                return ;
        	            }

        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = NULL;

        	            goto ruleptr_operatorEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // CPP_grammar_.g:2256:6: '__interrupt'
        	    {
        	         MATCHT(96, &FOLLOW_96_in_ptr_operator8803);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleptr_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	            return ;
        	        }


        	    }
        	    break;
        	case 6:
        	    // CPP_grammar_.g:2257:6: ( 'pascal' | '_pascal' | '__pascal' )
        	    {
        	        if ( LA(1) == 98 || LA(1) == 110 || LA(1) == 146 )
        	        {
        	            CONSUME();
        	            PERRORRECOVERY=ANTLR3_FALSE;
        	            FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	                return ;
        	            }

        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = NULL;

        	            goto ruleptr_operatorEx;
        	        }


        	    }
        	    break;
        	case 7:
        	    // CPP_grammar_.g:2258:6: ( '_stdcall' | '__stdcall' )
        	    {
        	        if ( LA(1) == 99 || LA(1) == 111 )
        	        {
        	            CONSUME();
        	            PERRORRECOVERY=ANTLR3_FALSE;
        	            FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	                return ;
        	            }

        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = NULL;

        	            goto ruleptr_operatorEx;
        	        }


        	    }
        	    break;
        	case 8:
        	    // CPP_grammar_.g:2259:5: (s1= scope_override[$ptr_operator::pScopeOverrideBuf] STAR cv_qualifier_seq )=>s2= scope_override[bufScopeOverrideScope] STAR cv_qualifier_seq
        	    {
        	        FOLLOWPUSH(FOLLOW_scope_override_in_ptr_operator8858);
        	        s2=scope_override(ctx, bufScopeOverrideScope);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleptr_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	            return ;
        	        }


        	         MATCHT(STAR, &FOLLOW_STAR_in_ptr_operator8861);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleptr_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	            return ;
        	        }


        	        if ( BACKTRACKING==0 )
        	        {
        	            is_pointer = true;
        	        }


        	        FOLLOWPUSH(FOLLOW_cv_qualifier_seq_in_ptr_operator8865);
        	        cv_qualifier_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleptr_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            pCPP_grammar_Parser_ptr_operatorPop(ctx);

        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleptr_operatorEx; /* Prevent compiler warnings */
    ruleptr_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    pCPP_grammar_Parser_ptr_operatorPop(ctx);

    return ;
}
/* $ANTLR end ptr_operator */

/**
 * $ANTLR start ptr_to_member
 * CPP_grammar_.g:2270:1: ptr_to_member : s1= scope_override[bufScopeOverrideScope] STAR cv_qualifier_seq ;
 */
static void
ptr_to_member(pCPP_grammar_Parser ctx)
{

    		char bufScopeOverrideScope[CPPParser_MaxQualifiedItemSize+1] = {0}; 
    	
    char * s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 char *

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2274:2: (s1= scope_override[bufScopeOverrideScope] STAR cv_qualifier_seq )
        // CPP_grammar_.g:2275:3: s1= scope_override[bufScopeOverrideScope] STAR cv_qualifier_seq
        {
            FOLLOWPUSH(FOLLOW_scope_override_in_ptr_to_member8910);
            s1=scope_override(ctx, bufScopeOverrideScope);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleptr_to_memberEx;
            }
            if (HASFAILED())
            {
                return ;
            }


             MATCHT(STAR, &FOLLOW_STAR_in_ptr_to_member8913);
            if  (HASEXCEPTION())
            {
                goto ruleptr_to_memberEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            if ( BACKTRACKING==0 )
            {
                is_pointer = true;
            }


            FOLLOWPUSH(FOLLOW_cv_qualifier_seq_in_ptr_to_member8918);
            cv_qualifier_seq(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleptr_to_memberEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleptr_to_memberEx; /* Prevent compiler warnings */
    ruleptr_to_memberEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ptr_to_member */

/**
 * $ANTLR start cv_qualifier_seq
 * CPP_grammar_.g:2280:1: cv_qualifier_seq : (tq1= type_qualifier )* ;
 */
static void
cv_qualifier_seq(pCPP_grammar_Parser ctx)
{

    		TypeQualifier tq;
    	
    TypeQualifier tq1;
    #undef	RETURN_TYPE_tq1
    #define	RETURN_TYPE_tq1 TypeQualifier

    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2284:2: ( (tq1= type_qualifier )* )
        // CPP_grammar_.g:2285:3: (tq1= type_qualifier )*
        {
            // CPP_grammar_.g:2285:3: (tq1= type_qualifier )*

            for (;;)
            {
                int alt207=2;
                switch ( LA(1) )
                {
                case 122:
                case 173:
                	{
                		alt207=1;
                	}
                    break;

                }

                switch (alt207)
                {
            	case 1:
            	    // CPP_grammar_.g:2285:4: tq1= type_qualifier
            	    {
            	        FOLLOWPUSH(FOLLOW_type_qualifier_in_cv_qualifier_seq8944);
            	        tq1=type_qualifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecv_qualifier_seqEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            tq = tq1
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop207;	/* break out of the loop */
            	    break;
                }
            }
            loop207: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecv_qualifier_seqEx; /* Prevent compiler warnings */
    rulecv_qualifier_seqEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end cv_qualifier_seq */

/**
 * $ANTLR start scope_override
 * CPP_grammar_.g:2291:1: scope_override[char *pBufScopeOverrideBuf] returns [char *soReturn] : ( SCOPE )? ( ( ID LESSTHAN template_argument_list GREATERTHAN SCOPE )=>id1= ID LESSTHAN template_argument_list GREATERTHAN SCOPE ( 'template' )? | ( ID SCOPE )=>id2= ID SCOPE ( 'template' )? )* ;
 */
static char *
scope_override(pCPP_grammar_Parser ctx, char *pBufScopeOverrideBuf)
{
    char * soReturn;


    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;

    /* Initialize rule variables
     */


    		soReturn= pBufScopeOverrideBuf;

    	
    id1       = NULL;
    id2       = NULL;

    {
        // CPP_grammar_.g:2295:2: ( ( SCOPE )? ( ( ID LESSTHAN template_argument_list GREATERTHAN SCOPE )=>id1= ID LESSTHAN template_argument_list GREATERTHAN SCOPE ( 'template' )? | ( ID SCOPE )=>id2= ID SCOPE ( 'template' )? )* )
        // CPP_grammar_.g:2296:3: ( SCOPE )? ( ( ID LESSTHAN template_argument_list GREATERTHAN SCOPE )=>id1= ID LESSTHAN template_argument_list GREATERTHAN SCOPE ( 'template' )? | ( ID SCOPE )=>id2= ID SCOPE ( 'template' )? )*
        {
            // CPP_grammar_.g:2296:3: ( SCOPE )?
            {
                int alt208=2;
                switch ( LA(1) )
                {
                    case SCOPE:
                    	{
                    		alt208=1;
                    	}
                        break;
                }

                switch (alt208)
                {
            	case 1:
            	    // CPP_grammar_.g:2296:4: SCOPE
            	    {
            	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_scope_override8978);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulescope_overrideEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return soReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pBufScopeOverrideBuf,"::");
            	        }


            	    }
            	    break;

                }
            }

            // CPP_grammar_.g:2297:3: ( ( ID LESSTHAN template_argument_list GREATERTHAN SCOPE )=>id1= ID LESSTHAN template_argument_list GREATERTHAN SCOPE ( 'template' )? | ( ID SCOPE )=>id2= ID SCOPE ( 'template' )? )*

            for (;;)
            {
                int alt211=3;
                switch ( LA(1) )
                {
                case ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA211_2 = LA(2);
                		    if ( (synpred87_CPP_grammar_(ctx)))
                		    {
                		        alt211=1;
                		    }
                		    else if ( (synpred88_CPP_grammar_(ctx)))
                		    {
                		        alt211=2;
                		    }

                		}
                	}
                    break;

                }

                switch (alt211)
                {
            	case 1:
            	    // CPP_grammar_.g:2299:4: ( ID LESSTHAN template_argument_list GREATERTHAN SCOPE )=>id1= ID LESSTHAN template_argument_list GREATERTHAN SCOPE ( 'template' )?
            	    {
            	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_scope_override9016);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulescope_overrideEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return soReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pBufScopeOverrideBuf, reinterpret_cast<const char*>((id1->getText(id1))->chars));
            	        }


            	         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_scope_override9023);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulescope_overrideEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return soReturn;
            	        }


            	        FOLLOWPUSH(FOLLOW_template_argument_list_in_scope_override9025);
            	        template_argument_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulescope_overrideEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return soReturn;
            	        }


            	         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_scope_override9027);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulescope_overrideEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return soReturn;
            	        }


            	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_scope_override9033);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulescope_overrideEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return soReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pBufScopeOverrideBuf,"::");
            	        }


            	        // CPP_grammar_.g:2303:4: ( 'template' )?
            	        {
            	            int alt209=2;
            	            switch ( LA(1) )
            	            {
            	                case 160:
            	                	{
            	                		alt209=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt209)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:2303:5: 'template'
            	        	    {
            	        	         MATCHT(160, &FOLLOW_160_in_scope_override9041);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulescope_overrideEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return soReturn;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            strcat(pBufScopeOverrideBuf,"template");
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:2306:4: ( ID SCOPE )=>id2= ID SCOPE ( 'template' )?
            	    {
            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_scope_override9076);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulescope_overrideEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return soReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pBufScopeOverrideBuf, reinterpret_cast<const char*>((id2->getText(id2))->chars));
            	        }


            	         MATCHT(SCOPE, &FOLLOW_SCOPE_in_scope_override9083);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulescope_overrideEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return soReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pBufScopeOverrideBuf,"::");
            	        }


            	        // CPP_grammar_.g:2310:4: ( 'template' )?
            	        {
            	            int alt210=2;
            	            switch ( LA(1) )
            	            {
            	                case 160:
            	                	{
            	                		alt210=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt210)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:2310:5: 'template'
            	        	    {
            	        	         MATCHT(160, &FOLLOW_160_in_scope_override9091);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulescope_overrideEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return soReturn;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            strcat(pBufScopeOverrideBuf,"template");
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop211;	/* break out of the loop */
            	    break;
                }
            }
            loop211: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING==0 )
            {

                		soReturn= pBufScopeOverrideBuf;

                		
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulescope_overrideEx; /* Prevent compiler warnings */
    rulescope_overrideEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return soReturn;
}
/* $ANTLR end scope_override */

/**
 * $ANTLR start delete_expression
 * CPP_grammar_.g:2321:1: delete_expression : 'delete' ( LSQUARE RSQUARE )? cast_expression ;
 */
static void
delete_expression(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2322:2: ( 'delete' ( LSQUARE RSQUARE )? cast_expression )
        // CPP_grammar_.g:2323:3: 'delete' ( LSQUARE RSQUARE )? cast_expression
        {
             MATCHT(126, &FOLLOW_126_in_delete_expression9125);
            if  (HASEXCEPTION())
            {
                goto ruledelete_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:2323:12: ( LSQUARE RSQUARE )?
            {
                int alt212=2;
                switch ( LA(1) )
                {
                    case LSQUARE:
                    	{
                    		alt212=1;
                    	}
                        break;
                }

                switch (alt212)
                {
            	case 1:
            	    // CPP_grammar_.g:2323:13: LSQUARE RSQUARE
            	    {
            	         MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_delete_expression9128);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledelete_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	         MATCHT(RSQUARE, &FOLLOW_RSQUARE_in_delete_expression9130);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledelete_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_cast_expression_in_delete_expression9134);
            cast_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledelete_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledelete_expressionEx; /* Prevent compiler warnings */
    ruledelete_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end delete_expression */

/**
 * $ANTLR start expression_list
 * CPP_grammar_.g:2328:1: expression_list : assignment_expression ( COMMA assignment_expression )* ;
 */
static void
expression_list(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2329:2: ( assignment_expression ( COMMA assignment_expression )* )
        // CPP_grammar_.g:2330:3: assignment_expression ( COMMA assignment_expression )*
        {
            FOLLOWPUSH(FOLLOW_assignment_expression_in_expression_list9150);
            assignment_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpression_listEx;
            }
            if (HASFAILED())
            {
                return ;
            }


            // CPP_grammar_.g:2330:25: ( COMMA assignment_expression )*

            for (;;)
            {
                int alt213=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt213=1;
                	}
                    break;

                }

                switch (alt213)
                {
            	case 1:
            	    // CPP_grammar_.g:2330:26: COMMA assignment_expression
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_expression_list9153);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	        FOLLOWPUSH(FOLLOW_assignment_expression_in_expression_list9155);
            	        assignment_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop213;	/* break out of the loop */
            	    break;
                }
            }
            loop213: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_listEx; /* Prevent compiler warnings */
    ruleexpression_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression_list */

/**
 * $ANTLR start optor
 * CPP_grammar_.g:2334:1: optor[char *pScopeReturnBuf] returns [char* oReturn] : ( 'new' ( LSQUARE RSQUARE )? | 'delete' ( LSQUARE RSQUARE )? | LPAREN RPAREN | LSQUARE RSQUARE | optor_simple_tokclass |ts1= type_specifier LPAREN RPAREN ) ;
 */
static char*
optor(pCPP_grammar_Parser ctx, char *pScopeReturnBuf)
{
    char* oReturn;


    TypeSpecifier ts1;
    #undef	RETURN_TYPE_ts1
    #define	RETURN_TYPE_ts1 TypeSpecifier

    /* Initialize rule variables
     */


    		if (pScopeReturnBuf) *pScopeReturnBuf = '\0'; 
    		oReturn= pScopeReturnBuf;

    		//TypeSpecifier ts=tsInvalid;
    	
    {
        // CPP_grammar_.g:2340:2: ( ( 'new' ( LSQUARE RSQUARE )? | 'delete' ( LSQUARE RSQUARE )? | LPAREN RPAREN | LSQUARE RSQUARE | optor_simple_tokclass |ts1= type_specifier LPAREN RPAREN ) )
        // CPP_grammar_.g:2343:3: ( 'new' ( LSQUARE RSQUARE )? | 'delete' ( LSQUARE RSQUARE )? | LPAREN RPAREN | LSQUARE RSQUARE | optor_simple_tokclass |ts1= type_specifier LPAREN RPAREN )
        {
            // CPP_grammar_.g:2343:3: ( 'new' ( LSQUARE RSQUARE )? | 'delete' ( LSQUARE RSQUARE )? | LPAREN RPAREN | LSQUARE RSQUARE | optor_simple_tokclass |ts1= type_specifier LPAREN RPAREN )
            {
                int alt216=6;
                switch ( LA(1) )
                {
                case 145:
                	{
                		alt216=1;
                	}
                    break;
                case 126:
                	{
                		alt216=2;
                	}
                    break;
                case LPAREN:
                	{
                		alt216=3;
                	}
                    break;
                case LSQUARE:
                	{
                		alt216=4;
                	}
                    break;
                case AMPERSAND:
                case AND:
                case ASSIGNEQUAL:
                case BITWISEANDEQUAL:
                case BITWISEOR:
                case BITWISEOREQUAL:
                case BITWISEXOR:
                case BITWISEXOREQUAL:
                case COMMA:
                case DIVIDE:
                case DIVIDEEQUAL:
                case EQUAL:
                case GREATERTHAN:
                case GREATERTHANOREQUALTO:
                case LESSTHAN:
                case LESSTHANOREQUALTO:
                case MINUS:
                case MINUSEQUAL:
                case MINUSMINUS:
                case MOD:
                case MODEQUAL:
                case NOT:
                case NOTEQUAL:
                case OR:
                case PLUS:
                case PLUSEQUAL:
                case PLUSPLUS:
                case POINTERTO:
                case POINTERTOMBR:
                case SHIFTLEFT:
                case SHIFTLEFTEQUAL:
                case SHIFTRIGHT:
                case SHIFTRIGHTEQUAL:
                case STAR:
                case TILDE:
                case TIMESEQUAL:
                	{
                		alt216=5;
                	}
                    break;
                case ID:
                case SCOPE:
                case 92:
                case 93:
                case 94:
                case 95:
                case 100:
                case 105:
                case 106:
                case 107:
                case 108:
                case 112:
                case 116:
                case 120:
                case 121:
                case 128:
                case 131:
                case 135:
                case 141:
                case 142:
                case 153:
                case 154:
                case 158:
                case 167:
                case 168:
                case 169:
                case 172:
                case 174:
                	{
                		alt216=6;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return oReturn;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 216;
                    EXCEPTION->state        = 0;


                    goto ruleoptorEx;

                }

                switch (alt216)
                {
            	case 1:
            	    // CPP_grammar_.g:2343:5: 'new' ( LSQUARE RSQUARE )?
            	    {
            	         MATCHT(145, &FOLLOW_145_in_optor9192);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pScopeReturnBuf," new");
            	        }


            	        // CPP_grammar_.g:2344:4: ( LSQUARE RSQUARE )?
            	        {
            	            int alt214=2;
            	            switch ( LA(1) )
            	            {
            	                case LSQUARE:
            	                	{
            	                		switch ( LA(2) )
            	                		{
            	                		    case RSQUARE:
            	                		    	{
            	                		    		alt214=1;
            	                		    	}
            	                		        break;
            	                		}

            	                	}
            	                    break;
            	            }

            	            switch (alt214)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:2345:5: LSQUARE RSQUARE
            	        	    {
            	        	         MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_optor9205);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleoptorEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return oReturn;
            	        	        }


            	        	         MATCHT(RSQUARE, &FOLLOW_RSQUARE_in_optor9207);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleoptorEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return oReturn;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            strcat(pScopeReturnBuf,"[]");
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // CPP_grammar_.g:2347:4: 'delete' ( LSQUARE RSQUARE )?
            	    {
            	         MATCHT(126, &FOLLOW_126_in_optor9225);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pScopeReturnBuf," delete");
            	        }


            	        // CPP_grammar_.g:2348:4: ( LSQUARE RSQUARE )?
            	        {
            	            int alt215=2;
            	            switch ( LA(1) )
            	            {
            	                case LSQUARE:
            	                	{
            	                		switch ( LA(2) )
            	                		{
            	                		    case RSQUARE:
            	                		    	{
            	                		    		alt215=1;
            	                		    	}
            	                		        break;
            	                		}

            	                	}
            	                    break;
            	            }

            	            switch (alt215)
            	            {
            	        	case 1:
            	        	    // CPP_grammar_.g:2349:5: LSQUARE RSQUARE
            	        	    {
            	        	         MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_optor9238);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleoptorEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return oReturn;
            	        	        }


            	        	         MATCHT(RSQUARE, &FOLLOW_RSQUARE_in_optor9240);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleoptorEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return oReturn;
            	        	        }


            	        	        if ( BACKTRACKING==0 )
            	        	        {
            	        	            strcat(pScopeReturnBuf,"[]");
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 3:
            	    // CPP_grammar_.g:2351:4: LPAREN RPAREN
            	    {
            	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_optor9256);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_optor9258);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pScopeReturnBuf,"()");
            	        }


            	    }
            	    break;
            	case 4:
            	    // CPP_grammar_.g:2353:4: LSQUARE RSQUARE
            	    {
            	         MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_optor9271);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	         MATCHT(RSQUARE, &FOLLOW_RSQUARE_in_optor9273);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pScopeReturnBuf,"[]");
            	        }


            	    }
            	    break;
            	case 5:
            	    // CPP_grammar_.g:2355:4: optor_simple_tokclass
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pScopeReturnBuf, reinterpret_cast<const char*>(LT(1)->getText(LT(1))->chars));
            	        }


            	        FOLLOWPUSH(FOLLOW_optor_simple_tokclass_in_optor9290);
            	        optor_simple_tokclass(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	    }
            	    break;
            	case 6:
            	    // CPP_grammar_.g:2358:4: ts1= type_specifier LPAREN RPAREN
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            strcat(pScopeReturnBuf,"type-specifier()");
            	        }


            	        FOLLOWPUSH(FOLLOW_type_specifier_in_optor9308);
            	        ts1=type_specifier(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	         MATCHT(LPAREN, &FOLLOW_LPAREN_in_optor9310);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_optor9312);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleoptorEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return oReturn;
            	        }


            	    }
            	    break;

                }
            }

            if ( BACKTRACKING==0 )
            {

                		oReturn= pScopeReturnBuf;

                		
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoptorEx; /* Prevent compiler warnings */
    ruleoptorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return oReturn;
}
/* $ANTLR end optor */

/**
 * $ANTLR start optor_simple_tokclass
 * CPP_grammar_.g:2368:1: optor_simple_tokclass : ( PLUS | MINUS | STAR | DIVIDE | MOD | BITWISEXOR | AMPERSAND | BITWISEOR | TILDE | NOT | SHIFTLEFT | SHIFTRIGHT | ASSIGNEQUAL | TIMESEQUAL | DIVIDEEQUAL | MODEQUAL | PLUSEQUAL | MINUSEQUAL | SHIFTLEFTEQUAL | SHIFTRIGHTEQUAL | BITWISEANDEQUAL | BITWISEXOREQUAL | BITWISEOREQUAL | EQUAL | NOTEQUAL | LESSTHAN | GREATERTHAN | LESSTHANOREQUALTO | GREATERTHANOREQUALTO | OR | AND | PLUSPLUS | MINUSMINUS | COMMA | POINTERTO | POINTERTOMBR );
 */
static void
optor_simple_tokclass(pCPP_grammar_Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // CPP_grammar_.g:2369:2: ( PLUS | MINUS | STAR | DIVIDE | MOD | BITWISEXOR | AMPERSAND | BITWISEOR | TILDE | NOT | SHIFTLEFT | SHIFTRIGHT | ASSIGNEQUAL | TIMESEQUAL | DIVIDEEQUAL | MODEQUAL | PLUSEQUAL | MINUSEQUAL | SHIFTLEFTEQUAL | SHIFTRIGHTEQUAL | BITWISEANDEQUAL | BITWISEXOREQUAL | BITWISEOREQUAL | EQUAL | NOTEQUAL | LESSTHAN | GREATERTHAN | LESSTHANOREQUALTO | GREATERTHANOREQUALTO | OR | AND | PLUSPLUS | MINUSMINUS | COMMA | POINTERTO | POINTERTOMBR )
        // CPP_grammar_.g:
        {
            if ( ((LA(1) >= AMPERSAND) && (LA(1) <= BITWISEXOREQUAL)) || LA(1) == COMMA || ((LA(1) >= DIVIDE) && (LA(1) <= DIVIDEEQUAL)) || LA(1) == EQUAL || ((LA(1) >= GREATERTHAN) && (LA(1) <= GREATERTHANOREQUALTO)) || ((LA(1) >= LESSTHAN) && (LA(1) <= LESSTHANOREQUALTO)) || ((LA(1) >= MINUS) && (LA(1) <= NOTEQUAL)) || ((LA(1) >= OR) && (LA(1) <= POINTERTOMBR)) || ((LA(1) >= SHIFTLEFT) && (LA(1) <= STAR)) || ((LA(1) >= TILDE) && (LA(1) <= TIMESEQUAL)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
                FAILEDFLAG=ANTLR3_FALSE;

            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleoptor_simple_tokclassEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoptor_simple_tokclassEx; /* Prevent compiler warnings */
    ruleoptor_simple_tokclassEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end optor_simple_tokclass */

// $ANTLR start synpred1_CPP_grammar_
static void synpred1_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:190:3: ( 'template' LESSTHAN GREATERTHAN )
    // CPP_grammar_.g:190:4: 'template' LESSTHAN GREATERTHAN
    {
         MATCHT(160, &FOLLOW_160_in_synpred1_CPP_grammar_155);
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_synpred1_CPP_grammar_157);
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_synpred1_CPP_grammar_159);
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred1_CPP_grammar_Ex: ;

}
// $ANTLR end synpred1_CPP_grammar_

// $ANTLR start synpred2_CPP_grammar_
static void synpred2_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:198:3: ( 'typedef' )
    // CPP_grammar_.g:198:4: 'typedef'
    {
         MATCHT(165, &FOLLOW_165_in_synpred2_CPP_grammar_187);
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred2_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred2_CPP_grammar_Ex: ;

}
// $ANTLR end synpred2_CPP_grammar_

// $ANTLR start synpred3_CPP_grammar_
static void synpred3_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:200:4: ( 'typedef' 'enum' )
    // CPP_grammar_.g:200:5: 'typedef' 'enum'
    {
         MATCHT(165, &FOLLOW_165_in_synpred3_CPP_grammar_199);
        if  (HASEXCEPTION())
        {
            goto rulesynpred3_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(131, &FOLLOW_131_in_synpred3_CPP_grammar_201);
        if  (HASEXCEPTION())
        {
            goto rulesynpred3_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred3_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred3_CPP_grammar_Ex: ;

}
// $ANTLR end synpred3_CPP_grammar_

// $ANTLR start synpred4_CPP_grammar_
static void synpred4_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:206:4: ( declaration_specifiers function_declarator[0] SEMICOLON )
    // CPP_grammar_.g:206:5: declaration_specifiers function_declarator[0] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred4_CPP_grammar_236);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred4_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred4_CPP_grammar_238);
        function_declarator(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred4_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred4_CPP_grammar_241);
        if  (HASEXCEPTION())
        {
            goto rulesynpred4_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred4_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred4_CPP_grammar_Ex: ;

}
// $ANTLR end synpred4_CPP_grammar_

// $ANTLR start synpred5_CPP_grammar_
static void synpred5_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:212:4: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )
    // CPP_grammar_.g:212:5: declaration_specifiers ( init_declarator_list )? SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred5_CPP_grammar_264);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred5_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:212:28: ( init_declarator_list )?
        {
            int alt217=2;
            switch ( LA(1) )
            {
                case AMPERSAND:
                case COLON:
                case ID:
                case LPAREN:
                case OPERATOR:
                case SCOPE:
                case STAR:
                case TILDE:
                case 88:
                case 90:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 103:
                case 109:
                case 110:
                case 111:
                case 146:
                	{
                		alt217=1;
                	}
                    break;
            }

            switch (alt217)
            {
        	case 1:
        	    // CPP_grammar_.g:212:29: init_declarator_list
        	    {
        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_synpred5_CPP_grammar_267);
        	        init_declarator_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred5_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred5_CPP_grammar_271);
        if  (HASEXCEPTION())
        {
            goto rulesynpred5_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred5_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred5_CPP_grammar_Ex: ;

}
// $ANTLR end synpred5_CPP_grammar_

// $ANTLR start synpred6_CPP_grammar_
static void synpred6_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:218:4: ( 'typedef' class_specifier )
    // CPP_grammar_.g:218:5: 'typedef' class_specifier
    {
         MATCHT(165, &FOLLOW_165_in_synpred6_CPP_grammar_293);
        if  (HASEXCEPTION())
        {
            goto rulesynpred6_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_class_specifier_in_synpred6_CPP_grammar_295);
        class_specifier(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred6_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred6_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred6_CPP_grammar_Ex: ;

}
// $ANTLR end synpred6_CPP_grammar_

// $ANTLR start synpred7_CPP_grammar_
static void synpred7_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
	FunctionSpecifier fs;
	#undef	RETURN_TYPE_fs
	#define	RETURN_TYPE_fs FunctionSpecifier

    // CPP_grammar_.g:227:3: ( template_head (fs= function_specifier )* class_specifier )
    // CPP_grammar_.g:227:4: template_head (fs= function_specifier )* class_specifier
    {
        FOLLOWPUSH(FOLLOW_template_head_in_synpred7_CPP_grammar_340);
        template_head(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred7_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:227:18: (fs= function_specifier )*

        for (;;)
        {
            int alt218=2;
            switch ( LA(1) )
            {
            case 91:
            case 104:
            case 132:
            case 140:
            case 171:
            	{
            		alt218=1;
            	}
                break;

            }

            switch (alt218)
            {
        	case 1:
        	    // CPP_grammar_.g:227:19: fs= function_specifier
        	    {
        	        FOLLOWPUSH(FOLLOW_function_specifier_in_synpred7_CPP_grammar_347);
        	        fs=function_specifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred7_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop218;	/* break out of the loop */
        	    break;
            }
        }
        loop218: ; /* Jump out to here if this rule does not match */


        FOLLOWPUSH(FOLLOW_class_specifier_in_synpred7_CPP_grammar_351);
        class_specifier(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred7_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred7_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred7_CPP_grammar_Ex: ;

}
// $ANTLR end synpred7_CPP_grammar_

// $ANTLR start synpred8_CPP_grammar_
static void synpred8_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:238:4: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )
    // CPP_grammar_.g:238:5: declaration_specifiers ( init_declarator_list )? SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred8_CPP_grammar_413);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred8_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:238:28: ( init_declarator_list )?
        {
            int alt219=2;
            switch ( LA(1) )
            {
                case AMPERSAND:
                case COLON:
                case ID:
                case LPAREN:
                case OPERATOR:
                case SCOPE:
                case STAR:
                case TILDE:
                case 88:
                case 90:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 103:
                case 109:
                case 110:
                case 111:
                case 146:
                	{
                		alt219=1;
                	}
                    break;
            }

            switch (alt219)
            {
        	case 1:
        	    // CPP_grammar_.g:238:29: init_declarator_list
        	    {
        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_synpred8_CPP_grammar_416);
        	        init_declarator_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred8_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred8_CPP_grammar_420);
        if  (HASEXCEPTION())
        {
            goto rulesynpred8_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( BACKTRACKING==0 )
        {
            end_of_stmt();
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred8_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred8_CPP_grammar_Ex: ;

}
// $ANTLR end synpred8_CPP_grammar_

// $ANTLR start synpred9_CPP_grammar_
static void synpred9_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:245:4: ( declaration_specifiers function_declarator[0] SEMICOLON )
    // CPP_grammar_.g:245:5: declaration_specifiers function_declarator[0] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred9_CPP_grammar_459);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred9_CPP_grammar_461);
        function_declarator(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred9_CPP_grammar_464);
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred9_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred9_CPP_grammar_Ex: ;

}
// $ANTLR end synpred9_CPP_grammar_

// $ANTLR start synpred10_CPP_grammar_
static void synpred10_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:252:4: ( declaration_specifiers function_declarator[1] LCURLY )
    // CPP_grammar_.g:252:5: declaration_specifiers function_declarator[1] LCURLY
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred10_CPP_grammar_493);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred10_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred10_CPP_grammar_495);
        function_declarator(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred10_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred10_CPP_grammar_498);
        if  (HASEXCEPTION())
        {
            goto rulesynpred10_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred10_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred10_CPP_grammar_Ex: ;

}
// $ANTLR end synpred10_CPP_grammar_

// $ANTLR start synpred11_CPP_grammar_
static void synpred11_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:261:4: ( ctor_decl_spec {...}?)
    // CPP_grammar_.g:261:6: ctor_decl_spec {...}?
    {
        FOLLOWPUSH(FOLLOW_ctor_decl_spec_in_synpred11_CPP_grammar_556);
        ctor_decl_spec(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred11_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( !((qualifiedItemIsOneOf(qiCtor,0))) )
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                EXCEPTION->message      = (void *)"qualifiedItemIsOneOf(qiCtor,0)";
                EXCEPTION->ruleName	 = (void *)"synpred11_CPP_grammar_";


        }

    }

// This is where rules clean up and exit
//
goto rulesynpred11_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred11_CPP_grammar_Ex: ;

}
// $ANTLR end synpred11_CPP_grammar_

// $ANTLR start synpred12_CPP_grammar_
static void synpred12_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:272:3: ( 'enum' ( ID )? LCURLY )
    // CPP_grammar_.g:272:4: 'enum' ( ID )? LCURLY
    {
         MATCHT(131, &FOLLOW_131_in_synpred12_CPP_grammar_600);
        if  (HASEXCEPTION())
        {
            goto rulesynpred12_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:272:11: ( ID )?
        {
            int alt220=2;
            switch ( LA(1) )
            {
                case ID:
                	{
                		alt220=1;
                	}
                    break;
            }

            switch (alt220)
            {
        	case 1:
        	    // CPP_grammar_.g:272:12: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_synpred12_CPP_grammar_603);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred12_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred12_CPP_grammar_607);
        if  (HASEXCEPTION())
        {
            goto rulesynpred12_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred12_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred12_CPP_grammar_Ex: ;

}
// $ANTLR end synpred12_CPP_grammar_

// $ANTLR start synpred13_CPP_grammar_
static void synpred13_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:279:3: ( ( template_head )? dtor_head[1] LCURLY )
    // CPP_grammar_.g:279:4: ( template_head )? dtor_head[1] LCURLY
    {
        // CPP_grammar_.g:279:4: ( template_head )?
        {
            int alt221=2;
            switch ( LA(1) )
            {
                case 160:
                	{
                		alt221=1;
                	}
                    break;
            }

            switch (alt221)
            {
        	case 1:
        	    // CPP_grammar_.g:279:5: template_head
        	    {
        	        FOLLOWPUSH(FOLLOW_template_head_in_synpred13_CPP_grammar_638);
        	        template_head(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred13_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        FOLLOWPUSH(FOLLOW_dtor_head_in_synpred13_CPP_grammar_642);
        dtor_head(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred13_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred13_CPP_grammar_645);
        if  (HASEXCEPTION())
        {
            goto rulesynpred13_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred13_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred13_CPP_grammar_Ex: ;

}
// $ANTLR end synpred13_CPP_grammar_

// $ANTLR start synpred14_CPP_grammar_
static void synpred14_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:289:3: ( ( ctor_decl_spec )? {...}?)
    // CPP_grammar_.g:289:5: ( ctor_decl_spec )? {...}?
    {
        // CPP_grammar_.g:289:5: ( ctor_decl_spec )?
        {
            int alt222=2;
            switch ( LA(1) )
            {
                case 91:
                case 104:
                case 132:
                case 140:
                	{
                		alt222=1;
                	}
                    break;
                case EOF:
                	{
                		{
                		    int LA222_2 = LA(2);
                		    if ( ((qualifiedItemIsOneOf(qiCtor,0))))
                		    {
                		        alt222=1;
                		    }
                		}
                	}
                    break;
            }

            switch (alt222)
            {
        	case 1:
        	    // CPP_grammar_.g:290:5: ctor_decl_spec
        	    {
        	        FOLLOWPUSH(FOLLOW_ctor_decl_spec_in_synpred14_CPP_grammar_692);
        	        ctor_decl_spec(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred14_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        if ( !((qualifiedItemIsOneOf(qiCtor,0))) )
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                EXCEPTION->message      = (void *)"qualifiedItemIsOneOf(qiCtor,0)";
                EXCEPTION->ruleName	 = (void *)"synpred14_CPP_grammar_";


        }

    }

// This is where rules clean up and exit
//
goto rulesynpred14_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred14_CPP_grammar_Ex: ;

}
// $ANTLR end synpred14_CPP_grammar_

// $ANTLR start synpred15_CPP_grammar_
static void synpred15_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:299:3: ( ( 'inline' )? scope_override[$external_declaration::pScopeOverrideBuf] conversion_function_decl_or_def )
    // CPP_grammar_.g:299:4: ( 'inline' )? scope_override[$external_declaration::pScopeOverrideBuf] conversion_function_decl_or_def
    {
        // CPP_grammar_.g:299:4: ( 'inline' )?
        {
            int alt223=2;
            switch ( LA(1) )
            {
                case 140:
                	{
                		alt223=1;
                	}
                    break;
            }

            switch (alt223)
            {
        	case 1:
        	    // CPP_grammar_.g:299:5: 'inline'
        	    {
        	         MATCHT(140, &FOLLOW_140_in_synpred15_CPP_grammar_726);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred15_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        FOLLOWPUSH(FOLLOW_scope_override_in_synpred15_CPP_grammar_730);
        scope_override(ctx, (SCOPE_TOP(external_declaration))->pScopeOverrideBuf);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred15_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_conversion_function_decl_or_def_in_synpred15_CPP_grammar_734);
        conversion_function_decl_or_def(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred15_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred15_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred15_CPP_grammar_Ex: ;

}
// $ANTLR end synpred15_CPP_grammar_

// $ANTLR start synpred16_CPP_grammar_
static void synpred16_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:306:3: ( declaration_specifiers function_declarator[0] SEMICOLON )
    // CPP_grammar_.g:306:4: declaration_specifiers function_declarator[0] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred16_CPP_grammar_771);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred16_CPP_grammar_773);
        function_declarator(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred16_CPP_grammar_776);
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred16_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred16_CPP_grammar_Ex: ;

}
// $ANTLR end synpred16_CPP_grammar_

// $ANTLR start synpred17_CPP_grammar_
static void synpred17_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:313:3: ( declaration_specifiers function_declarator[1] LCURLY )
    // CPP_grammar_.g:313:4: declaration_specifiers function_declarator[1] LCURLY
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred17_CPP_grammar_805);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred17_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred17_CPP_grammar_807);
        function_declarator(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred17_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred17_CPP_grammar_810);
        if  (HASEXCEPTION())
        {
            goto rulesynpred17_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred17_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred17_CPP_grammar_Ex: ;

}
// $ANTLR end synpred17_CPP_grammar_

// $ANTLR start synpred18_CPP_grammar_
static void synpred18_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:320:3: ( function_declarator[1] LCURLY )
    // CPP_grammar_.g:320:4: function_declarator[1] LCURLY
    {
        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred18_CPP_grammar_832);
        function_declarator(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred18_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred18_CPP_grammar_835);
        if  (HASEXCEPTION())
        {
            goto rulesynpred18_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred18_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred18_CPP_grammar_Ex: ;

}
// $ANTLR end synpred18_CPP_grammar_

// $ANTLR start synpred19_CPP_grammar_
static void synpred19_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:327:3: ( declaration_specifiers function_declarator[1] declaration )
    // CPP_grammar_.g:327:4: declaration_specifiers function_declarator[1] declaration
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred19_CPP_grammar_857);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred19_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred19_CPP_grammar_859);
        function_declarator(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred19_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_declaration_in_synpred19_CPP_grammar_862);
        declaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred19_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred19_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred19_CPP_grammar_Ex: ;

}
// $ANTLR end synpred19_CPP_grammar_

// $ANTLR start synpred20_CPP_grammar_
static void synpred20_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:335:3: ( function_declarator[1] declaration )
    // CPP_grammar_.g:335:4: function_declarator[1] declaration
    {
        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred20_CPP_grammar_883);
        function_declarator(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred20_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_declaration_in_synpred20_CPP_grammar_886);
        declaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred20_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred20_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred20_CPP_grammar_Ex: ;

}
// $ANTLR end synpred20_CPP_grammar_

// $ANTLR start synpred21_CPP_grammar_
static void synpred21_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
	FunctionSpecifier fs;
	#undef	RETURN_TYPE_fs
	#define	RETURN_TYPE_fs FunctionSpecifier

    // CPP_grammar_.g:343:3: ( ( 'extern' )? (fs= function_specifier )* class_specifier )
    // CPP_grammar_.g:343:4: ( 'extern' )? (fs= function_specifier )* class_specifier
    {
        // CPP_grammar_.g:343:4: ( 'extern' )?
        {
            int alt224=2;
            switch ( LA(1) )
            {
                case 133:
                	{
                		alt224=1;
                	}
                    break;
            }

            switch (alt224)
            {
        	case 1:
        	    // CPP_grammar_.g:343:5: 'extern'
        	    {
        	         MATCHT(133, &FOLLOW_133_in_synpred21_CPP_grammar_908);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred21_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        // CPP_grammar_.g:343:16: (fs= function_specifier )*

        for (;;)
        {
            int alt225=2;
            switch ( LA(1) )
            {
            case 91:
            case 104:
            case 132:
            case 140:
            case 171:
            	{
            		alt225=1;
            	}
                break;

            }

            switch (alt225)
            {
        	case 1:
        	    // CPP_grammar_.g:343:17: fs= function_specifier
        	    {
        	        FOLLOWPUSH(FOLLOW_function_specifier_in_synpred21_CPP_grammar_917);
        	        fs=function_specifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred21_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop225;	/* break out of the loop */
        	    break;
            }
        }
        loop225: ; /* Jump out to here if this rule does not match */


        FOLLOWPUSH(FOLLOW_class_specifier_in_synpred21_CPP_grammar_921);
        class_specifier(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred21_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred21_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred21_CPP_grammar_Ex: ;

}
// $ANTLR end synpred21_CPP_grammar_

// $ANTLR start synpred22_CPP_grammar_
static void synpred22_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:370:3: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )
    // CPP_grammar_.g:370:4: declaration_specifiers ( init_declarator_list )? SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred22_CPP_grammar_1015);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred22_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:370:27: ( init_declarator_list )?
        {
            int alt226=2;
            switch ( LA(1) )
            {
                case AMPERSAND:
                case COLON:
                case ID:
                case LPAREN:
                case OPERATOR:
                case SCOPE:
                case STAR:
                case TILDE:
                case 88:
                case 90:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 103:
                case 109:
                case 110:
                case 111:
                case 146:
                	{
                		alt226=1;
                	}
                    break;
            }

            switch (alt226)
            {
        	case 1:
        	    // CPP_grammar_.g:370:28: init_declarator_list
        	    {
        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_synpred22_CPP_grammar_1018);
        	        init_declarator_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred22_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred22_CPP_grammar_1022);
        if  (HASEXCEPTION())
        {
            goto rulesynpred22_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred22_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred22_CPP_grammar_Ex: ;

}
// $ANTLR end synpred22_CPP_grammar_

// $ANTLR start synpred23_CPP_grammar_
static void synpred23_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:419:3: ( 'template' LESSTHAN GREATERTHAN )
    // CPP_grammar_.g:419:4: 'template' LESSTHAN GREATERTHAN
    {
         MATCHT(160, &FOLLOW_160_in_synpred23_CPP_grammar_1151);
        if  (HASEXCEPTION())
        {
            goto rulesynpred23_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_synpred23_CPP_grammar_1153);
        if  (HASEXCEPTION())
        {
            goto rulesynpred23_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_synpred23_CPP_grammar_1155);
        if  (HASEXCEPTION())
        {
            goto rulesynpred23_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred23_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred23_CPP_grammar_Ex: ;

}
// $ANTLR end synpred23_CPP_grammar_

// $ANTLR start synpred24_CPP_grammar_
static void synpred24_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:429:3: ( 'typedef' )
    // CPP_grammar_.g:429:4: 'typedef'
    {
         MATCHT(165, &FOLLOW_165_in_synpred24_CPP_grammar_1189);
        if  (HASEXCEPTION())
        {
            goto rulesynpred24_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred24_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred24_CPP_grammar_Ex: ;

}
// $ANTLR end synpred24_CPP_grammar_

// $ANTLR start synpred25_CPP_grammar_
static void synpred25_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:431:4: ( 'typedef' 'enum' )
    // CPP_grammar_.g:431:5: 'typedef' 'enum'
    {
         MATCHT(165, &FOLLOW_165_in_synpred25_CPP_grammar_1201);
        if  (HASEXCEPTION())
        {
            goto rulesynpred25_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(131, &FOLLOW_131_in_synpred25_CPP_grammar_1203);
        if  (HASEXCEPTION())
        {
            goto rulesynpred25_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred25_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred25_CPP_grammar_Ex: ;

}
// $ANTLR end synpred25_CPP_grammar_

// $ANTLR start synpred26_CPP_grammar_
static void synpred26_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:437:4: ( declaration_specifiers function_declarator[0] SEMICOLON )
    // CPP_grammar_.g:437:5: declaration_specifiers function_declarator[0] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred26_CPP_grammar_1238);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred26_CPP_grammar_1240);
        function_declarator(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred26_CPP_grammar_1243);
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred26_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred26_CPP_grammar_Ex: ;

}
// $ANTLR end synpred26_CPP_grammar_

// $ANTLR start synpred27_CPP_grammar_
static void synpred27_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:444:4: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )
    // CPP_grammar_.g:444:5: declaration_specifiers ( init_declarator_list )? SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred27_CPP_grammar_1270);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred27_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:444:28: ( init_declarator_list )?
        {
            int alt227=2;
            switch ( LA(1) )
            {
                case AMPERSAND:
                case COLON:
                case ID:
                case LPAREN:
                case OPERATOR:
                case SCOPE:
                case STAR:
                case TILDE:
                case 88:
                case 90:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 103:
                case 109:
                case 110:
                case 111:
                case 146:
                	{
                		alt227=1;
                	}
                    break;
            }

            switch (alt227)
            {
        	case 1:
        	    // CPP_grammar_.g:444:29: init_declarator_list
        	    {
        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_synpred27_CPP_grammar_1273);
        	        init_declarator_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred27_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred27_CPP_grammar_1277);
        if  (HASEXCEPTION())
        {
            goto rulesynpred27_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred27_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred27_CPP_grammar_Ex: ;

}
// $ANTLR end synpred27_CPP_grammar_

// $ANTLR start synpred28_CPP_grammar_
static void synpred28_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:451:4: ( 'typedef' class_specifier )
    // CPP_grammar_.g:451:5: 'typedef' class_specifier
    {
         MATCHT(165, &FOLLOW_165_in_synpred28_CPP_grammar_1303);
        if  (HASEXCEPTION())
        {
            goto rulesynpred28_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_class_specifier_in_synpred28_CPP_grammar_1305);
        class_specifier(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred28_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred28_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred28_CPP_grammar_Ex: ;

}
// $ANTLR end synpred28_CPP_grammar_

// $ANTLR start synpred29_CPP_grammar_
static void synpred29_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
	FunctionSpecifier fs;
	#undef	RETURN_TYPE_fs
	#define	RETURN_TYPE_fs FunctionSpecifier

    // CPP_grammar_.g:461:3: ( template_head (fs= function_specifier )* class_specifier )
    // CPP_grammar_.g:461:4: template_head (fs= function_specifier )* class_specifier
    {
        FOLLOWPUSH(FOLLOW_template_head_in_synpred29_CPP_grammar_1353);
        template_head(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred29_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:461:18: (fs= function_specifier )*

        for (;;)
        {
            int alt228=2;
            switch ( LA(1) )
            {
            case 91:
            case 104:
            case 132:
            case 140:
            case 171:
            	{
            		alt228=1;
            	}
                break;

            }

            switch (alt228)
            {
        	case 1:
        	    // CPP_grammar_.g:461:19: fs= function_specifier
        	    {
        	        FOLLOWPUSH(FOLLOW_function_specifier_in_synpred29_CPP_grammar_1360);
        	        fs=function_specifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred29_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop228;	/* break out of the loop */
        	    break;
            }
        }
        loop228: ; /* Jump out to here if this rule does not match */


        FOLLOWPUSH(FOLLOW_class_specifier_in_synpred29_CPP_grammar_1364);
        class_specifier(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred29_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred29_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred29_CPP_grammar_Ex: ;

}
// $ANTLR end synpred29_CPP_grammar_

// $ANTLR start synpred30_CPP_grammar_
static void synpred30_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:472:4: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )
    // CPP_grammar_.g:472:5: declaration_specifiers ( init_declarator_list )? SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred30_CPP_grammar_1428);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred30_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:472:28: ( init_declarator_list )?
        {
            int alt229=2;
            switch ( LA(1) )
            {
                case AMPERSAND:
                case COLON:
                case ID:
                case LPAREN:
                case OPERATOR:
                case SCOPE:
                case STAR:
                case TILDE:
                case 88:
                case 90:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 103:
                case 109:
                case 110:
                case 111:
                case 146:
                	{
                		alt229=1;
                	}
                    break;
            }

            switch (alt229)
            {
        	case 1:
        	    // CPP_grammar_.g:472:29: init_declarator_list
        	    {
        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_synpred30_CPP_grammar_1431);
        	        init_declarator_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred30_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred30_CPP_grammar_1435);
        if  (HASEXCEPTION())
        {
            goto rulesynpred30_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred30_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred30_CPP_grammar_Ex: ;

}
// $ANTLR end synpred30_CPP_grammar_

// $ANTLR start synpred31_CPP_grammar_
static void synpred31_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:480:4: ( declaration_specifiers function_declarator[0] SEMICOLON )
    // CPP_grammar_.g:480:5: declaration_specifiers function_declarator[0] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred31_CPP_grammar_1470);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred31_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred31_CPP_grammar_1472);
        function_declarator(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred31_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred31_CPP_grammar_1475);
        if  (HASEXCEPTION())
        {
            goto rulesynpred31_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred31_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred31_CPP_grammar_Ex: ;

}
// $ANTLR end synpred31_CPP_grammar_

// $ANTLR start synpred32_CPP_grammar_
static void synpred32_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:487:4: ( declaration_specifiers function_declarator[1] LCURLY )
    // CPP_grammar_.g:487:5: declaration_specifiers function_declarator[1] LCURLY
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred32_CPP_grammar_1503);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred32_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred32_CPP_grammar_1505);
        function_declarator(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred32_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred32_CPP_grammar_1508);
        if  (HASEXCEPTION())
        {
            goto rulesynpred32_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred32_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred32_CPP_grammar_Ex: ;

}
// $ANTLR end synpred32_CPP_grammar_

// $ANTLR start synpred33_CPP_grammar_
static void synpred33_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:494:4: ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )
    // CPP_grammar_.g:494:6: ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_ctor_decl_spec_in_synpred33_CPP_grammar_1536);
        ctor_decl_spec(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred33_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( !((qualifiedItemIsOneOf(qiCtor,0))) )
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                EXCEPTION->message      = (void *)"qualifiedItemIsOneOf(qiCtor,0)";
                EXCEPTION->ruleName	 = (void *)"synpred33_CPP_grammar_";


        }

        FOLLOWPUSH(FOLLOW_ctor_declarator_in_synpred33_CPP_grammar_1549);
        ctor_declarator(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred33_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred33_CPP_grammar_1552);
        if  (HASEXCEPTION())
        {
            goto rulesynpred33_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred33_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred33_CPP_grammar_Ex: ;

}
// $ANTLR end synpred33_CPP_grammar_

// $ANTLR start synpred34_CPP_grammar_
static void synpred34_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:506:4: ( ctor_decl_spec {...}?)
    // CPP_grammar_.g:506:5: ctor_decl_spec {...}?
    {
        FOLLOWPUSH(FOLLOW_ctor_decl_spec_in_synpred34_CPP_grammar_1597);
        ctor_decl_spec(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred34_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( !((qualifiedItemIsOneOf(qiCtor,0))) )
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                EXCEPTION->message      = (void *)"qualifiedItemIsOneOf(qiCtor,0)";
                EXCEPTION->ruleName	 = (void *)"synpred34_CPP_grammar_";


        }

    }

// This is where rules clean up and exit
//
goto rulesynpred34_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred34_CPP_grammar_Ex: ;

}
// $ANTLR end synpred34_CPP_grammar_

// $ANTLR start synpred35_CPP_grammar_
static void synpred35_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:528:3: ( 'enum' ( ID )? LCURLY )
    // CPP_grammar_.g:528:4: 'enum' ( ID )? LCURLY
    {
         MATCHT(131, &FOLLOW_131_in_synpred35_CPP_grammar_1682);
        if  (HASEXCEPTION())
        {
            goto rulesynpred35_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:528:11: ( ID )?
        {
            int alt230=2;
            switch ( LA(1) )
            {
                case ID:
                	{
                		alt230=1;
                	}
                    break;
            }

            switch (alt230)
            {
        	case 1:
        	    // CPP_grammar_.g:528:12: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_synpred35_CPP_grammar_1685);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred35_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred35_CPP_grammar_1689);
        if  (HASEXCEPTION())
        {
            goto rulesynpred35_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred35_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred35_CPP_grammar_Ex: ;

}
// $ANTLR end synpred35_CPP_grammar_

// $ANTLR start synpred36_CPP_grammar_
static void synpred36_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:535:3: ( ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON )
    // CPP_grammar_.g:535:5: ctor_decl_spec {...}? ctor_declarator[0] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_ctor_decl_spec_in_synpred36_CPP_grammar_1720);
        ctor_decl_spec(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred36_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( !((qualifiedItemIsOneOf(qiCtor,0))) )
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                EXCEPTION->message      = (void *)"qualifiedItemIsOneOf(qiCtor,0)";
                EXCEPTION->ruleName	 = (void *)"synpred36_CPP_grammar_";


        }

        FOLLOWPUSH(FOLLOW_ctor_declarator_in_synpred36_CPP_grammar_1731);
        ctor_declarator(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred36_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred36_CPP_grammar_1734);
        if  (HASEXCEPTION())
        {
            goto rulesynpred36_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred36_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred36_CPP_grammar_Ex: ;

}
// $ANTLR end synpred36_CPP_grammar_

// $ANTLR start synpred37_CPP_grammar_
static void synpred37_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:549:3: ( ctor_decl_spec {...}? ctor_declarator[1] ( COLON | LCURLY ) )
    // CPP_grammar_.g:549:5: ctor_decl_spec {...}? ctor_declarator[1] ( COLON | LCURLY )
    {
        FOLLOWPUSH(FOLLOW_ctor_decl_spec_in_synpred37_CPP_grammar_1780);
        ctor_decl_spec(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred37_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( !((qualifiedItemIsOneOf(qiCtor,0))) )
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                EXCEPTION->message      = (void *)"qualifiedItemIsOneOf(qiCtor,0)";
                EXCEPTION->ruleName	 = (void *)"synpred37_CPP_grammar_";


        }

        FOLLOWPUSH(FOLLOW_ctor_declarator_in_synpred37_CPP_grammar_1790);
        ctor_declarator(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred37_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( LA(1) == COLON || LA(1) == LCURLY )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;
            FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = NULL;

            goto rulesynpred37_CPP_grammar_Ex;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred37_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred37_CPP_grammar_Ex: ;

}
// $ANTLR end synpred37_CPP_grammar_

// $ANTLR start synpred38_CPP_grammar_
static void synpred38_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:564:3: ( dtor_head[0] SEMICOLON )
    // CPP_grammar_.g:564:4: dtor_head[0] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_dtor_head_in_synpred38_CPP_grammar_1856);
        dtor_head(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred38_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred38_CPP_grammar_1859);
        if  (HASEXCEPTION())
        {
            goto rulesynpred38_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred38_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred38_CPP_grammar_Ex: ;

}
// $ANTLR end synpred38_CPP_grammar_

// $ANTLR start synpred39_CPP_grammar_
static void synpred39_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:573:3: ( dtor_head[1] LCURLY )
    // CPP_grammar_.g:573:4: dtor_head[1] LCURLY
    {
        FOLLOWPUSH(FOLLOW_dtor_head_in_synpred39_CPP_grammar_1891);
        dtor_head(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred39_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred39_CPP_grammar_1894);
        if  (HASEXCEPTION())
        {
            goto rulesynpred39_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred39_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred39_CPP_grammar_Ex: ;

}
// $ANTLR end synpred39_CPP_grammar_

// $ANTLR start synpred40_CPP_grammar_
static void synpred40_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:581:3: ( declaration_specifiers function_declarator[0] SEMICOLON )
    // CPP_grammar_.g:581:4: declaration_specifiers function_declarator[0] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred40_CPP_grammar_1919);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred40_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred40_CPP_grammar_1921);
        function_declarator(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred40_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred40_CPP_grammar_1924);
        if  (HASEXCEPTION())
        {
            goto rulesynpred40_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred40_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred40_CPP_grammar_Ex: ;

}
// $ANTLR end synpred40_CPP_grammar_

// $ANTLR start synpred41_CPP_grammar_
static void synpred41_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:589:3: ( declaration_specifiers function_declarator[1] LCURLY )
    // CPP_grammar_.g:589:4: declaration_specifiers function_declarator[1] LCURLY
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred41_CPP_grammar_1956);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred41_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred41_CPP_grammar_1958);
        function_declarator(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred41_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred41_CPP_grammar_1961);
        if  (HASEXCEPTION())
        {
            goto rulesynpred41_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred41_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred41_CPP_grammar_Ex: ;

}
// $ANTLR end synpred41_CPP_grammar_

// $ANTLR start synpred42_CPP_grammar_
static void synpred42_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
	FunctionSpecifier fs;
	#undef	RETURN_TYPE_fs
	#define	RETURN_TYPE_fs FunctionSpecifier

    // CPP_grammar_.g:597:3: ( ( 'friend' )? (fs= function_specifier )* class_specifier )
    // CPP_grammar_.g:597:4: ( 'friend' )? (fs= function_specifier )* class_specifier
    {
        // CPP_grammar_.g:597:4: ( 'friend' )?
        {
            int alt231=2;
            switch ( LA(1) )
            {
                case 137:
                	{
                		alt231=1;
                	}
                    break;
            }

            switch (alt231)
            {
        	case 1:
        	    // CPP_grammar_.g:597:5: 'friend'
        	    {
        	         MATCHT(137, &FOLLOW_137_in_synpred42_CPP_grammar_1985);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred42_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        // CPP_grammar_.g:597:16: (fs= function_specifier )*

        for (;;)
        {
            int alt232=2;
            switch ( LA(1) )
            {
            case 91:
            case 104:
            case 132:
            case 140:
            case 171:
            	{
            		alt232=1;
            	}
                break;

            }

            switch (alt232)
            {
        	case 1:
        	    // CPP_grammar_.g:597:17: fs= function_specifier
        	    {
        	        FOLLOWPUSH(FOLLOW_function_specifier_in_synpred42_CPP_grammar_1994);
        	        fs=function_specifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred42_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop232;	/* break out of the loop */
        	    break;
            }
        }
        loop232: ; /* Jump out to here if this rule does not match */


        FOLLOWPUSH(FOLLOW_class_specifier_in_synpred42_CPP_grammar_1998);
        class_specifier(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred42_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred42_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred42_CPP_grammar_Ex: ;

}
// $ANTLR end synpred42_CPP_grammar_

// $ANTLR start synpred43_CPP_grammar_
static void synpred43_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:603:3: ( declaration_specifiers ( init_declarator_list )? SEMICOLON )
    // CPP_grammar_.g:603:4: declaration_specifiers ( init_declarator_list )? SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred43_CPP_grammar_2041);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred43_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:603:27: ( init_declarator_list )?
        {
            int alt233=2;
            switch ( LA(1) )
            {
                case AMPERSAND:
                case COLON:
                case ID:
                case LPAREN:
                case OPERATOR:
                case SCOPE:
                case STAR:
                case TILDE:
                case 88:
                case 90:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 103:
                case 109:
                case 110:
                case 111:
                case 146:
                	{
                		alt233=1;
                	}
                    break;
            }

            switch (alt233)
            {
        	case 1:
        	    // CPP_grammar_.g:603:28: init_declarator_list
        	    {
        	        FOLLOWPUSH(FOLLOW_init_declarator_list_in_synpred43_CPP_grammar_2044);
        	        init_declarator_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred43_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred43_CPP_grammar_2048);
        if  (HASEXCEPTION())
        {
            goto rulesynpred43_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred43_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred43_CPP_grammar_Ex: ;

}
// $ANTLR end synpred43_CPP_grammar_

// $ANTLR start synpred44_CPP_grammar_
static void synpred44_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
	FunctionSpecifier fs;
	#undef	RETURN_TYPE_fs
	#define	RETURN_TYPE_fs FunctionSpecifier

    // CPP_grammar_.g:610:3: ( (fs= function_specifier )* function_declarator[0] SEMICOLON )
    // CPP_grammar_.g:610:4: (fs= function_specifier )* function_declarator[0] SEMICOLON
    {
        // CPP_grammar_.g:610:4: (fs= function_specifier )*

        for (;;)
        {
            int alt234=2;
            switch ( LA(1) )
            {
            case 91:
            case 104:
            case 132:
            case 140:
            case 171:
            	{
            		alt234=1;
            	}
                break;

            }

            switch (alt234)
            {
        	case 1:
        	    // CPP_grammar_.g:610:5: fs= function_specifier
        	    {
        	        FOLLOWPUSH(FOLLOW_function_specifier_in_synpred44_CPP_grammar_2075);
        	        fs=function_specifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred44_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop234;	/* break out of the loop */
        	    break;
            }
        }
        loop234: ; /* Jump out to here if this rule does not match */


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred44_CPP_grammar_2079);
        function_declarator(ctx, 0);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred44_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred44_CPP_grammar_2082);
        if  (HASEXCEPTION())
        {
            goto rulesynpred44_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred44_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred44_CPP_grammar_Ex: ;

}
// $ANTLR end synpred44_CPP_grammar_

// $ANTLR start synpred45_CPP_grammar_
static void synpred45_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
	FunctionSpecifier fs;
	#undef	RETURN_TYPE_fs
	#define	RETURN_TYPE_fs FunctionSpecifier

    // CPP_grammar_.g:618:3: ( (fs= function_specifier )* function_declarator[1] LCURLY )
    // CPP_grammar_.g:618:4: (fs= function_specifier )* function_declarator[1] LCURLY
    {
        // CPP_grammar_.g:618:4: (fs= function_specifier )*

        for (;;)
        {
            int alt235=2;
            switch ( LA(1) )
            {
            case 91:
            case 104:
            case 132:
            case 140:
            case 171:
            	{
            		alt235=1;
            	}
                break;

            }

            switch (alt235)
            {
        	case 1:
        	    // CPP_grammar_.g:618:5: fs= function_specifier
        	    {
        	        FOLLOWPUSH(FOLLOW_function_specifier_in_synpred45_CPP_grammar_2122);
        	        fs=function_specifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred45_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop235;	/* break out of the loop */
        	    break;
            }
        }
        loop235: ; /* Jump out to here if this rule does not match */


        FOLLOWPUSH(FOLLOW_function_declarator_in_synpred45_CPP_grammar_2126);
        function_declarator(ctx, 1);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred45_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred45_CPP_grammar_2129);
        if  (HASEXCEPTION())
        {
            goto rulesynpred45_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred45_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred45_CPP_grammar_Ex: ;

}
// $ANTLR end synpred45_CPP_grammar_

// $ANTLR start synpred46_CPP_grammar_
static void synpred46_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:626:3: ( ( 'inline' )? conversion_function_decl_or_def )
    // CPP_grammar_.g:626:4: ( 'inline' )? conversion_function_decl_or_def
    {
        // CPP_grammar_.g:626:4: ( 'inline' )?
        {
            int alt236=2;
            switch ( LA(1) )
            {
                case 140:
                	{
                		alt236=1;
                	}
                    break;
            }

            switch (alt236)
            {
        	case 1:
        	    // CPP_grammar_.g:626:5: 'inline'
        	    {
        	         MATCHT(140, &FOLLOW_140_in_synpred46_CPP_grammar_2165);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred46_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        FOLLOWPUSH(FOLLOW_conversion_function_decl_or_def_in_synpred46_CPP_grammar_2169);
        conversion_function_decl_or_def(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred46_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred46_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred46_CPP_grammar_Ex: ;

}
// $ANTLR end synpred46_CPP_grammar_

// $ANTLR start synpred47_CPP_grammar_
static void synpred47_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:635:3: ( qualified_id[NULL] SEMICOLON )
    // CPP_grammar_.g:635:4: qualified_id[NULL] SEMICOLON
    {
        FOLLOWPUSH(FOLLOW_qualified_id_in_synpred47_CPP_grammar_2203);
        qualified_id(ctx, NULL);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred47_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred47_CPP_grammar_2206);
        if  (HASEXCEPTION())
        {
            goto rulesynpred47_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred47_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred47_CPP_grammar_Ex: ;

}
// $ANTLR end synpred47_CPP_grammar_

// $ANTLR start synpred48_CPP_grammar_
static void synpred48_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:698:4: ( declaration )
    // CPP_grammar_.g:698:5: declaration
    {
        FOLLOWPUSH(FOLLOW_declaration_in_synpred48_CPP_grammar_2428);
        declaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred48_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred48_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred48_CPP_grammar_Ex: ;

}
// $ANTLR end synpred48_CPP_grammar_

// $ANTLR start synpred49_CPP_grammar_
static void synpred49_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:706:4: ( declaration )
    // CPP_grammar_.g:706:5: declaration
    {
        FOLLOWPUSH(FOLLOW_declaration_in_synpred49_CPP_grammar_2476);
        declaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred49_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred49_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred49_CPP_grammar_Ex: ;

}
// $ANTLR end synpred49_CPP_grammar_

// $ANTLR start synpred50_CPP_grammar_
static void synpred50_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:718:3: ( 'extern' StringLiteral )
    // CPP_grammar_.g:718:4: 'extern' StringLiteral
    {
         MATCHT(133, &FOLLOW_133_in_synpred50_CPP_grammar_2525);
        if  (HASEXCEPTION())
        {
            goto rulesynpred50_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(StringLiteral, &FOLLOW_StringLiteral_in_synpred50_CPP_grammar_2527);
        if  (HASEXCEPTION())
        {
            goto rulesynpred50_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred50_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred50_CPP_grammar_Ex: ;

}
// $ANTLR end synpred50_CPP_grammar_

// $ANTLR start synpred51_CPP_grammar_
static void synpred51_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    {
        //  CPP_grammar_.g:944:5: ( SEMICOLON | member_declarator )

        ANTLR3_UINT32 alt237;

        alt237=2;

        switch ( LA(1) )
        {
        case SEMICOLON:
        	{
        		alt237=1;
        	}
            break;
        case AMPERSAND:
        case COLON:
        case ID:
        case LPAREN:
        case OPERATOR:
        case SCOPE:
        case STAR:
        case TILDE:
        case 88:
        case 90:
        case 96:
        case 97:
        case 98:
        case 99:
        case 101:
        case 103:
        case 109:
        case 110:
        case 111:
        case 146:
        	{
        		alt237=2;
        	}
            break;

        default:
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 237;
            EXCEPTION->state        = 0;


            goto rulesynpred51_CPP_grammar_Ex;

        }

        switch (alt237)
        {
    	case 1:
    	    // CPP_grammar_.g:944:6: SEMICOLON
    	    {
    	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred51_CPP_grammar_3533);
    	        if  (HASEXCEPTION())
    	        {
    	            goto rulesynpred51_CPP_grammar_Ex;
    	        }
    	        if (HASFAILED())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // CPP_grammar_.g:944:16: member_declarator
    	    {
    	        FOLLOWPUSH(FOLLOW_member_declarator_in_synpred51_CPP_grammar_3535);
    	        member_declarator(ctx);

    	        FOLLOWPOP();
    	        if  (HASEXCEPTION())
    	        {
    	            goto rulesynpred51_CPP_grammar_Ex;
    	        }
    	        if (HASFAILED())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred51_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred51_CPP_grammar_Ex: ;

}
// $ANTLR end synpred51_CPP_grammar_

// $ANTLR start synpred52_CPP_grammar_
static void synpred52_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1051:5: ( LESSTHAN template_argument_list GREATERTHAN )
    // CPP_grammar_.g:1051:6: LESSTHAN template_argument_list GREATERTHAN
    {
         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_synpred52_CPP_grammar_3991);
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_template_argument_list_in_synpred52_CPP_grammar_3993);
        template_argument_list(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_synpred52_CPP_grammar_3995);
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred52_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred52_CPP_grammar_Ex: ;

}
// $ANTLR end synpred52_CPP_grammar_

// $ANTLR start synpred53_CPP_grammar_
static void synpred53_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1085:3: ( ( ID )? COLON constant_expression )
    // CPP_grammar_.g:1085:4: ( ID )? COLON constant_expression
    {
        // CPP_grammar_.g:1085:4: ( ID )?
        {
            int alt238=2;
            switch ( LA(1) )
            {
                case ID:
                	{
                		alt238=1;
                	}
                    break;
            }

            switch (alt238)
            {
        	case 1:
        	    // CPP_grammar_.g:1085:5: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_synpred53_CPP_grammar_4116);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred53_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(COLON, &FOLLOW_COLON_in_synpred53_CPP_grammar_4120);
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_constant_expression_in_synpred53_CPP_grammar_4122);
        constant_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred53_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred53_CPP_grammar_Ex: ;

}
// $ANTLR end synpred53_CPP_grammar_

// $ANTLR start synpred54_CPP_grammar_
static void synpred54_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1089:4: ( ASSIGNEQUAL OCTALINT SEMICOLON )
    // CPP_grammar_.g:1089:5: ASSIGNEQUAL OCTALINT SEMICOLON
    {
         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_synpred54_CPP_grammar_4151);
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(OCTALINT, &FOLLOW_OCTALINT_in_synpred54_CPP_grammar_4153);
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_synpred54_CPP_grammar_4155);
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred54_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred54_CPP_grammar_Ex: ;

}
// $ANTLR end synpred54_CPP_grammar_

// $ANTLR start synpred55_CPP_grammar_
static void synpred55_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1109:3: ( ptr_operator )
    // CPP_grammar_.g:1109:4: ptr_operator
    {
        FOLLOWPUSH(FOLLOW_ptr_operator_in_synpred55_CPP_grammar_4253);
        ptr_operator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred55_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred55_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred55_CPP_grammar_Ex: ;

}
// $ANTLR end synpred55_CPP_grammar_

// $ANTLR start synpred56_CPP_grammar_
static void synpred56_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1127:3: ( qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN ( RPAREN | declaration_specifiers ) )
    // CPP_grammar_.g:1127:4: qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN ( RPAREN | declaration_specifiers )
    {
        FOLLOWPUSH(FOLLOW_qualified_id_in_synpred56_CPP_grammar_4303);
        qualified_id(ctx, (SCOPE_TOP(direct_declarator))->pQualifiedIdBuf);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred56_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred56_CPP_grammar_4306);
        if  (HASEXCEPTION())
        {
            goto rulesynpred56_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:1127:61: ( RPAREN | declaration_specifiers )
        {
            int alt239=2;
            switch ( LA(1) )
            {
            case RPAREN:
            	{
            		alt239=1;
            	}
                break;
            case ID:
            case SCOPE:
            case 89:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 100:
            case 102:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 112:
            case 115:
            case 116:
            case 120:
            case 121:
            case 122:
            case 128:
            case 131:
            case 132:
            case 133:
            case 135:
            case 137:
            case 140:
            case 141:
            case 142:
            case 143:
            case 150:
            case 153:
            case 154:
            case 156:
            case 158:
            case 165:
            case 167:
            case 168:
            case 169:
            case 171:
            case 172:
            case 173:
            case 174:
            	{
            		alt239=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 239;
                EXCEPTION->state        = 0;


                goto rulesynpred56_CPP_grammar_Ex;

            }

            switch (alt239)
            {
        	case 1:
        	    // CPP_grammar_.g:1127:62: RPAREN
        	    {
        	         MATCHT(RPAREN, &FOLLOW_RPAREN_in_synpred56_CPP_grammar_4309);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred56_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // CPP_grammar_.g:1127:69: declaration_specifiers
        	    {
        	        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred56_CPP_grammar_4311);
        	        declaration_specifiers(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred56_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred56_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred56_CPP_grammar_Ex: ;

}
// $ANTLR end synpred56_CPP_grammar_

// $ANTLR start synpred57_CPP_grammar_
static void synpred57_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1140:3: ( qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN qualified_id[$direct_declarator::pQualifiedIdBuf] )
    // CPP_grammar_.g:1140:4: qualified_id[$direct_declarator::pQualifiedIdBuf] LPAREN qualified_id[$direct_declarator::pQualifiedIdBuf]
    {
        FOLLOWPUSH(FOLLOW_qualified_id_in_synpred57_CPP_grammar_4375);
        qualified_id(ctx, (SCOPE_TOP(direct_declarator))->pQualifiedIdBuf);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred57_CPP_grammar_4378);
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_qualified_id_in_synpred57_CPP_grammar_4380);
        qualified_id(ctx, (SCOPE_TOP(direct_declarator))->pQualifiedIdBuf);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred57_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred57_CPP_grammar_Ex: ;

}
// $ANTLR end synpred57_CPP_grammar_

// $ANTLR start synpred58_CPP_grammar_
static void synpred58_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1147:3: ( qualified_id[$direct_declarator::pQualifiedIdBuf] LSQUARE )
    // CPP_grammar_.g:1147:4: qualified_id[$direct_declarator::pQualifiedIdBuf] LSQUARE
    {
        FOLLOWPUSH(FOLLOW_qualified_id_in_synpred58_CPP_grammar_4417);
        qualified_id(ctx, (SCOPE_TOP(direct_declarator))->pQualifiedIdBuf);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LSQUARE, &FOLLOW_LSQUARE_in_synpred58_CPP_grammar_4420);
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred58_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred58_CPP_grammar_Ex: ;

}
// $ANTLR end synpred58_CPP_grammar_

// $ANTLR start synpred59_CPP_grammar_
static void synpred59_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1160:3: ( qualified_id[$direct_declarator::pQualifiedIdBuf] RPAREN LPAREN )
    // CPP_grammar_.g:1160:4: qualified_id[$direct_declarator::pQualifiedIdBuf] RPAREN LPAREN
    {
        FOLLOWPUSH(FOLLOW_qualified_id_in_synpred59_CPP_grammar_4466);
        qualified_id(ctx, (SCOPE_TOP(direct_declarator))->pQualifiedIdBuf);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred59_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(RPAREN, &FOLLOW_RPAREN_in_synpred59_CPP_grammar_4469);
        if  (HASEXCEPTION())
        {
            goto rulesynpred59_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred59_CPP_grammar_4471);
        if  (HASEXCEPTION())
        {
            goto rulesynpred59_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred59_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred59_CPP_grammar_Ex: ;

}
// $ANTLR end synpred59_CPP_grammar_

// $ANTLR start synpred60_CPP_grammar_
static void synpred60_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1222:3: ( ptr_operator )
    // CPP_grammar_.g:1222:4: ptr_operator
    {
        FOLLOWPUSH(FOLLOW_ptr_operator_in_synpred60_CPP_grammar_4732);
        ptr_operator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred60_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred60_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred60_CPP_grammar_Ex: ;

}
// $ANTLR end synpred60_CPP_grammar_

// $ANTLR start synpred61_CPP_grammar_
static void synpred61_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1417:5: ( declarator )
    // CPP_grammar_.g:1417:6: declarator
    {
        FOLLOWPUSH(FOLLOW_declarator_in_synpred61_CPP_grammar_5360);
        declarator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred61_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred61_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred61_CPP_grammar_Ex: ;

}
// $ANTLR end synpred61_CPP_grammar_

// $ANTLR start synpred62_CPP_grammar_
static void synpred62_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1422:6: ( declarator )
    // CPP_grammar_.g:1422:7: declarator
    {
        FOLLOWPUSH(FOLLOW_declarator_in_synpred62_CPP_grammar_5406);
        declarator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred62_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred62_CPP_grammar_Ex: ;

}
// $ANTLR end synpred62_CPP_grammar_

// $ANTLR start synpred63_CPP_grammar_
static void synpred63_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1451:3: ( LPAREN abstract_declarator RPAREN ( LSQUARE | LPAREN ) )
    // CPP_grammar_.g:1451:4: LPAREN abstract_declarator RPAREN ( LSQUARE | LPAREN )
    {
         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred63_CPP_grammar_5496);
        if  (HASEXCEPTION())
        {
            goto rulesynpred63_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_abstract_declarator_in_synpred63_CPP_grammar_5498);
        abstract_declarator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred63_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(RPAREN, &FOLLOW_RPAREN_in_synpred63_CPP_grammar_5500);
        if  (HASEXCEPTION())
        {
            goto rulesynpred63_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( ((LA(1) >= LPAREN) && (LA(1) <= LSQUARE)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;
            FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = NULL;

            goto rulesynpred63_CPP_grammar_Ex;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred63_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred63_CPP_grammar_Ex: ;

}
// $ANTLR end synpred63_CPP_grammar_

// $ANTLR start synpred64_CPP_grammar_
static void synpred64_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1518:4: ( parameter_declaration )
    // CPP_grammar_.g:1518:5: parameter_declaration
    {
        FOLLOWPUSH(FOLLOW_parameter_declaration_in_synpred64_CPP_grammar_5768);
        parameter_declaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred64_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred64_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred64_CPP_grammar_Ex: ;

}
// $ANTLR end synpred64_CPP_grammar_

// $ANTLR start synpred65_CPP_grammar_
static void synpred65_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1576:5: ( declarator )
    // CPP_grammar_.g:1576:6: declarator
    {
        FOLLOWPUSH(FOLLOW_declarator_in_synpred65_CPP_grammar_6002);
        declarator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred65_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred65_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred65_CPP_grammar_Ex: ;

}
// $ANTLR end synpred65_CPP_grammar_

// $ANTLR start synpred66_CPP_grammar_
static void synpred66_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1581:4: ( declarator )
    // CPP_grammar_.g:1581:5: declarator
    {
        FOLLOWPUSH(FOLLOW_declarator_in_synpred66_CPP_grammar_6046);
        declarator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred66_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred66_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred66_CPP_grammar_Ex: ;

}
// $ANTLR end synpred66_CPP_grammar_

// $ANTLR start synpred67_CPP_grammar_
static void synpred67_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1649:5: ( 'namespace' | 'using' )
    // CPP_grammar_.g:
    {
        if ( LA(1) == 144 || LA(1) == 170 )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;
            FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = NULL;

            goto rulesynpred67_CPP_grammar_Ex;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred67_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred67_CPP_grammar_Ex: ;

}
// $ANTLR end synpred67_CPP_grammar_

// $ANTLR start synpred68_CPP_grammar_
static void synpred68_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1651:5: ( ( 'typedef' )? class_specifier ( qualified_id[$statement::pQualifiedIdBuf] )? LCURLY )
    // CPP_grammar_.g:1651:6: ( 'typedef' )? class_specifier ( qualified_id[$statement::pQualifiedIdBuf] )? LCURLY
    {
        // CPP_grammar_.g:1651:6: ( 'typedef' )?
        {
            int alt240=2;
            switch ( LA(1) )
            {
                case 165:
                	{
                		alt240=1;
                	}
                    break;
            }

            switch (alt240)
            {
        	case 1:
        	    // CPP_grammar_.g:1651:7: 'typedef'
        	    {
        	         MATCHT(165, &FOLLOW_165_in_synpred68_CPP_grammar_6242);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred68_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        FOLLOWPUSH(FOLLOW_class_specifier_in_synpred68_CPP_grammar_6246);
        class_specifier(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred68_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:1651:35: ( qualified_id[$statement::pQualifiedIdBuf] )?
        {
            int alt241=2;
            switch ( LA(1) )
            {
                case ID:
                case OPERATOR:
                case SCOPE:
                case TILDE:
                	{
                		alt241=1;
                	}
                    break;
            }

            switch (alt241)
            {
        	case 1:
        	    // CPP_grammar_.g:1651:36: qualified_id[$statement::pQualifiedIdBuf]
        	    {
        	        FOLLOWPUSH(FOLLOW_qualified_id_in_synpred68_CPP_grammar_6249);
        	        qualified_id(ctx, (SCOPE_TOP(statement))->pQualifiedIdBuf);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred68_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

         MATCHT(LCURLY, &FOLLOW_LCURLY_in_synpred68_CPP_grammar_6254);
        if  (HASEXCEPTION())
        {
            goto rulesynpred68_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred68_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred68_CPP_grammar_Ex: ;

}
// $ANTLR end synpred68_CPP_grammar_

// $ANTLR start synpred69_CPP_grammar_
static void synpred69_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1653:30: ( ptr_operator )
    // CPP_grammar_.g:1653:31: ptr_operator
    {
        FOLLOWPUSH(FOLLOW_ptr_operator_in_synpred69_CPP_grammar_6273);
        ptr_operator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred69_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred69_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred69_CPP_grammar_Ex: ;

}
// $ANTLR end synpred69_CPP_grammar_

// $ANTLR start synpred70_CPP_grammar_
static void synpred70_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1653:5: ( declaration_specifiers ( ( ptr_operator )=> ptr_operator )? qualified_id[$statement::pQualifiedIdBuf] )
    // CPP_grammar_.g:1653:6: declaration_specifiers ( ( ptr_operator )=> ptr_operator )? qualified_id[$statement::pQualifiedIdBuf]
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred70_CPP_grammar_6269);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred70_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        // CPP_grammar_.g:1653:29: ( ( ptr_operator )=> ptr_operator )?
        {
            int alt242=2;
            {
                int LA242_0 = LA(1);
                if ( (synpred69_CPP_grammar_(ctx)) && (LA242_0 == AMPERSAND))
                {
                    alt242=1;
                }
                else if ( (synpred69_CPP_grammar_(ctx)) && (LA242_0 == 88 || LA242_0 == 101))
                {
                    alt242=1;
                }
                else if ( (synpred69_CPP_grammar_(ctx)) && (LA242_0 == 97 || LA242_0 == 109))
                {
                    alt242=1;
                }
                else if ( (synpred69_CPP_grammar_(ctx)) && (LA242_0 == 90 || LA242_0 == 103))
                {
                    alt242=1;
                }
                else if ( (synpred69_CPP_grammar_(ctx)) && (LA242_0 == 96))
                {
                    alt242=1;
                }
                else if ( (synpred69_CPP_grammar_(ctx)) && (LA242_0 == 98 || LA242_0 == 110 || LA242_0 == 146))
                {
                    alt242=1;
                }
                else if ( (synpred69_CPP_grammar_(ctx)) && (LA242_0 == 99 || LA242_0 == 111))
                {
                    alt242=1;
                }
                else if ( (LA242_0 == SCOPE))
                {
                    {
                        int LA242_8 = LA(2);
                        if ( (synpred69_CPP_grammar_(ctx)))
                        {
                            alt242=1;
                        }
                    }
                }
                else if ( (LA242_0 == ID))
                {
                    {
                        int LA242_9 = LA(2);
                        if ( (synpred69_CPP_grammar_(ctx)))
                        {
                            alt242=1;
                        }
                    }
                }
                else if ( (synpred69_CPP_grammar_(ctx)) && (LA242_0 == STAR))
                {
                    alt242=1;
                }
            }
            switch (alt242)
            {
        	case 1:
        	    // CPP_grammar_.g:1653:30: ( ptr_operator )=> ptr_operator
        	    {
        	        FOLLOWPUSH(FOLLOW_ptr_operator_in_synpred70_CPP_grammar_6276);
        	        ptr_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred70_CPP_grammar_Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }

        FOLLOWPUSH(FOLLOW_qualified_id_in_synpred70_CPP_grammar_6280);
        qualified_id(ctx, (SCOPE_TOP(statement))->pQualifiedIdBuf);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred70_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred70_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred70_CPP_grammar_Ex: ;

}
// $ANTLR end synpred70_CPP_grammar_

// $ANTLR start synpred71_CPP_grammar_
static void synpred71_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1655:6: ( labeled_statement )
    // CPP_grammar_.g:1655:7: labeled_statement
    {
        FOLLOWPUSH(FOLLOW_labeled_statement_in_synpred71_CPP_grammar_6297);
        labeled_statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred71_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred71_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred71_CPP_grammar_Ex: ;

}
// $ANTLR end synpred71_CPP_grammar_

// $ANTLR start synpred72_CPP_grammar_
static void synpred72_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1757:5: ( declaration )
    // CPP_grammar_.g:1757:6: declaration
    {
        FOLLOWPUSH(FOLLOW_declaration_in_synpred72_CPP_grammar_6739);
        declaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred72_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred72_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred72_CPP_grammar_Ex: ;

}
// $ANTLR end synpred72_CPP_grammar_

// $ANTLR start synpred73_CPP_grammar_
static void synpred73_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1769:5: ( declaration_specifiers declarator ASSIGNEQUAL )
    // CPP_grammar_.g:1769:6: declaration_specifiers declarator ASSIGNEQUAL
    {
        FOLLOWPUSH(FOLLOW_declaration_specifiers_in_synpred73_CPP_grammar_6808);
        declaration_specifiers(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred73_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_declarator_in_synpred73_CPP_grammar_6810);
        declarator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred73_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(ASSIGNEQUAL, &FOLLOW_ASSIGNEQUAL_in_synpred73_CPP_grammar_6812);
        if  (HASEXCEPTION())
        {
            goto rulesynpred73_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred73_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred73_CPP_grammar_Ex: ;

}
// $ANTLR end synpred73_CPP_grammar_

// $ANTLR start synpred74_CPP_grammar_
static void synpred74_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1785:5: ( LPAREN {...}? ID RPAREN )
    // CPP_grammar_.g:1785:6: LPAREN {...}? ID RPAREN
    {
         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred74_CPP_grammar_6948);
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( !(((qualifiedItemIsOneOf(qiType,0) ))) )
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                EXCEPTION->message      = (void *)"(qualifiedItemIsOneOf(qiType,0) )";
                EXCEPTION->ruleName	 = (void *)"synpred74_CPP_grammar_";


        }

         MATCHT(ID, &FOLLOW_ID_in_synpred74_CPP_grammar_6952);
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(RPAREN, &FOLLOW_RPAREN_in_synpred74_CPP_grammar_6954);
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred74_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred74_CPP_grammar_Ex: ;

}
// $ANTLR end synpred74_CPP_grammar_

// $ANTLR start synpred75_CPP_grammar_
static void synpred75_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1878:4: ( conditional_expression ( COMMA | SEMICOLON | RPAREN ) )
    // CPP_grammar_.g:1878:5: conditional_expression ( COMMA | SEMICOLON | RPAREN )
    {
        FOLLOWPUSH(FOLLOW_conditional_expression_in_synpred75_CPP_grammar_7313);
        conditional_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred75_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        if ( LA(1) == COMMA || LA(1) == RPAREN || LA(1) == SEMICOLON )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;
            FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = NULL;

            goto rulesynpred75_CPP_grammar_Ex;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred75_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred75_CPP_grammar_Ex: ;

}
// $ANTLR end synpred75_CPP_grammar_

// $ANTLR start synpred76_CPP_grammar_
static void synpred76_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:1952:4: ( ( ( LESSTHAN | GREATERTHAN | LESSTHANOREQUALTO | GREATERTHANOREQUALTO ) ) shift_expression )
    // CPP_grammar_.g:1952:4: ( ( LESSTHAN | GREATERTHAN | LESSTHANOREQUALTO | GREATERTHANOREQUALTO ) ) shift_expression
    {
        if ( ((LA(1) >= GREATERTHAN) && (LA(1) <= GREATERTHANOREQUALTO)) || ((LA(1) >= LESSTHAN) && (LA(1) <= LESSTHANOREQUALTO)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;
            FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }

            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = NULL;

            goto rulesynpred76_CPP_grammar_Ex;
        }


        FOLLOWPUSH(FOLLOW_shift_expression_in_synpred76_CPP_grammar_7622);
        shift_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred76_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred76_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred76_CPP_grammar_Ex: ;

}
// $ANTLR end synpred76_CPP_grammar_

// $ANTLR start synpred77_CPP_grammar_
static void synpred77_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2038:3: ( LPAREN type_id RPAREN unary_expression )
    // CPP_grammar_.g:2038:4: LPAREN type_id RPAREN unary_expression
    {
         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred77_CPP_grammar_7815);
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_type_id_in_synpred77_CPP_grammar_7817);
        type_id(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(RPAREN, &FOLLOW_RPAREN_in_synpred77_CPP_grammar_7819);
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_unary_expression_in_synpred77_CPP_grammar_7821);
        unary_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred77_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred77_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred77_CPP_grammar_Ex: ;

}
// $ANTLR end synpred77_CPP_grammar_

// $ANTLR start synpred78_CPP_grammar_
static void synpred78_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2042:3: ( LPAREN type_id RPAREN cast_expression )
    // CPP_grammar_.g:2042:4: LPAREN type_id RPAREN cast_expression
    {
         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred78_CPP_grammar_7845);
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_type_id_in_synpred78_CPP_grammar_7847);
        type_id(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(RPAREN, &FOLLOW_RPAREN_in_synpred78_CPP_grammar_7849);
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_cast_expression_in_synpred78_CPP_grammar_7851);
        cast_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred78_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred78_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred78_CPP_grammar_Ex: ;

}
// $ANTLR end synpred78_CPP_grammar_

// $ANTLR start synpred79_CPP_grammar_
static void synpred79_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2053:4: ( postfix_expression )
    // CPP_grammar_.g:2053:5: postfix_expression
    {
        FOLLOWPUSH(FOLLOW_postfix_expression_in_synpred79_CPP_grammar_7896);
        postfix_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred79_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred79_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred79_CPP_grammar_Ex: ;

}
// $ANTLR end synpred79_CPP_grammar_

// $ANTLR start synpred80_CPP_grammar_
static void synpred80_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2065:6: ( unary_expression )
    // CPP_grammar_.g:2065:7: unary_expression
    {
        FOLLOWPUSH(FOLLOW_unary_expression_in_synpred80_CPP_grammar_7972);
        unary_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred80_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred80_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred80_CPP_grammar_Ex: ;

}
// $ANTLR end synpred80_CPP_grammar_

// $ANTLR start synpred81_CPP_grammar_
static void synpred81_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
	TypeSpecifier ts;
	#undef	RETURN_TYPE_ts
	#define	RETURN_TYPE_ts TypeSpecifier

    // CPP_grammar_.g:2096:3: (ts= simple_type_specifier LPAREN )
    // CPP_grammar_.g:2096:4: ts= simple_type_specifier LPAREN
    {
        FOLLOWPUSH(FOLLOW_simple_type_specifier_in_synpred81_CPP_grammar_8085);
        ts=simple_type_specifier(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred81_CPP_grammar_8087);
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred81_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred81_CPP_grammar_Ex: ;

}
// $ANTLR end synpred81_CPP_grammar_

// $ANTLR start synpred82_CPP_grammar_
static void synpred82_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2121:11: ( type_id )
    // CPP_grammar_.g:2121:12: type_id
    {
        FOLLOWPUSH(FOLLOW_type_id_in_synpred82_CPP_grammar_8299);
        type_id(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred82_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred82_CPP_grammar_Ex: ;

}
// $ANTLR end synpred82_CPP_grammar_

// $ANTLR start synpred83_CPP_grammar_
static void synpred83_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2187:5: ( LPAREN expression_list RPAREN )
    // CPP_grammar_.g:2187:6: LPAREN expression_list RPAREN
    {
         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred83_CPP_grammar_8531);
        if  (HASEXCEPTION())
        {
            goto rulesynpred83_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_expression_list_in_synpred83_CPP_grammar_8533);
        expression_list(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred83_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(RPAREN, &FOLLOW_RPAREN_in_synpred83_CPP_grammar_8535);
        if  (HASEXCEPTION())
        {
            goto rulesynpred83_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred83_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred83_CPP_grammar_Ex: ;

}
// $ANTLR end synpred83_CPP_grammar_

// $ANTLR start synpred84_CPP_grammar_
static void synpred84_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2190:3: ( LPAREN type_id RPAREN )
    // CPP_grammar_.g:2190:4: LPAREN type_id RPAREN
    {
         MATCHT(LPAREN, &FOLLOW_LPAREN_in_synpred84_CPP_grammar_8559);
        if  (HASEXCEPTION())
        {
            goto rulesynpred84_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_type_id_in_synpred84_CPP_grammar_8561);
        type_id(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred84_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(RPAREN, &FOLLOW_RPAREN_in_synpred84_CPP_grammar_8563);
        if  (HASEXCEPTION())
        {
            goto rulesynpred84_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred84_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred84_CPP_grammar_Ex: ;

}
// $ANTLR end synpred84_CPP_grammar_

// $ANTLR start synpred85_CPP_grammar_
static void synpred85_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2193:3: ( new_initializer )
    // CPP_grammar_.g:2193:4: new_initializer
    {
        FOLLOWPUSH(FOLLOW_new_initializer_in_synpred85_CPP_grammar_8586);
        new_initializer(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred85_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred85_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred85_CPP_grammar_Ex: ;

}
// $ANTLR end synpred85_CPP_grammar_

// $ANTLR start synpred86_CPP_grammar_
static void synpred86_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
	char * s1;
	#undef	RETURN_TYPE_s1
	#define	RETURN_TYPE_s1 char *

    // CPP_grammar_.g:2259:5: (s1= scope_override[$ptr_operator::pScopeOverrideBuf] STAR cv_qualifier_seq )
    // CPP_grammar_.g:2259:6: s1= scope_override[$ptr_operator::pScopeOverrideBuf] STAR cv_qualifier_seq
    {
        FOLLOWPUSH(FOLLOW_scope_override_in_synpred86_CPP_grammar_8841);
        s1=scope_override(ctx, (SCOPE_TOP(ptr_operator))->pScopeOverrideBuf);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(STAR, &FOLLOW_STAR_in_synpred86_CPP_grammar_8844);
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_cv_qualifier_seq_in_synpred86_CPP_grammar_8846);
        cv_qualifier_seq(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred86_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred86_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred86_CPP_grammar_Ex: ;

}
// $ANTLR end synpred86_CPP_grammar_

// $ANTLR start synpred87_CPP_grammar_
static void synpred87_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2299:4: ( ID LESSTHAN template_argument_list GREATERTHAN SCOPE )
    // CPP_grammar_.g:2299:5: ID LESSTHAN template_argument_list GREATERTHAN SCOPE
    {
         MATCHT(ID, &FOLLOW_ID_in_synpred87_CPP_grammar_8999);
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(LESSTHAN, &FOLLOW_LESSTHAN_in_synpred87_CPP_grammar_9001);
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_template_argument_list_in_synpred87_CPP_grammar_9003);
        template_argument_list(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(GREATERTHAN, &FOLLOW_GREATERTHAN_in_synpred87_CPP_grammar_9005);
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SCOPE, &FOLLOW_SCOPE_in_synpred87_CPP_grammar_9007);
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred87_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred87_CPP_grammar_Ex: ;

}
// $ANTLR end synpred87_CPP_grammar_

// $ANTLR start synpred88_CPP_grammar_
static void synpred88_CPP_grammar__fragment(pCPP_grammar_Parser ctx )
{
    // CPP_grammar_.g:2306:4: ( ID SCOPE )
    // CPP_grammar_.g:2306:5: ID SCOPE
    {
         MATCHT(ID, &FOLLOW_ID_in_synpred88_CPP_grammar_9060);
        if  (HASEXCEPTION())
        {
            goto rulesynpred88_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(SCOPE, &FOLLOW_SCOPE_in_synpred88_CPP_grammar_9062);
        if  (HASEXCEPTION())
        {
            goto rulesynpred88_CPP_grammar_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred88_CPP_grammar_Ex; /* Prevent compiler warnings */
rulesynpred88_CPP_grammar_Ex: ;

}
// $ANTLR end synpred88_CPP_grammar_
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred46_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred46_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred77_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred77_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred37_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred37_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred25_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred25_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred9_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred9_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred57_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred57_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred56_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred56_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred85_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred85_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred51_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred51_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred13_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred13_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred1_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred70_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred70_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred72_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred72_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred33_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred33_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred34_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred34_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred59_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred59_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred29_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred29_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred42_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred42_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred60_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred60_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred81_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred81_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred10_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred10_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred15_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred15_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred23_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred23_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred69_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred69_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred76_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred76_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred22_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred22_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred20_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred20_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred43_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred43_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred52_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred52_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred75_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred75_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred71_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred71_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred41_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred41_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred30_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred30_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred5_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred5_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred26_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred50_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred50_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred47_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred47_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred83_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred83_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred38_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred38_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred8_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred8_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred58_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred58_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred32_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred32_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred24_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred24_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred63_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred63_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred2_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred2_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred18_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred18_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred35_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred35_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred73_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred73_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred54_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred54_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred19_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred19_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred14_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred14_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred16_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred16_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred44_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred44_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred64_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred64_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred4_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred4_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred12_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred12_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred79_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred79_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred66_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred66_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred3_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred3_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred53_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred53_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred27_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred27_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred88_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred88_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred87_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred87_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred67_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred67_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred40_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred40_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred68_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred68_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred7_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred7_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred74_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred74_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred61_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred61_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred6_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred6_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred49_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred49_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred80_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred80_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred78_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred78_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred55_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred55_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred21_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred21_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred86_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred86_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred84_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred84_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred62_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred62_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred82_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred82_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred48_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred48_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred65_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred65_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred31_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred31_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred39_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred39_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred17_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred17_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred28_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred28_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred11_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred11_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred36_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred36_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred45_CPP_grammar_(pCPP_grammar_Parser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred45_CPP_grammar__fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
