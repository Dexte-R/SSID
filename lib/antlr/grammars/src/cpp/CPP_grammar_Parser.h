/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : CPP_grammar_.g
 *     -                            On : 2012-10-12 16:29:39
 *     -                for the parser : CPP_grammar_ParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
CPP_grammar_Parser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCPP_grammar_Parser, which is returned from a call to CPP_grammar_ParserNew().
 *
 * The methods in pCPP_grammar_Parser are  as follows:
 *
 *  - 
 void
      pCPP_grammar_Parser->translation_unit(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->external_declaration(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->member_declaration(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->namespace_definition(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->namespace_alias_definition(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->function_definition(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->declaration(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->linkage_specification(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->class_head(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->declaration_specifiers(pCPP_grammar_Parser)
 *  - 
 StorageClass
      pCPP_grammar_Parser->storage_class_specifier(pCPP_grammar_Parser)
 *  - 
 FunctionSpecifier
      pCPP_grammar_Parser->function_specifier(pCPP_grammar_Parser)
 *  - 
 TypeSpecifier
      pCPP_grammar_Parser->type_specifier(pCPP_grammar_Parser)
 *  - 
 TypeSpecifier
      pCPP_grammar_Parser->simple_type_specifier(pCPP_grammar_Parser)
 *  - 
 char *
      pCPP_grammar_Parser->qualified_type(pCPP_grammar_Parser)
 *  - 
 TypeSpecifier
      pCPP_grammar_Parser->class_specifier(pCPP_grammar_Parser)
 *  - 
 TypeQualifier
      pCPP_grammar_Parser->type_qualifier(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->class_decl_or_def(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->base_clause(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->base_specifier(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->access_specifier(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->enum_specifier(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->enumerator_list(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->enumerator(pCPP_grammar_Parser)
 *  - 
 CPP_grammar_Parser_qualified_id_return
      pCPP_grammar_Parser->qualified_id(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->typeID(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->init_declarator_list(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->member_declarator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->initializer(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->declarator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->direct_declarator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->declarator_suffix(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->conversion_function_decl_or_def(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->function_declarator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->function_direct_declarator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->ctor_definition(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->ctor_head(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->ctor_decl_spec(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->ctor_declarator(pCPP_grammar_Parser)
 *  - 
 char *
      pCPP_grammar_Parser->qualified_ctor_id(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->ctor_body(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->ctor_initializer(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->superclass_init(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->dtor_head(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->dtor_decl_spec(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->dtor_declarator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->dtor_body(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->parameter_list(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->parameter_declaration_list(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->parameter_declaration(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->type_id(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->abstract_declarator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->abstract_declarator_suffix(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->exception_specification(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->template_head(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->template_parameter_list(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->template_parameter(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->type_parameter(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->assigned_type_name(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->template_parameter_declaration(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->template_id(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->template_argument_list(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->template_argument(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->statement_list(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->block_declaration(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->simple_declaration(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->labeled_statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->case_statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->default_statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->compound_statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->selection_statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->iteration_statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->condition(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->jump_statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->try_block(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->handler(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->exception_declaration(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->throw_statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->using_statement(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->assignment_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->remainder_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->conditional_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->constant_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->logical_or_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->logical_and_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->inclusive_or_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->exclusive_or_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->and_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->equality_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->relational_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->shift_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->additive_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->multiplicative_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->pm_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->cast_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->unary_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->postfix_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->primary_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->id_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->literal(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->unary_operator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->new_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->new_initializer(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->new_type_id(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->new_declarator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->direct_new_declarator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->ptr_operator(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->ptr_to_member(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->cv_qualifier_seq(pCPP_grammar_Parser)
 *  - 
 char *
      pCPP_grammar_Parser->scope_override(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->delete_expression(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->expression_list(pCPP_grammar_Parser)
 *  - 
 char*
      pCPP_grammar_Parser->optor(pCPP_grammar_Parser)
 *  - 
 void
      pCPP_grammar_Parser->optor_simple_tokclass(pCPP_grammar_Parser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CPP_grammar_Parser_H
#define _CPP_grammar_Parser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CPP_grammar_Parser_Ctx_struct CPP_grammar_Parser, * pCPP_grammar_Parser;



	extern "C++"
	{
	#include "header_file.h"
	}
	//typedef CPP_grammar_Parser_function_specifier_return FS_ret_t;
	//typedef CPP_grammar_Parser_type_specifier_return TS_ret_t;


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct CPP_grammar_Parser_qualified_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    char * qiReturn;
}
    CPP_grammar_Parser_qualified_id_return;





/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet()
 */
 /** Definition of the external_declaration scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  CPP_grammar_Parser_external_declarationPush().
 */
typedef struct  CPP_grammar_Parser_external_declaration_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct CPP_grammar_Parser_external_declaration_SCOPE_struct * frame);

    /* =============================================================================
     * Programmer defined variables...
     */
    char *pScopeOverrideBuf;

    /* End of programmer defined variables
     * =============================================================================
     */
}
    CPP_grammar_Parser_external_declaration_SCOPE, * pCPP_grammar_Parser_external_declaration_SCOPE;


/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet()
 */
 /** Definition of the direct_declarator scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  CPP_grammar_Parser_direct_declaratorPush().
 */
typedef struct  CPP_grammar_Parser_direct_declarator_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct CPP_grammar_Parser_direct_declarator_SCOPE_struct * frame);

    /* =============================================================================
     * Programmer defined variables...
     */
    char *pQualifiedIdBuf;

    /* End of programmer defined variables
     * =============================================================================
     */
}
    CPP_grammar_Parser_direct_declarator_SCOPE, * pCPP_grammar_Parser_direct_declarator_SCOPE;


/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet()
 */
 /** Definition of the statement scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  CPP_grammar_Parser_statementPush().
 */
typedef struct  CPP_grammar_Parser_statement_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct CPP_grammar_Parser_statement_SCOPE_struct * frame);

    /* =============================================================================
     * Programmer defined variables...
     */
    char *pQualifiedIdBuf;

    /* End of programmer defined variables
     * =============================================================================
     */
}
    CPP_grammar_Parser_statement_SCOPE, * pCPP_grammar_Parser_statement_SCOPE;


/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet()
 */
 /** Definition of the ptr_operator scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  CPP_grammar_Parser_ptr_operatorPush().
 */
typedef struct  CPP_grammar_Parser_ptr_operator_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct CPP_grammar_Parser_ptr_operator_SCOPE_struct * frame);

    /* =============================================================================
     * Programmer defined variables...
     */
    char *pScopeOverrideBuf;

    /* End of programmer defined variables
     * =============================================================================
     */
}
    CPP_grammar_Parser_ptr_operator_SCOPE, * pCPP_grammar_Parser_ptr_operator_SCOPE;


/** Context tracking structure for 
CPP_grammar_Parser

 */
struct CPP_grammar_Parser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  external_declaration stack for use by pCPP_grammar_Parser_external_declarationPush()
     *  and pCPP_grammar_Parser_external_declarationPop()
     */
    pANTLR3_STACK pCPP_grammar_Parser_external_declarationStack;
    ANTLR3_UINT32 pCPP_grammar_Parser_external_declarationStack_limit;
    pCPP_grammar_Parser_external_declaration_SCOPE   (*pCPP_grammar_Parser_external_declarationPush)(struct CPP_grammar_Parser_Ctx_struct * ctx);
    pCPP_grammar_Parser_external_declaration_SCOPE   pCPP_grammar_Parser_external_declarationTop;


    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  direct_declarator stack for use by pCPP_grammar_Parser_direct_declaratorPush()
     *  and pCPP_grammar_Parser_direct_declaratorPop()
     */
    pANTLR3_STACK pCPP_grammar_Parser_direct_declaratorStack;
    ANTLR3_UINT32 pCPP_grammar_Parser_direct_declaratorStack_limit;
    pCPP_grammar_Parser_direct_declarator_SCOPE   (*pCPP_grammar_Parser_direct_declaratorPush)(struct CPP_grammar_Parser_Ctx_struct * ctx);
    pCPP_grammar_Parser_direct_declarator_SCOPE   pCPP_grammar_Parser_direct_declaratorTop;


    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  statement stack for use by pCPP_grammar_Parser_statementPush()
     *  and pCPP_grammar_Parser_statementPop()
     */
    pANTLR3_STACK pCPP_grammar_Parser_statementStack;
    ANTLR3_UINT32 pCPP_grammar_Parser_statementStack_limit;
    pCPP_grammar_Parser_statement_SCOPE   (*pCPP_grammar_Parser_statementPush)(struct CPP_grammar_Parser_Ctx_struct * ctx);
    pCPP_grammar_Parser_statement_SCOPE   pCPP_grammar_Parser_statementTop;


    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  ptr_operator stack for use by pCPP_grammar_Parser_ptr_operatorPush()
     *  and pCPP_grammar_Parser_ptr_operatorPop()
     */
    pANTLR3_STACK pCPP_grammar_Parser_ptr_operatorStack;
    ANTLR3_UINT32 pCPP_grammar_Parser_ptr_operatorStack_limit;
    pCPP_grammar_Parser_ptr_operator_SCOPE   (*pCPP_grammar_Parser_ptr_operatorPush)(struct CPP_grammar_Parser_Ctx_struct * ctx);
    pCPP_grammar_Parser_ptr_operator_SCOPE   pCPP_grammar_Parser_ptr_operatorTop;




     void
     (*translation_unit)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*external_declaration)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*member_declaration)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*namespace_definition)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*namespace_alias_definition)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*function_definition)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*declaration)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*linkage_specification)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*class_head)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*declaration_specifiers)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     StorageClass
     (*storage_class_specifier)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     FunctionSpecifier
     (*function_specifier)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     TypeSpecifier
     (*type_specifier)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     TypeSpecifier
     (*simple_type_specifier)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     char *
     (*qualified_type)	(struct CPP_grammar_Parser_Ctx_struct * ctx, char *pQualifiedTypeBuf);

     TypeSpecifier
     (*class_specifier)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     TypeQualifier
     (*type_qualifier)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*class_decl_or_def)	(struct CPP_grammar_Parser_Ctx_struct * ctx, char *pClassDeclOrDefBuf, FunctionSpecifier fs);

     void
     (*base_clause)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*base_specifier)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*access_specifier)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*enum_specifier)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*enumerator_list)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*enumerator)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     CPP_grammar_Parser_qualified_id_return
     (*qualified_id)	(struct CPP_grammar_Parser_Ctx_struct * ctx, char *pScopeReturnBuf);

     void
     (*typeID)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*init_declarator_list)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*member_declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*initializer)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*direct_declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*declarator_suffix)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*conversion_function_decl_or_def)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*function_declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx, int definition);

     void
     (*function_direct_declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx, int definition);

     void
     (*ctor_definition)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*ctor_head)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*ctor_decl_spec)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*ctor_declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx, int definition);

     char *
     (*qualified_ctor_id)	(struct CPP_grammar_Parser_Ctx_struct * ctx, char *pQualifiedCtorIdBuf);

     void
     (*ctor_body)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*ctor_initializer)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*superclass_init)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*dtor_head)	(struct CPP_grammar_Parser_Ctx_struct * ctx, int definition);

     void
     (*dtor_decl_spec)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*dtor_declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx, int definition);

     void
     (*dtor_body)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*parameter_list)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*parameter_declaration_list)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*parameter_declaration)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*type_id)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*abstract_declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*abstract_declarator_suffix)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*exception_specification)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*template_head)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*template_parameter_list)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*template_parameter)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*type_parameter)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*assigned_type_name)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*template_parameter_declaration)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*template_id)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*template_argument_list)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*template_argument)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*statement_list)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*block_declaration)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*simple_declaration)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*labeled_statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*case_statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*default_statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*compound_statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*selection_statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*iteration_statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*condition)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*jump_statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*try_block)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*handler)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*exception_declaration)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*throw_statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*using_statement)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*assignment_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*remainder_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*conditional_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*constant_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*logical_or_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*logical_and_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*inclusive_or_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*exclusive_or_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*and_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*equality_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*relational_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*shift_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*additive_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*multiplicative_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*pm_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*cast_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*unary_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*postfix_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*primary_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*id_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*literal)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*unary_operator)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*new_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*new_initializer)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*new_type_id)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*new_declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*direct_new_declarator)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*ptr_operator)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*ptr_to_member)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*cv_qualifier_seq)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     char *
     (*scope_override)	(struct CPP_grammar_Parser_Ctx_struct * ctx, char *pBufScopeOverrideBuf);

     void
     (*delete_expression)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     void
     (*expression_list)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     char*
     (*optor)	(struct CPP_grammar_Parser_Ctx_struct * ctx, char *pScopeReturnBuf);

     void
     (*optor_simple_tokclass)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred2_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred3_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred4_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred5_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred6_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred7_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred8_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred9_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred10_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred11_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred12_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred13_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred14_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred15_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred16_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred17_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred18_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred19_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred20_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred21_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred22_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred23_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred24_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred25_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred26_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred27_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred28_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred29_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred30_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred31_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred32_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred33_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred34_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred35_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred36_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred37_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred38_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred39_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred40_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred41_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred42_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred43_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred44_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred45_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred46_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred47_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred48_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred49_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred50_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred51_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred52_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred53_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred54_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred55_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred56_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred57_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred58_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred59_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred60_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred61_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred62_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred63_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred64_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred65_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred66_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred67_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred68_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred69_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred70_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred71_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred72_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred73_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred74_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred75_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred76_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred77_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred78_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred79_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred80_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred81_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred82_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred83_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred84_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred85_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred86_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred87_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred88_CPP_grammar_)	(struct CPP_grammar_Parser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CPP_grammar_Parser_Ctx_struct * ctx);
    void	    (*free)   (struct CPP_grammar_Parser_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCPP_grammar_Parser CPP_grammar_ParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pCPP_grammar_Parser CPP_grammar_ParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define AMPERSAND      4
#define AND      5
#define ASSIGNEQUAL      6
#define BITWISEANDEQUAL      7
#define BITWISEOR      8
#define BITWISEOREQUAL      9
#define BITWISEXOR      10
#define BITWISEXOREQUAL      11
#define COLON      12
#define COMMA      13
#define CPPComment      14
#define CharLiteral      15
#define Comment      16
#define DECIMALINT      17
#define DIVIDE      18
#define DIVIDEEQUAL      19
#define DOT      20
#define DOTMBR      21
#define Decimal      22
#define Digit      23
#define ELLIPSIS      24
#define EQUAL      25
#define EndOfContinuedLine      26
#define EndOfLine      27
#define Error      28
#define Escape      29
#define Exponent      30
#define FLOATONE      31
#define FLOATTWO      32
#define FloatSuffix      33
#define GREATERTHAN      34
#define GREATERTHANOREQUALTO      35
#define HEXADECIMALINT      36
#define HexQuad      37
#define HexadecimalDigit      38
#define ID      39
#define LCURLY      40
#define LESSTHAN      41
#define LESSTHANOREQUALTO      42
#define LPAREN      43
#define LSQUARE      44
#define LineDirective      45
#define LongSuffix      46
#define MINUS      47
#define MINUSEQUAL      48
#define MINUSMINUS      49
#define MOD      50
#define MODEQUAL      51
#define NOT      52
#define NOTEQUAL      53
#define Number      54
#define OCTALINT      55
#define OPERATOR      56
#define OR      57
#define PLUS      58
#define PLUSEQUAL      59
#define PLUSPLUS      60
#define POINTERTO      61
#define POINTERTOMBR      62
#define PREPROC_DIRECTIVE      63
#define Pragma      64
#define PreProcDirective      65
#define QUESTIONMARK      66
#define RCURLY      67
#define RPAREN      68
#define RSQUARE      69
#define SCOPE      70
#define SEMICOLON      71
#define SHIFTLEFT      72
#define SHIFTLEFTEQUAL      73
#define SHIFTRIGHT      74
#define SHIFTRIGHTEQUAL      75
#define STAR      76
#define Space      77
#define StringLiteral      78
#define TILDE      79
#define TIMESEQUAL      80
#define UniversalCharacterName      81
#define UnsignedSuffix      82
#define Vocabulary      83
#define WCharLiteral      84
#define WStringLiteral      85
#define Whitespace      86
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CPP_grammar_Parser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
